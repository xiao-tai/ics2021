

typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;

typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;

typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;

typedef long int __quad_t;
typedef unsigned long int __u_quad_t;

typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;

typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct {
  int __val[2];
} __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;
typedef long int __suseconds64_t;

typedef int __daddr_t;
typedef int __key_t;

typedef int __clockid_t;

typedef void *__timer_t;

typedef long int __blksize_t;

typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;

typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;

typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __fsword_t;

typedef long int __ssize_t;

typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;

typedef __off64_t __loff_t;
typedef char *__caddr_t;

typedef long int __intptr_t;

typedef unsigned int __socklen_t;

typedef int __sig_atomic_t;

typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;

typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;

typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;

typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;

typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
typedef long int intptr_t;

typedef unsigned long int uintptr_t;
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;

typedef long unsigned int size_t;

extern void *memcpy(void *__restrict __dest, const void *__restrict __src,
                    size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern void *memmove(void *__dest, const void *__src, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern void *memccpy(void *__restrict __dest, const void *__restrict __src,
                     int __c, size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)))
__attribute__((__access__(__write_only__, 1, 4)));

extern void *memset(void *__s, int __c, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int memcmp(const void *__s1, const void *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
extern void *memchr(const void *__s, int __c, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
extern char *strcpy(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *strncpy(char *__restrict __dest, const char *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern char *strcat(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *strncat(char *__restrict __dest, const char *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern int strcmp(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strncmp(const char *__s1, const char *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strcoll(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern size_t strxfrm(char *__restrict __dest, const char *__restrict __src,
                      size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(2)))
__attribute__((__access__(__write_only__, 1, 3)));

struct __locale_struct {

  struct __locale_data *__locales[13];

  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;

  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;

typedef __locale_t locale_t;

extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2, 3)));

extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n,
                        locale_t __l) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(2, 4)))
__attribute__((__access__(__write_only__, 1, 3)));

extern char *strdup(const char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__malloc__)) __attribute__((__nonnull__(1)));

extern char *strndup(const char *__string, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__nonnull__(1)));
extern char *strchr(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
extern char *strrchr(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
extern size_t strcspn(const char *__s, const char *__reject)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern size_t strspn(const char *__s, const char *__accept)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
extern char *strpbrk(const char *__s, const char *__accept)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));
extern char *strstr(const char *__haystack, const char *__needle)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern char *strtok(char *__restrict __s, const char *__restrict __delim)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern char *__strtok_r(char *__restrict __s, const char *__restrict __delim,
                        char **__restrict __save_ptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));

extern char *strtok_r(char *__restrict __s, const char *__restrict __delim,
                      char **__restrict __save_ptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 3)));
extern size_t strlen(const char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)));

extern size_t strnlen(const char *__string, size_t __maxlen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));

extern char *strerror(int __errnum) __attribute__((__nothrow__, __leaf__));
extern int strerror_r(int __errnum, char *__buf,
                      size_t __buflen) __asm__(""
                                               "__xpg_strerror_r")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(2)))
    __attribute__((__access__(__write_only__, 2, 3)));
extern char *strerror_l(int __errnum, locale_t __l)
    __attribute__((__nothrow__, __leaf__));

extern int bcmp(const void *__s1, const void *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern void bcopy(const void *__src, void *__dest, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern void bzero(void *__s, size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
extern char *index(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));
extern char *rindex(const char *__s, int __c)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1)));

extern int ffs(int __i) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int ffsl(long int __l) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
__extension__ extern int ffsll(long long int __ll)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int strcasecmp(const char *__s1, const char *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2, 3)));

extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n,
                         locale_t __loc) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1, 2, 4)));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) void
    __attribute__((__nothrow__, __leaf__))
    bcopy(const void *__src, void *__dest, size_t __len) {
  (void)__builtin___memmove_chk(__dest, __src, __len,
                                __builtin_object_size(__dest, 0));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) void
    __attribute__((__nothrow__, __leaf__)) bzero(void *__dest, size_t __len) {
  (void)__builtin___memset_chk(__dest, '\0', __len,
                               __builtin_object_size(__dest, 0));
}

extern void explicit_bzero(void *__s, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__write_only__, 1, 2)));

extern char *strsep(char **__restrict __stringp, const char *__restrict __delim)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *strsignal(int __sig) __attribute__((__nothrow__, __leaf__));
extern char *__stpcpy(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern char *stpcpy(char *__restrict __dest, const char *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern char *__stpncpy(char *__restrict __dest, const char *__restrict __src,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));
extern char *stpncpy(char *__restrict __dest, const char *__restrict __src,
                     size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1, 2)));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) void *__attribute__((__nothrow__, __leaf__))
memcpy(void *__restrict __dest, const void *__restrict __src, size_t __len)

{
  return __builtin___memcpy_chk(__dest, __src, __len,
                                __builtin_object_size(__dest, 0));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) void *__attribute__((__nothrow__, __leaf__))
memmove(void *__dest, const void *__src, size_t __len) {
  return __builtin___memmove_chk(__dest, __src, __len,
                                 __builtin_object_size(__dest, 0));
}
extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) void *__attribute__((__nothrow__, __leaf__))
memset(void *__dest, int __ch, size_t __len) {
  return __builtin___memset_chk(__dest, __ch, __len,
                                __builtin_object_size(__dest, 0));
}

void __explicit_bzero_chk(void *__dest, size_t __len, size_t __destlen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__access__(__write_only__, 1, 2)));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) void
    __attribute__((__nothrow__, __leaf__))
    explicit_bzero(void *__dest, size_t __len) {
  __explicit_bzero_chk(__dest, __len, __builtin_object_size(__dest, 0));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) char *__attribute__((__nothrow__, __leaf__))
strcpy(char *__restrict __dest, const char *__restrict __src) {
  return __builtin___strcpy_chk(__dest, __src,
                                __builtin_object_size(__dest, 2 > 1));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) char *__attribute__((__nothrow__, __leaf__))
stpcpy(char *__restrict __dest, const char *__restrict __src) {
  return __builtin___stpcpy_chk(__dest, __src,
                                __builtin_object_size(__dest, 2 > 1));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) char *__attribute__((__nothrow__, __leaf__))
strncpy(char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncpy_chk(__dest, __src, __len,
                                 __builtin_object_size(__dest, 2 > 1));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) char *__attribute__((__nothrow__, __leaf__))
stpncpy(char *__dest, const char *__src, size_t __n) {
  return __builtin___stpncpy_chk(__dest, __src, __n,
                                 __builtin_object_size(__dest, 2 > 1));
}
extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) char *__attribute__((__nothrow__, __leaf__))
strcat(char *__restrict __dest, const char *__restrict __src) {
  return __builtin___strcat_chk(__dest, __src,
                                __builtin_object_size(__dest, 2 > 1));
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) char *__attribute__((__nothrow__, __leaf__))
strncat(char *__restrict __dest, const char *__restrict __src, size_t __len)

{
  return __builtin___strncat_chk(__dest, __src, __len,
                                 __builtin_object_size(__dest, 2 > 1));
}

extern void __assert_fail(const char *__assertion, const char *__file,
                          unsigned int __line, const char *__function)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__noreturn__));

extern void __assert_perror_fail(int __errnum, const char *__file,
                                 unsigned int __line, const char *__function)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__noreturn__));

extern void __assert(const char *__assertion, const char *__file, int __line)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__noreturn__));

typedef int wchar_t;

typedef struct {
  int quot;
  int rem;
} div_t;

typedef struct {
  long int quot;
  long int rem;
} ldiv_t;

__extension__ typedef struct {
  long long int quot;
  long long int rem;
} lldiv_t;

extern size_t __ctype_get_mb_cur_max(void)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));

extern double atof(const char *__nptr) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));

extern int atoi(const char *__nptr) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));

extern long int atol(const char *__nptr) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));

__extension__ extern long long int atoll(const char *__nptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));

extern double strtod(const char *__restrict __nptr, char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern float strtof(const char *__restrict __nptr, char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long double strtold(const char *__restrict __nptr,
                           char **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
extern long int strtol(const char *__restrict __nptr,
                       char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern unsigned long int strtoul(const char *__restrict __nptr,
                                 char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern long long int
strtoq(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern unsigned long long int
strtouq(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern long long int
strtoll(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

__extension__ extern unsigned long long int
strtoull(const char *__restrict __nptr, char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
extern __inline __attribute__((__gnu_inline__)) int
    __attribute__((__nothrow__, __leaf__)) atoi(const char *__nptr) {
  return (int)strtol(__nptr, (char **)((void *)0), 10);
}
extern __inline __attribute__((__gnu_inline__)) long int
    __attribute__((__nothrow__, __leaf__)) atol(const char *__nptr) {
  return strtol(__nptr, (char **)((void *)0), 10);
}

__extension__ extern __inline __attribute__((__gnu_inline__)) long long int
    __attribute__((__nothrow__, __leaf__)) atoll(const char *__nptr) {
  return strtoll(__nptr, (char **)((void *)0), 10);
}
extern char *l64a(long int __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));

extern long int a64l(const char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__)) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));

typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;

typedef __loff_t loff_t;

typedef __ino_t ino_t;

typedef __dev_t dev_t;

typedef __gid_t gid_t;

typedef __mode_t mode_t;

typedef __nlink_t nlink_t;

typedef __uid_t uid_t;

typedef __off_t off_t;

typedef __pid_t pid_t;

typedef __id_t id_t;

typedef __ssize_t ssize_t;

typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;

typedef __key_t key_t;

typedef __clock_t clock_t;

typedef __clockid_t clockid_t;

typedef __time_t time_t;

typedef __timer_t timer_t;

typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;

typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;

typedef int register_t __attribute__((__mode__(__word__)));

static __inline __uint16_t __bswap_16(__uint16_t __bsx) {

  return __builtin_bswap16(__bsx);
}

static __inline __uint32_t __bswap_32(__uint32_t __bsx) {

  return __builtin_bswap32(__bsx);
}

__extension__ static __inline __uint64_t __bswap_64(__uint64_t __bsx) {

  return __builtin_bswap64(__bsx);
}

static __inline __uint16_t __uint16_identity(__uint16_t __x) { return __x; }

static __inline __uint32_t __uint32_identity(__uint32_t __x) { return __x; }

static __inline __uint64_t __uint64_identity(__uint64_t __x) { return __x; }

typedef struct {
  unsigned long int __val[(1024 / (8 * sizeof(unsigned long int)))];
} __sigset_t;

typedef __sigset_t sigset_t;

struct timeval {

  __time_t tv_sec;
  __suseconds_t tv_usec;
};

struct timespec {

  __time_t tv_sec;

  __syscall_slong_t tv_nsec;
};

typedef __suseconds_t suseconds_t;

typedef long int __fd_mask;

typedef struct {

  __fd_mask __fds_bits[1024 / (8 * (int)sizeof(__fd_mask))];

} fd_set;

typedef __fd_mask fd_mask;

extern int select(int __nfds, fd_set *__restrict __readfds,
                  fd_set *__restrict __writefds, fd_set *__restrict __exceptfds,
                  struct timeval *__restrict __timeout);
extern int pselect(int __nfds, fd_set *__restrict __readfds,
                   fd_set *__restrict __writefds,
                   fd_set *__restrict __exceptfds,
                   const struct timespec *__restrict __timeout,
                   const __sigset_t *__restrict __sigmask);
extern long int __fdelt_chk(long int __d);
extern long int __fdelt_warn(long int __d)
    __attribute__((__warning__("bit outside of fd_set selected")));

typedef __blksize_t blksize_t;

typedef __blkcnt_t blkcnt_t;

typedef __fsblkcnt_t fsblkcnt_t;

typedef __fsfilcnt_t fsfilcnt_t;

typedef union {
  __extension__ unsigned long long int __value64;
  struct {
    unsigned int __low;
    unsigned int __high;
  } __value32;
} __atomic_wide_counter;

typedef struct __pthread_internal_list {
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist {
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;

struct __pthread_mutex_s {
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;

  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
};

struct __pthread_rwlock_arch_t {
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;

  unsigned char __pad1[7];

  unsigned long int __pad2;

  unsigned int __flags;
};

struct __pthread_cond_s {
  __atomic_wide_counter __wseq;
  __atomic_wide_counter __g1_start;
  unsigned int __g_refs[2];
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};

typedef unsigned int __tss_t;
typedef unsigned long int __thrd_t;

typedef struct {
  int __data;
} __once_flag;

typedef unsigned long int pthread_t;

typedef union {
  char __size[4];
  int __align;
} pthread_mutexattr_t;

typedef union {
  char __size[4];
  int __align;
} pthread_condattr_t;

typedef unsigned int pthread_key_t;

typedef int pthread_once_t;

union pthread_attr_t {
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;

typedef union {
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union {
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union {
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union {
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;

typedef volatile int pthread_spinlock_t;

typedef union {
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union {
  char __size[4];
  int __align;
} pthread_barrierattr_t;

extern long int random(void) __attribute__((__nothrow__, __leaf__));

extern void srandom(unsigned int __seed) __attribute__((__nothrow__, __leaf__));

extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern char *setstate(char *__statebuf) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

struct random_data {
  int32_t *fptr;
  int32_t *rptr;
  int32_t *state;
  int rand_type;
  int rand_deg;
  int rand_sep;
  int32_t *end_ptr;
};

extern int random_r(struct random_data *__restrict __buf,
                    int32_t *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int srandom_r(unsigned int __seed, struct random_data *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int initstate_r(unsigned int __seed, char *__restrict __statebuf,
                       size_t __statelen, struct random_data *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2, 4)));

extern int setstate_r(char *__restrict __statebuf,
                      struct random_data *__restrict __buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int rand(void) __attribute__((__nothrow__, __leaf__));

extern void srand(unsigned int __seed) __attribute__((__nothrow__, __leaf__));

extern int rand_r(unsigned int *__seed) __attribute__((__nothrow__, __leaf__));

extern double drand48(void) __attribute__((__nothrow__, __leaf__));
extern double erand48(unsigned short int __xsubi[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int lrand48(void) __attribute__((__nothrow__, __leaf__));
extern long int nrand48(unsigned short int __xsubi[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern long int mrand48(void) __attribute__((__nothrow__, __leaf__));
extern long int jrand48(unsigned short int __xsubi[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void srand48(long int __seedval) __attribute__((__nothrow__, __leaf__));
extern unsigned short int *seed48(unsigned short int __seed16v[3])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
extern void lcong48(unsigned short int __param[7])
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

struct drand48_data {
  unsigned short int __x[3];
  unsigned short int __old_x[3];
  unsigned short int __c;
  unsigned short int __init;
  __extension__ unsigned long long int __a;
};

extern int drand48_r(struct drand48_data *__restrict __buffer,
                     double *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int erand48_r(unsigned short int __xsubi[3],
                     struct drand48_data *__restrict __buffer,
                     double *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int lrand48_r(struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int nrand48_r(unsigned short int __xsubi[3],
                     struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int mrand48_r(struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));
extern int jrand48_r(unsigned short int __xsubi[3],
                     struct drand48_data *__restrict __buffer,
                     long int *__restrict __result)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int srand48_r(long int __seedval, struct drand48_data *__buffer)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int seed48_r(unsigned short int __seed16v[3],
                    struct drand48_data *__buffer)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int lcong48_r(unsigned short int __param[7],
                     struct drand48_data *__buffer)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern void *malloc(size_t __size) __attribute__((__nothrow__, __leaf__))
__attribute__((__malloc__)) __attribute__((__alloc_size__(1)))
__attribute__((__warn_unused_result__));

extern void *calloc(size_t __nmemb, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__alloc_size__(1, 2)))
    __attribute__((__warn_unused_result__));

extern void *realloc(void *__ptr, size_t __size)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__)) __attribute__((__alloc_size__(2)));

extern void free(void *__ptr) __attribute__((__nothrow__, __leaf__));

extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__))
    __attribute__((__alloc_size__(2, 3)))
    __attribute__((__malloc__(__builtin_free, 1)));

extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__malloc__(reallocarray, 1)));

extern void *alloca(size_t __size) __attribute__((__nothrow__, __leaf__));

extern void *valloc(size_t __size) __attribute__((__nothrow__, __leaf__))
__attribute__((__malloc__)) __attribute__((__alloc_size__(1)))
__attribute__((__warn_unused_result__));

extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__warn_unused_result__));

extern void *aligned_alloc(size_t __alignment, size_t __size)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__alloc_align__(1))) __attribute__((__alloc_size__(2)))
    __attribute__((__warn_unused_result__));

extern void abort(void) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern int atexit(void (*__func)(void)) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int at_quick_exit(void (*__func)(void))
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern int on_exit(void (*__func)(int __status, void *__arg), void *__arg)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));

extern void exit(int __status) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern void quick_exit(int __status) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern void _Exit(int __status) __attribute__((__nothrow__, __leaf__))
__attribute__((__noreturn__));

extern char *getenv(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern int putenv(char *__string) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int setenv(const char *__name, const char *__value, int __replace)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));

extern int unsetenv(const char *__name) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));

extern int clearenv(void) __attribute__((__nothrow__, __leaf__));
extern char *mktemp(char *__template) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1)));
extern int mkstemp(char *__template) __attribute__((__nonnull__(1)))
__attribute__((__warn_unused_result__));
extern int mkstemps(char *__template, int __suffixlen)
    __attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern char *mkdtemp(char *__template) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(1))) __attribute__((__warn_unused_result__));
extern int system(const char *__command)
    __attribute__((__warn_unused_result__));
extern char *realpath(const char *__restrict __name,
                      char *__restrict __resolved)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));

typedef int (*__compar_fn_t)(const void *, const void *);
extern void *bsearch(const void *__key, const void *__base, size_t __nmemb,
                     size_t __size, __compar_fn_t __compar)
    __attribute__((__nonnull__(1, 2, 5)))
    __attribute__((__warn_unused_result__));

extern __inline __attribute__((__gnu_inline__)) void *
bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size,
        __compar_fn_t __compar) {
  size_t __l, __u, __idx;
  const void *__p;
  int __comparison;

  __l = 0;
  __u = __nmemb;
  while (__l < __u) {
    __idx = (__l + __u) / 2;
    __p = (const void *)(((const char *)__base) + (__idx * __size));
    __comparison = (*__compar)(__key, __p);
    if (__comparison < 0)
      __u = __idx;
    else if (__comparison > 0)
      __l = __idx + 1;
    else {

      return (void *)__p;
    }
  }

  return ((void *)0);
}

extern void qsort(void *__base, size_t __nmemb, size_t __size,
                  __compar_fn_t __compar) __attribute__((__nonnull__(1, 4)));
extern int abs(int __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__)) __attribute__((__warn_unused_result__));
extern long int labs(long int __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__)) __attribute__((__warn_unused_result__));

__extension__ extern long long int llabs(long long int __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__))
    __attribute__((__warn_unused_result__));

extern div_t div(int __numer, int __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__))
    __attribute__((__warn_unused_result__));
extern ldiv_t ldiv(long int __numer, long int __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__))
    __attribute__((__warn_unused_result__));

__extension__ extern lldiv_t lldiv(long long int __numer, long long int __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__))
    __attribute__((__warn_unused_result__));
extern char *ecvt(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3, 4))) __attribute__((__warn_unused_result__));

extern char *fcvt(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign) __attribute__((__nothrow__, __leaf__))
__attribute__((__nonnull__(3, 4))) __attribute__((__warn_unused_result__));

extern char *gcvt(double __value, int __ndigit, char *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)))
    __attribute__((__warn_unused_result__));

extern char *qecvt(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3, 4)))
    __attribute__((__warn_unused_result__));
extern char *qfcvt(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3, 4)))
    __attribute__((__warn_unused_result__));
extern char *qgcvt(long double __value, int __ndigit, char *__buf)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(3)))
    __attribute__((__warn_unused_result__));

extern int ecvt_r(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));
extern int fcvt_r(double __value, int __ndigit, int *__restrict __decpt,
                  int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));

extern int qecvt_r(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict __decpt,
                   int *__restrict __sign, char *__restrict __buf, size_t __len)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__nonnull__(3, 4, 5)));

extern int mblen(const char *__s, size_t __n)
    __attribute__((__nothrow__, __leaf__));

extern int mbtowc(wchar_t *__restrict __pwc, const char *__restrict __s,
                  size_t __n) __attribute__((__nothrow__, __leaf__));

extern int wctomb(char *__s, wchar_t __wchar)
    __attribute__((__nothrow__, __leaf__));

extern size_t mbstowcs(wchar_t *__restrict __pwcs, const char *__restrict __s,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__access__(__read_only__, 2)));

extern size_t wcstombs(char *__restrict __s, const wchar_t *__restrict __pwcs,
                       size_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__access__(__write_only__, 1, 3)))
__attribute__((__access__(__read_only__, 2)));

extern int rpmatch(const char *__response)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)))
    __attribute__((__warn_unused_result__));
extern int getsubopt(char **__restrict __optionp,
                     char *const *__restrict __tokens,
                     char **__restrict __valuep)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2, 3)))
    __attribute__((__warn_unused_result__));
extern int getloadavg(double __loadavg[], int __nelem)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1)));
extern __inline __attribute__((__gnu_inline__)) double
    __attribute__((__nothrow__, __leaf__)) atof(const char *__nptr) {
  return strtod(__nptr, (char **)((void *)0));
}

extern char *__realpath_chk(const char *__restrict __name,
                            char *__restrict __resolved, size_t __resolvedlen)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));
extern char *__realpath_alias(const char *__restrict __name,
                              char *__restrict __resolved) __asm__(""
                                                                   "realpath")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warn_unused_result__));
extern char *__realpath_chk_warn(const char *__restrict __name,
                                 char *__restrict __resolved,
                                 size_t __resolvedlen) __asm__(""
                                                               "__realpath_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warn_unused_result__)) __attribute__((
        __warning__("second argument of realpath must be either NULL or at "
                    "least PATH_MAX bytes long buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) char *__attribute__((__nothrow__,
                                                             __leaf__))
realpath(const char *__restrict __name, char *__restrict __resolved) {
  size_t sz = __builtin_object_size(__resolved, 2 > 1);

  if (sz == (size_t)-1)
    return __realpath_alias(__name, __resolved);

  return __realpath_chk(__name, __resolved, sz);
}

extern int __ptsname_r_chk(int __fd, char *__buf, size_t __buflen,
                           size_t __nreal)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)))
    __attribute__((__access__(__write_only__, 2, 3)));
extern int __ptsname_r_alias(int __fd, char *__buf,
                             size_t __buflen) __asm__(""
                                                      "ptsname_r")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(2)))
    __attribute__((__access__(__write_only__, 2, 3)));
extern int __ptsname_r_chk_warn(int __fd, char *__buf, size_t __buflen,
                                size_t __nreal) __asm__(""
                                                        "__ptsname_r_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__nonnull__(2)))
    __attribute__((__warning__("ptsname_r called with buflen bigger than "
                               "size of buf")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__nothrow__, __leaf__))
    ptsname_r(int __fd, char *__buf, size_t __buflen) {
  return ((((__typeof(__buflen))0 < (__typeof(__buflen))-1 ||
            (__builtin_constant_p(__buflen) && (__buflen) > 0)) &&
           __builtin_constant_p(
               (((long unsigned int)(__buflen)) <=
                (__builtin_object_size(__buf, 2 > 1)) / (sizeof(char)))) &&
           (((long unsigned int)(__buflen)) <=
            (__builtin_object_size(__buf, 2 > 1)) / (sizeof(char))))
              ? __ptsname_r_alias(__fd, __buf, __buflen)
              : ((((__typeof(__buflen))0 < (__typeof(__buflen))-1 ||
                   (__builtin_constant_p(__buflen) && (__buflen) > 0)) &&
                  __builtin_constant_p((((long unsigned int)(__buflen)) <=
                                        (__builtin_object_size(__buf, 2 > 1)) /
                                            (sizeof(char)))) &&
                  !(((long unsigned int)(__buflen)) <=
                    (__builtin_object_size(__buf, 2 > 1)) / (sizeof(char))))
                     ? __ptsname_r_chk_warn(__fd, __buf, __buflen,
                                            __builtin_object_size(__buf, 2 > 1))
                     : __ptsname_r_chk(__fd, __buf, __buflen,
                                       __builtin_object_size(__buf, 2 > 1))))

      ;
}

extern int __wctomb_chk(char *__s, wchar_t __wchar, size_t __buflen)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));
extern int __wctomb_alias(char *__s, wchar_t __wchar) __asm__(""
                                                              "wctomb")
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) int
    __attribute__((__nothrow__, __leaf__)) wctomb(char *__s, wchar_t __wchar) {

  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1 &&
      16 > __builtin_object_size(__s, 2 > 1))
    return __wctomb_chk(__s, __wchar, __builtin_object_size(__s, 2 > 1));
  return __wctomb_alias(__s, __wchar);
}

extern size_t __mbstowcs_chk(wchar_t *__restrict __dst,
                             const char *__restrict __src, size_t __len,
                             size_t __dstlen)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 1, 3)))
    __attribute__((__access__(__read_only__, 2)));
extern size_t __mbstowcs_alias(wchar_t *__restrict __dst,
                               const char *__restrict __src,
                               size_t __len) __asm__(""
                                                     "mbstowcs")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__access__(__write_only__, 1, 3)))
    __attribute__((__access__(__read_only__, 2)));
extern size_t __mbstowcs_chk_warn(
    wchar_t *__restrict __dst, const char *__restrict __src, size_t __len,
    size_t __dstlen) __asm__(""
                             "__mbstowcs_chk") __attribute__((__nothrow__,
                                                              __leaf__))

__attribute__((__warning__("mbstowcs called with dst buffer smaller than len "
                           "* sizeof (wchar_t)")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__nothrow__, __leaf__))
mbstowcs(wchar_t *__restrict __dst, const char *__restrict __src, size_t __len)

{
  return (
      (((__typeof(__len))0 < (__typeof(__len))-1 ||
        (__builtin_constant_p(__len) && (__len) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__len)) <=
            (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t)))) &&
       (((long unsigned int)(__len)) <=
        (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t))))
          ? __mbstowcs_alias(__dst, __src, __len)
          : ((((__typeof(__len))0 < (__typeof(__len))-1 ||
               (__builtin_constant_p(__len) && (__len) > 0)) &&
              __builtin_constant_p((((long unsigned int)(__len)) <=
                                    (__builtin_object_size(__dst, 2 > 1)) /
                                        (sizeof(wchar_t)))) &&
              !(((long unsigned int)(__len)) <=
                (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t))))
                 ? __mbstowcs_chk_warn(__dst, __src, __len,
                                       (__builtin_object_size(__dst, 2 > 1)) /
                                           (sizeof(wchar_t)))
                 : __mbstowcs_chk(__dst, __src, __len,
                                  (__builtin_object_size(__dst, 2 > 1)) /
                                      (sizeof(wchar_t)))))

      ;
}

extern size_t __wcstombs_chk(char *__restrict __dst,
                             const wchar_t *__restrict __src, size_t __len,
                             size_t __dstlen)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 1, 3)))
    __attribute__((__access__(__read_only__, 2)));
extern size_t __wcstombs_alias(char *__restrict __dst,
                               const wchar_t *__restrict __src,
                               size_t __len) __asm__(""
                                                     "wcstombs")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__access__(__write_only__, 1, 3)))
    __attribute__((__access__(__read_only__, 2)));
extern size_t __wcstombs_chk_warn(char *__restrict __dst,
                                  const wchar_t *__restrict __src, size_t __len,
                                  size_t __dstlen) __asm__(""
                                                           "__wcstombs_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((
        __warning__("wcstombs called with dst buffer smaller than len")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
size_t __attribute__((__nothrow__, __leaf__))
wcstombs(char *__restrict __dst, const wchar_t *__restrict __src, size_t __len)

{
  return ((((__typeof(__len))0 < (__typeof(__len))-1 ||
            (__builtin_constant_p(__len) && (__len) > 0)) &&
           __builtin_constant_p(
               (((long unsigned int)(__len)) <=
                (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char)))) &&
           (((long unsigned int)(__len)) <=
            (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char))))
              ? __wcstombs_alias(__dst, __src, __len)
              : ((((__typeof(__len))0 < (__typeof(__len))-1 ||
                   (__builtin_constant_p(__len) && (__len) > 0)) &&
                  __builtin_constant_p((((long unsigned int)(__len)) <=
                                        (__builtin_object_size(__dst, 2 > 1)) /
                                            (sizeof(char)))) &&
                  !(((long unsigned int)(__len)) <=
                    (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char))))
                     ? __wcstombs_chk_warn(__dst, __src, __len,
                                           __builtin_object_size(__dst, 2 > 1))
                     : __wcstombs_chk(__dst, __src, __len,
                                      __builtin_object_size(__dst, 2 > 1))))

      ;
}

typedef uint32_t word_t;
typedef int32_t sword_t;

typedef word_t rtlreg_t;
typedef word_t vaddr_t;
typedef uint32_t paddr_t;
typedef uint16_t ioaddr_t;

typedef __builtin_va_list __gnuc_va_list;

typedef struct {
  int __count;
  union {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;

typedef struct _G_fpos_t {
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;

typedef struct _G_fpos64_t {
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;

struct _IO_FILE;
typedef struct _IO_FILE __FILE;

struct _IO_FILE;

typedef struct _IO_FILE FILE;
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;

typedef void _IO_lock_t;

struct _IO_FILE {
  int _flags;

  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;

  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;

  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof(int) - 4 * sizeof(void *) - sizeof(size_t)];
};

typedef __gnuc_va_list va_list;
typedef __fpos_t fpos_t;

extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;

extern int remove(const char *__filename)
    __attribute__((__nothrow__, __leaf__));

extern int rename(const char *__old, const char *__new)
    __attribute__((__nothrow__, __leaf__));

extern int renameat(int __oldfd, const char *__old, int __newfd,
                    const char *__new) __attribute__((__nothrow__, __leaf__));
extern int fclose(FILE *__stream);

extern FILE *tmpfile(void) __attribute__((__malloc__))
__attribute__((__malloc__(fclose, 1))) __attribute__((__warn_unused_result__));
extern char *tmpnam(char[20]) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));

extern char *tmpnam_r(char __s[20]) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));
extern char *tempnam(const char *__dir, const char *__pfx)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__warn_unused_result__))
    __attribute__((__malloc__(__builtin_free, 1)));

extern int fflush(FILE *__stream);
extern int fflush_unlocked(FILE *__stream);
extern FILE *fopen(const char *__restrict __filename,
                   const char *__restrict __modes) __attribute__((__malloc__))
__attribute__((__malloc__(fclose, 1))) __attribute__((__warn_unused_result__));

extern FILE *freopen(const char *__restrict __filename,
                     const char *__restrict __modes, FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));
extern FILE *fdopen(int __fd, const char *__modes)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)))
    __attribute__((__warn_unused_result__));
extern FILE *fmemopen(void *__s, size_t __len, const char *__modes)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)))
    __attribute__((__warn_unused_result__));

extern FILE *open_memstream(char **__bufloc, size_t *__sizeloc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)))
    __attribute__((__warn_unused_result__));
extern void setbuf(FILE *__restrict __stream, char *__restrict __buf)
    __attribute__((__nothrow__, __leaf__));

extern int setvbuf(FILE *__restrict __stream, char *__restrict __buf,
                   int __modes, size_t __n)
    __attribute__((__nothrow__, __leaf__));

extern void setbuffer(FILE *__restrict __stream, char *__restrict __buf,
                      size_t __size) __attribute__((__nothrow__, __leaf__));

extern void setlinebuf(FILE *__stream) __attribute__((__nothrow__, __leaf__));

extern int fprintf(FILE *__restrict __stream, const char *__restrict __format,
                   ...);

extern int printf(const char *__restrict __format, ...);

extern int sprintf(char *__restrict __s, const char *__restrict __format, ...)
    __attribute__((__nothrow__));

extern int vfprintf(FILE *__restrict __s, const char *__restrict __format,
                    __gnuc_va_list __arg);

extern int vprintf(const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf(char *__restrict __s, const char *__restrict __format,
                    __gnuc_va_list __arg) __attribute__((__nothrow__));

extern int snprintf(char *__restrict __s, size_t __maxlen,
                    const char *__restrict __format, ...)
    __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 3, 4)));

extern int vsnprintf(char *__restrict __s, size_t __maxlen,
                     const char *__restrict __format, __gnuc_va_list __arg)
    __attribute__((__nothrow__)) __attribute__((__format__(__printf__, 3, 0)));
extern int vdprintf(int __fd, const char *__restrict __fmt,
                    __gnuc_va_list __arg)
    __attribute__((__format__(__printf__, 2, 0)));
extern int dprintf(int __fd, const char *__restrict __fmt, ...)
    __attribute__((__format__(__printf__, 2, 3)));

extern int fscanf(FILE *__restrict __stream, const char *__restrict __format,
                  ...) __attribute__((__warn_unused_result__));

extern int scanf(const char *__restrict __format, ...)
    __attribute__((__warn_unused_result__));

extern int sscanf(const char *__restrict __s, const char *__restrict __format,
                  ...) __attribute__((__nothrow__, __leaf__));
extern int fscanf(FILE *__restrict __stream, const char *__restrict __format,
                  ...) __asm__(""
                               "__isoc99_fscanf")

    __attribute__((__warn_unused_result__));
extern int scanf(const char *__restrict __format, ...) __asm__(""
                                                               "__isoc99_scanf")
    __attribute__((__warn_unused_result__));
extern int sscanf(const char *__restrict __s, const char *__restrict __format,
                  ...) __asm__(""
                               "__isoc99_sscanf")
    __attribute__((__nothrow__, __leaf__))

    ;
extern int vfscanf(FILE *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg)
    __attribute__((__format__(__scanf__, 2, 0)))
    __attribute__((__warn_unused_result__));

extern int vscanf(const char *__restrict __format, __gnuc_va_list __arg)
    __attribute__((__format__(__scanf__, 1, 0)))
    __attribute__((__warn_unused_result__));

extern int vsscanf(const char *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg) __attribute__((__nothrow__, __leaf__))
__attribute__((__format__(__scanf__, 2, 0)));

extern int vfscanf(FILE *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg) __asm__(""
                                                 "__isoc99_vfscanf")

    __attribute__((__format__(__scanf__, 2, 0)))
    __attribute__((__warn_unused_result__));
extern int vscanf(const char *__restrict __format,
                  __gnuc_va_list __arg) __asm__(""
                                                "__isoc99_vscanf")

    __attribute__((__format__(__scanf__, 1, 0)))
    __attribute__((__warn_unused_result__));
extern int vsscanf(const char *__restrict __s, const char *__restrict __format,
                   __gnuc_va_list __arg) __asm__(""
                                                 "__isoc99_vsscanf")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__format__(__scanf__, 2, 0)));
extern int fgetc(FILE *__stream);
extern int getc(FILE *__stream);

extern int getchar(void);

extern int getc_unlocked(FILE *__stream);
extern int getchar_unlocked(void);
extern int fgetc_unlocked(FILE *__stream);
extern int fputc(int __c, FILE *__stream);
extern int putc(int __c, FILE *__stream);

extern int putchar(int __c);
extern int fputc_unlocked(int __c, FILE *__stream);

extern int putc_unlocked(int __c, FILE *__stream);
extern int putchar_unlocked(int __c);

extern int getw(FILE *__stream);

extern int putw(int __w, FILE *__stream);

extern char *fgets(char *__restrict __s, int __n, FILE *__restrict __stream)
    __attribute__((__warn_unused_result__))
    __attribute__((__access__(__write_only__, 1, 2)));
extern __ssize_t __getdelim(char **__restrict __lineptr, size_t *__restrict __n,
                            int __delimiter, FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));
extern __ssize_t getdelim(char **__restrict __lineptr, size_t *__restrict __n,
                          int __delimiter, FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));

extern __ssize_t getline(char **__restrict __lineptr, size_t *__restrict __n,
                         FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));

extern int fputs(const char *__restrict __s, FILE *__restrict __stream);

extern int puts(const char *__s);

extern int ungetc(int __c, FILE *__stream);

extern size_t fread(void *__restrict __ptr, size_t __size, size_t __n,
                    FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));

extern size_t fwrite(const void *__restrict __ptr, size_t __size, size_t __n,
                     FILE *__restrict __s);
extern size_t fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
                             FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));
extern size_t fwrite_unlocked(const void *__restrict __ptr, size_t __size,
                              size_t __n, FILE *__restrict __stream);

extern int fseek(FILE *__stream, long int __off, int __whence);

extern long int ftell(FILE *__stream) __attribute__((__warn_unused_result__));

extern void rewind(FILE *__stream);
extern int fseeko(FILE *__stream, __off_t __off, int __whence);

extern __off_t ftello(FILE *__stream) __attribute__((__warn_unused_result__));
extern int fgetpos(FILE *__restrict __stream, fpos_t *__restrict __pos);

extern int fsetpos(FILE *__stream, const fpos_t *__pos);
extern void clearerr(FILE *__stream) __attribute__((__nothrow__, __leaf__));

extern int feof(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));

extern int ferror(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));

extern void clearerr_unlocked(FILE *__stream)
    __attribute__((__nothrow__, __leaf__));
extern int feof_unlocked(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));
extern int ferror_unlocked(FILE *__stream)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));

extern void perror(const char *__s);

extern int fileno(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));

extern int fileno_unlocked(FILE *__stream)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));
extern int pclose(FILE *__stream);

extern FILE *popen(const char *__command, const char *__modes)
    __attribute__((__malloc__)) __attribute__((__malloc__(pclose, 1)))
    __attribute__((__warn_unused_result__));

extern char *ctermid(char *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__access__(__write_only__, 1)));
extern void flockfile(FILE *__stream) __attribute__((__nothrow__, __leaf__));

extern int ftrylockfile(FILE *__stream) __attribute__((__nothrow__, __leaf__))
__attribute__((__warn_unused_result__));

extern void funlockfile(FILE *__stream) __attribute__((__nothrow__, __leaf__));
extern int __uflow(FILE *);
extern int __overflow(FILE *, int);

extern __inline __attribute__((__gnu_inline__)) int getchar(void) {
  return getc(stdin);
}

extern __inline __attribute__((__gnu_inline__)) int fgetc_unlocked(FILE *__fp) {
  return (__builtin_expect(((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0)
              ? __uflow(__fp)
              : *(unsigned char *)(__fp)->_IO_read_ptr++);
}

extern __inline __attribute__((__gnu_inline__)) int getc_unlocked(FILE *__fp) {
  return (__builtin_expect(((__fp)->_IO_read_ptr >= (__fp)->_IO_read_end), 0)
              ? __uflow(__fp)
              : *(unsigned char *)(__fp)->_IO_read_ptr++);
}

extern __inline __attribute__((__gnu_inline__)) int getchar_unlocked(void) {
  return (__builtin_expect(((stdin)->_IO_read_ptr >= (stdin)->_IO_read_end), 0)
              ? __uflow(stdin)
              : *(unsigned char *)(stdin)->_IO_read_ptr++);
}

extern __inline __attribute__((__gnu_inline__)) int putchar(int __c) {
  return putc(__c, stdout);
}

extern __inline __attribute__((__gnu_inline__)) int
fputc_unlocked(int __c, FILE *__stream) {
  return (__builtin_expect(
              ((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0)
              ? __overflow(__stream, (unsigned char)(__c))
              : (unsigned char)(*(__stream)->_IO_write_ptr++ = (__c)));
}

extern __inline __attribute__((__gnu_inline__)) int
putc_unlocked(int __c, FILE *__stream) {
  return (__builtin_expect(
              ((__stream)->_IO_write_ptr >= (__stream)->_IO_write_end), 0)
              ? __overflow(__stream, (unsigned char)(__c))
              : (unsigned char)(*(__stream)->_IO_write_ptr++ = (__c)));
}

extern __inline __attribute__((__gnu_inline__)) int putchar_unlocked(int __c) {
  return (
      __builtin_expect(((stdout)->_IO_write_ptr >= (stdout)->_IO_write_end), 0)
          ? __overflow(stdout, (unsigned char)(__c))
          : (unsigned char)(*(stdout)->_IO_write_ptr++ = (__c)));
}
extern __inline __attribute__((__gnu_inline__)) int
    __attribute__((__nothrow__, __leaf__)) feof_unlocked(FILE *__stream) {
  return (((__stream)->_flags & 0x0010) != 0);
}

extern __inline __attribute__((__gnu_inline__)) int
    __attribute__((__nothrow__, __leaf__)) ferror_unlocked(FILE *__stream) {
  return (((__stream)->_flags & 0x0020) != 0);
}

extern int __sprintf_chk(char *__restrict __s, int __flag, size_t __slen,
                         const char *__restrict __format, ...)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 1, 3)));
extern int __vsprintf_chk(char *__restrict __s, int __flag, size_t __slen,
                          const char *__restrict __format, __gnuc_va_list __ap)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 1, 3)));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__nothrow__, __leaf__))
    sprintf(char *__restrict __s, const char *__restrict __fmt, ...) {
  return __builtin___sprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1),
                                 __fmt, __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__nothrow__, __leaf__))
    vsprintf(char *__restrict __s, const char *__restrict __fmt,
             __gnuc_va_list __ap)

{
  return __builtin___vsprintf_chk(__s, 2 - 1, __builtin_object_size(__s, 2 > 1),
                                  __fmt, __ap);
}

extern int __snprintf_chk(char *__restrict __s, size_t __n, int __flag,
                          size_t __slen, const char *__restrict __format, ...)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__access__(__write_only__, 1, 2)));
extern int __vsnprintf_chk(char *__restrict __s, size_t __n, int __flag,
                           size_t __slen, const char *__restrict __format,
                           __gnuc_va_list __ap)
    __attribute__((__nothrow__, __leaf__));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) int __attribute__((__nothrow__, __leaf__))
snprintf(char *__restrict __s, size_t __n, const char *__restrict __fmt, ...)

{
  return __builtin___snprintf_chk(__s, __n, 2 - 1,
                                  __builtin_object_size(__s, 2 > 1), __fmt,
                                  __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
    __attribute__((__nothrow__, __leaf__))
    vsnprintf(char *__restrict __s, size_t __n, const char *__restrict __fmt,
              __gnuc_va_list __ap)

{
  return __builtin___vsnprintf_chk(
      __s, __n, 2 - 1, __builtin_object_size(__s, 2 > 1), __fmt, __ap);
}

extern int __fprintf_chk(FILE *__restrict __stream, int __flag,
                         const char *__restrict __format, ...);
extern int __printf_chk(int __flag, const char *__restrict __format, ...);
extern int __vfprintf_chk(FILE *__restrict __stream, int __flag,
                          const char *__restrict __format, __gnuc_va_list __ap);
extern int __vprintf_chk(int __flag, const char *__restrict __format,
                         __gnuc_va_list __ap);

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
fprintf(FILE *__restrict __stream, const char *__restrict __fmt, ...) {
  return __fprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
printf(const char *__restrict __fmt, ...) {
  return __printf_chk(2 - 1, __fmt, __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vprintf(const char *__restrict __fmt, __gnuc_va_list __ap) {

  return __vfprintf_chk(stdout, 2 - 1, __fmt, __ap);
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vfprintf(FILE *__restrict __stream, const char *__restrict __fmt,
         __gnuc_va_list __ap) {
  return __vfprintf_chk(__stream, 2 - 1, __fmt, __ap);
}

extern int __dprintf_chk(int __fd, int __flag, const char *__restrict __fmt,
                         ...) __attribute__((__format__(__printf__, 3, 4)));
extern int __vdprintf_chk(int __fd, int __flag, const char *__restrict __fmt,
                          __gnuc_va_list __arg)
    __attribute__((__format__(__printf__, 3, 0)));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
dprintf(int __fd, const char *__restrict __fmt, ...) {
  return __dprintf_chk(__fd, 2 - 1, __fmt, __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vdprintf(int __fd, const char *__restrict __fmt, __gnuc_va_list __ap) {
  return __vdprintf_chk(__fd, 2 - 1, __fmt, __ap);
}
extern char *__fgets_chk(char *__restrict __s, size_t __size, int __n,
                         FILE *__restrict __stream)
    __attribute__((__warn_unused_result__))
    __attribute__((__access__(__write_only__, 1, 3)));
extern char *__fgets_alias(char *__restrict __s, int __n,
                           FILE *__restrict __stream) __asm__(""
                                                              "fgets")

    __attribute__((__warn_unused_result__))
    __attribute__((__access__(__write_only__, 1, 2)));
extern char *__fgets_chk_warn(char *__restrict __s, size_t __size, int __n,
                              FILE *__restrict __stream) __asm__(""
                                                                 "__fgets_chk")

    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("fgets called with bigger size than length "
                               "of destination buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__))
__attribute__((__access__(__write_only__, 1, 2))) char *
fgets(char *__restrict __s, int __n, FILE *__restrict __stream) {
  size_t sz = __builtin_object_size(__s, 2 > 1);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__n)) <= (sz) / (sizeof(char)))) &&
       (((long unsigned int)(__n)) <= (sz) / (sizeof(char)))))
    return __fgets_alias(__s, __n, __stream);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__n)) <= (sz) / (sizeof(char)))) &&
       !(((long unsigned int)(__n)) <= (sz) / (sizeof(char)))))
    return __fgets_chk_warn(__s, sz, __n, __stream);
  return __fgets_chk(__s, sz, __n, __stream);
}

extern size_t __fread_chk(void *__restrict __ptr, size_t __ptrlen,
                          size_t __size, size_t __n, FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));
extern size_t __fread_alias(void *__restrict __ptr, size_t __size, size_t __n,
                            FILE *__restrict __stream) __asm__(""
                                                               "fread")

    __attribute__((__warn_unused_result__));
extern size_t __fread_chk_warn(void *__restrict __ptr, size_t __ptrlen,
                               size_t __size, size_t __n,
                               FILE *__restrict __stream) __asm__(""
                                                                  "__fread_chk")

    __attribute__((__warn_unused_result__)) __attribute__((
        __warning__("fread called with bigger size * nmemb than length "
                    "of destination buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) size_t
fread(void *__restrict __ptr, size_t __size, size_t __n,
      FILE *__restrict __stream) {
  size_t sz = __builtin_object_size(__ptr, 0);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p((((long unsigned int)(__n)) <= (sz) / (__size))) &&
       (((long unsigned int)(__n)) <= (sz) / (__size))))
    return __fread_alias(__ptr, __size, __n, __stream);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p((((long unsigned int)(__n)) <= (sz) / (__size))) &&
       !(((long unsigned int)(__n)) <= (sz) / (__size))))
    return __fread_chk_warn(__ptr, sz, __size, __n, __stream);
  return __fread_chk(__ptr, sz, __size, __n, __stream);
}
extern size_t __fread_unlocked_chk(void *__restrict __ptr, size_t __ptrlen,
                                   size_t __size, size_t __n,
                                   FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));
extern size_t
__fread_unlocked_alias(void *__restrict __ptr, size_t __size, size_t __n,
                       FILE *__restrict __stream) __asm__(""
                                                          "fread_unlocked")

    __attribute__((__warn_unused_result__));
extern size_t __fread_unlocked_chk_warn(
    void *__restrict __ptr, size_t __ptrlen, size_t __size, size_t __n,
    FILE *__restrict __stream) __asm__(""
                                       "__fread_unlocked_chk")

    __attribute__((__warn_unused_result__)) __attribute__((
        __warning__("fread_unlocked called with bigger size * nmemb than "
                    "length of destination buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) size_t
fread_unlocked(void *__restrict __ptr, size_t __size, size_t __n,
               FILE *__restrict __stream) {
  size_t sz = __builtin_object_size(__ptr, 0);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p((((long unsigned int)(__n)) <= (sz) / (__size))) &&
       (((long unsigned int)(__n)) <= (sz) / (__size)))) {

    if (__builtin_constant_p(__size) && __builtin_constant_p(__n) &&
        (__size | __n) < (((size_t)1) << (8 * sizeof(size_t) / 2)) &&
        __size * __n <= 8) {
      size_t __cnt = __size * __n;
      char *__cptr = (char *)__ptr;
      if (__cnt == 0)
        return 0;

      for (; __cnt > 0; --__cnt) {
        int __c = getc_unlocked(__stream);
        if (__c == (-1))
          break;
        *__cptr++ = __c;
      }
      return (__cptr - (char *)__ptr) / __size;
    }

    return __fread_unlocked_alias(__ptr, __size, __n, __stream);
  }
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p((((long unsigned int)(__n)) <= (sz) / (__size))) &&
       !(((long unsigned int)(__n)) <= (sz) / (__size))))
    return __fread_unlocked_chk_warn(__ptr, sz, __size, __n, __stream);
  return __fread_unlocked_chk(__ptr, sz, __size, __n, __stream);
}

enum { NEMU_RUNNING, NEMU_STOP, NEMU_END, NEMU_ABORT, NEMU_QUIT };

typedef struct {
  int state;
  vaddr_t halt_pc;
  uint32_t halt_ret;
} NEMUState;

extern NEMUState nemu_state;

uint64_t get_time();

typedef void (*alarm_handler_t)();
void add_alarm_handle(alarm_handler_t h);

extern __attribute__((visibility("default"))) const char *SDL_GetPlatform(void);

typedef long int ptrdiff_t;

typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld
      __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;

typedef unsigned int wint_t;

typedef __mbstate_t mbstate_t;

struct tm;

extern wchar_t *wcscpy(wchar_t *__restrict __dest,
                       const wchar_t *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern wchar_t *wcsncpy(wchar_t *__restrict __dest,
                        const wchar_t *__restrict __src, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern wchar_t *wcscat(wchar_t *__restrict __dest,
                       const wchar_t *__restrict __src)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern wchar_t *wcsncat(wchar_t *__restrict __dest,
                        const wchar_t *__restrict __src, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(1, 2)));

extern int wcscmp(const wchar_t *__s1, const wchar_t *__s2)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int wcsncmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__))
    __attribute__((__nonnull__(1, 2)));

extern int wcscasecmp(const wchar_t *__s1, const wchar_t *__s2)
    __attribute__((__nothrow__, __leaf__));

extern int wcsncasecmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__));

extern int wcscasecmp_l(const wchar_t *__s1, const wchar_t *__s2,
                        locale_t __loc) __attribute__((__nothrow__, __leaf__));

extern int wcsncasecmp_l(const wchar_t *__s1, const wchar_t *__s2, size_t __n,
                         locale_t __loc) __attribute__((__nothrow__, __leaf__));

extern int wcscoll(const wchar_t *__s1, const wchar_t *__s2)
    __attribute__((__nothrow__, __leaf__));

extern size_t wcsxfrm(wchar_t *__restrict __s1, const wchar_t *__restrict __s2,
                      size_t __n) __attribute__((__nothrow__, __leaf__));

extern int wcscoll_l(const wchar_t *__s1, const wchar_t *__s2, locale_t __loc)
    __attribute__((__nothrow__, __leaf__));

extern size_t wcsxfrm_l(wchar_t *__s1, const wchar_t *__s2, size_t __n,
                        locale_t __loc) __attribute__((__nothrow__, __leaf__));

extern wchar_t *wcsdup(const wchar_t *__s)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(__builtin_free, 1)));
extern wchar_t *wcschr(const wchar_t *__wcs, wchar_t __wc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));
extern wchar_t *wcsrchr(const wchar_t *__wcs, wchar_t __wc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));
extern size_t wcscspn(const wchar_t *__wcs, const wchar_t *__reject)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));

extern size_t wcsspn(const wchar_t *__wcs, const wchar_t *__accept)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));
extern wchar_t *wcspbrk(const wchar_t *__wcs, const wchar_t *__accept)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));
extern wchar_t *wcsstr(const wchar_t *__haystack, const wchar_t *__needle)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));

extern wchar_t *wcstok(wchar_t *__restrict __s,
                       const wchar_t *__restrict __delim,
                       wchar_t **__restrict __ptr)
    __attribute__((__nothrow__, __leaf__));

extern size_t wcslen(const wchar_t *__s) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__));
extern size_t wcsnlen(const wchar_t *__s, size_t __maxlen)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));
extern wchar_t *wmemchr(const wchar_t *__s, wchar_t __c, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));

extern int wmemcmp(const wchar_t *__s1, const wchar_t *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__pure__));

extern wchar_t *wmemcpy(wchar_t *__restrict __s1,
                        const wchar_t *__restrict __s2, size_t __n)
    __attribute__((__nothrow__, __leaf__));

extern wchar_t *wmemmove(wchar_t *__s1, const wchar_t *__s2, size_t __n)
    __attribute__((__nothrow__, __leaf__));

extern wchar_t *wmemset(wchar_t *__s, wchar_t __c, size_t __n)
    __attribute__((__nothrow__, __leaf__));
extern wint_t btowc(int __c) __attribute__((__nothrow__, __leaf__));

extern int wctob(wint_t __c) __attribute__((__nothrow__, __leaf__));

extern int mbsinit(const mbstate_t *__ps) __attribute__((__nothrow__, __leaf__))
__attribute__((__pure__));

extern size_t mbrtowc(wchar_t *__restrict __pwc, const char *__restrict __s,
                      size_t __n, mbstate_t *__restrict __p)
    __attribute__((__nothrow__, __leaf__));

extern size_t wcrtomb(char *__restrict __s, wchar_t __wc,
                      mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));

extern size_t __mbrlen(const char *__restrict __s, size_t __n,
                       mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));
extern size_t mbrlen(const char *__restrict __s, size_t __n,
                     mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));

extern wint_t __btowc_alias(int __c) __asm("btowc");
extern __inline __attribute__((__gnu_inline__)) wint_t
    __attribute__((__nothrow__, __leaf__)) btowc(int __c) {
  return (__builtin_constant_p(__c) && __c >= '\0' && __c <= '\x7f'
              ? (wint_t)__c
              : __btowc_alias(__c));
}

extern int __wctob_alias(wint_t __c) __asm("wctob");
extern __inline __attribute__((__gnu_inline__)) int
    __attribute__((__nothrow__, __leaf__)) wctob(wint_t __wc) {
  return (__builtin_constant_p(__wc) && __wc >= L'\0' && __wc <= L'\x7f'
              ? (int)__wc
              : __wctob_alias(__wc));
}

extern __inline __attribute__((__gnu_inline__)) size_t
    __attribute__((__nothrow__, __leaf__))
    mbrlen(const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps)

{
  return (__ps != ((void *)0) ? mbrtowc(((void *)0), __s, __n, __ps)
                              : __mbrlen(__s, __n, ((void *)0)));
}

extern size_t mbsrtowcs(wchar_t *__restrict __dst,
                        const char **__restrict __src, size_t __len,
                        mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));

extern size_t wcsrtombs(char *__restrict __dst,
                        const wchar_t **__restrict __src, size_t __len,
                        mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));

extern size_t mbsnrtowcs(wchar_t *__restrict __dst,
                         const char **__restrict __src, size_t __nmc,
                         size_t __len, mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));

extern size_t wcsnrtombs(char *__restrict __dst,
                         const wchar_t **__restrict __src, size_t __nwc,
                         size_t __len, mbstate_t *__restrict __ps)
    __attribute__((__nothrow__, __leaf__));
extern double wcstod(const wchar_t *__restrict __nptr,
                     wchar_t **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__));

extern float wcstof(const wchar_t *__restrict __nptr,
                    wchar_t **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__));
extern long double wcstold(const wchar_t *__restrict __nptr,
                           wchar_t **__restrict __endptr)
    __attribute__((__nothrow__, __leaf__));
extern long int wcstol(const wchar_t *__restrict __nptr,
                       wchar_t **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern unsigned long int wcstoul(const wchar_t *__restrict __nptr,
                                 wchar_t **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

__extension__ extern long long int wcstoll(const wchar_t *__restrict __nptr,
                                           wchar_t **__restrict __endptr,
                                           int __base)
    __attribute__((__nothrow__, __leaf__));

__extension__ extern unsigned long long int
wcstoull(const wchar_t *__restrict __nptr, wchar_t **__restrict __endptr,
         int __base) __attribute__((__nothrow__, __leaf__));
extern wchar_t *wcpcpy(wchar_t *__restrict __dest,
                       const wchar_t *__restrict __src)
    __attribute__((__nothrow__, __leaf__));

extern wchar_t *wcpncpy(wchar_t *__restrict __dest,
                        const wchar_t *__restrict __src, size_t __n)
    __attribute__((__nothrow__, __leaf__));
extern __FILE *open_wmemstream(wchar_t **__bufloc, size_t *__sizeloc)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__malloc__))
    __attribute__((__malloc__(fclose, 1)));

extern int fwide(__FILE *__fp, int __mode)
    __attribute__((__nothrow__, __leaf__));

extern int fwprintf(__FILE *__restrict __stream,
                    const wchar_t *__restrict __format, ...);

extern int wprintf(const wchar_t *__restrict __format, ...);

extern int swprintf(wchar_t *__restrict __s, size_t __n,
                    const wchar_t *__restrict __format, ...)
    __attribute__((__nothrow__, __leaf__));

extern int vfwprintf(__FILE *__restrict __s, const wchar_t *__restrict __format,
                     __gnuc_va_list __arg);

extern int vwprintf(const wchar_t *__restrict __format, __gnuc_va_list __arg);

extern int vswprintf(wchar_t *__restrict __s, size_t __n,
                     const wchar_t *__restrict __format, __gnuc_va_list __arg)
    __attribute__((__nothrow__, __leaf__));

extern int fwscanf(__FILE *__restrict __stream,
                   const wchar_t *__restrict __format, ...);

extern int wscanf(const wchar_t *__restrict __format, ...);

extern int swscanf(const wchar_t *__restrict __s,
                   const wchar_t *__restrict __format, ...)
    __attribute__((__nothrow__, __leaf__));
extern int fwscanf(__FILE *__restrict __stream,
                   const wchar_t *__restrict __format,
                   ...) __asm__(""
                                "__isoc99_fwscanf")

    ;
extern int wscanf(const wchar_t *__restrict __format,
                  ...) __asm__(""
                               "__isoc99_wscanf")

    ;
extern int swscanf(const wchar_t *__restrict __s,
                   const wchar_t *__restrict __format,
                   ...) __asm__(""
                                "__isoc99_swscanf")
    __attribute__((__nothrow__, __leaf__))

    ;
extern int vfwscanf(__FILE *__restrict __s, const wchar_t *__restrict __format,
                    __gnuc_va_list __arg);

extern int vwscanf(const wchar_t *__restrict __format, __gnuc_va_list __arg);

extern int vswscanf(const wchar_t *__restrict __s,
                    const wchar_t *__restrict __format, __gnuc_va_list __arg)
    __attribute__((__nothrow__, __leaf__));

extern int vfwscanf(__FILE *__restrict __s, const wchar_t *__restrict __format,
                    __gnuc_va_list __arg) __asm__(""
                                                  "__isoc99_vfwscanf")

    ;
extern int vwscanf(const wchar_t *__restrict __format,
                   __gnuc_va_list __arg) __asm__(""
                                                 "__isoc99_vwscanf")

    ;
extern int vswscanf(const wchar_t *__restrict __s,
                    const wchar_t *__restrict __format,
                    __gnuc_va_list __arg) __asm__(""
                                                  "__isoc99_vswscanf")
    __attribute__((__nothrow__, __leaf__))

    ;
extern wint_t fgetwc(__FILE *__stream);
extern wint_t getwc(__FILE *__stream);

extern wint_t getwchar(void);

extern wint_t fputwc(wchar_t __wc, __FILE *__stream);
extern wint_t putwc(wchar_t __wc, __FILE *__stream);

extern wint_t putwchar(wchar_t __wc);

extern wchar_t *fgetws(wchar_t *__restrict __ws, int __n,
                       __FILE *__restrict __stream);

extern int fputws(const wchar_t *__restrict __ws, __FILE *__restrict __stream);

extern wint_t ungetwc(wint_t __wc, __FILE *__stream);
extern size_t wcsftime(wchar_t *__restrict __s, size_t __maxsize,
                       const wchar_t *__restrict __format,
                       const struct tm *__restrict __tp)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wmemcpy_chk(wchar_t *__restrict __s1,
                              const wchar_t *__restrict __s2, size_t __n,
                              size_t __ns1)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wmemcpy_alias(wchar_t *__restrict __s1,
                                const wchar_t *__restrict __s2,
                                size_t __n) __asm__(""
                                                    "wmemcpy")
    __attribute__((__nothrow__, __leaf__))

    ;
extern wchar_t *__wmemcpy_chk_warn(wchar_t *__restrict __s1,
                                   const wchar_t *__restrict __s2, size_t __n,
                                   size_t __ns1) __asm__(""
                                                         "__wmemcpy_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warning__(
        "wmemcpy called with length bigger than size of destination "
        "buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wmemcpy(wchar_t *__restrict __s1, const wchar_t *__restrict __s2, size_t __n)

{
  return ((((__typeof(__n))0 < (__typeof(__n))-1 ||
            (__builtin_constant_p(__n) && (__n) > 0)) &&
           __builtin_constant_p(
               (((long unsigned int)(__n)) <=
                (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t)))) &&
           (((long unsigned int)(__n)) <=
            (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t))))
              ? __wmemcpy_alias(__s1, __s2, __n)
              : ((((__typeof(__n))0 < (__typeof(__n))-1 ||
                   (__builtin_constant_p(__n) && (__n) > 0)) &&
                  __builtin_constant_p(
                      (((long unsigned int)(__n)) <=
                       (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t)))) &&
                  !(((long unsigned int)(__n)) <=
                    (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t))))
                     ? __wmemcpy_chk_warn(__s1, __s2, __n,
                                          (__builtin_object_size(__s1, 0)) /
                                              (sizeof(wchar_t)))
                     : __wmemcpy_chk(__s1, __s2, __n,
                                     (__builtin_object_size(__s1, 0)) /
                                         (sizeof(wchar_t)))))

      ;
}

extern wchar_t *__wmemmove_chk(wchar_t *__s1, const wchar_t *__s2, size_t __n,
                               size_t __ns1)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wmemmove_alias(wchar_t *__s1, const wchar_t *__s2,
                                 size_t __n) __asm__(""
                                                     "wmemmove")
    __attribute__((__nothrow__, __leaf__))

    ;
extern wchar_t *__wmemmove_chk_warn(wchar_t *__s1, const wchar_t *__s2,
                                    size_t __n,
                                    size_t __ns1) __asm__(""
                                                          "__wmemmove_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warning__(
        "wmemmove called with length bigger than size of destination "
        "buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wmemmove(wchar_t *__s1, const wchar_t *__s2, size_t __n) {
  return ((((__typeof(__n))0 < (__typeof(__n))-1 ||
            (__builtin_constant_p(__n) && (__n) > 0)) &&
           __builtin_constant_p(
               (((long unsigned int)(__n)) <=
                (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t)))) &&
           (((long unsigned int)(__n)) <=
            (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t))))
              ? __wmemmove_alias(__s1, __s2, __n)
              : ((((__typeof(__n))0 < (__typeof(__n))-1 ||
                   (__builtin_constant_p(__n) && (__n) > 0)) &&
                  __builtin_constant_p(
                      (((long unsigned int)(__n)) <=
                       (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t)))) &&
                  !(((long unsigned int)(__n)) <=
                    (__builtin_object_size(__s1, 0)) / (sizeof(wchar_t))))
                     ? __wmemmove_chk_warn(__s1, __s2, __n,
                                           (__builtin_object_size(__s1, 0)) /
                                               (sizeof(wchar_t)))
                     : __wmemmove_chk(__s1, __s2, __n,
                                      (__builtin_object_size(__s1, 0)) /
                                          (sizeof(wchar_t)))))

      ;
}
extern wchar_t *__wmemset_chk(wchar_t *__s, wchar_t __c, size_t __n,
                              size_t __ns)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wmemset_alias(wchar_t *__s, wchar_t __c,
                                size_t __n) __asm__(""
                                                    "wmemset")
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wmemset_chk_warn(wchar_t *__s, wchar_t __c, size_t __n,
                                   size_t __ns) __asm__(""
                                                        "__wmemset_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warning__(
        "wmemset called with length bigger than size of destination "
        "buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wmemset(wchar_t *__s, wchar_t __c, size_t __n) {
  return ((((__typeof(__n))0 < (__typeof(__n))-1 ||
            (__builtin_constant_p(__n) && (__n) > 0)) &&
           __builtin_constant_p(
               (((long unsigned int)(__n)) <=
                (__builtin_object_size(__s, 0)) / (sizeof(wchar_t)))) &&
           (((long unsigned int)(__n)) <=
            (__builtin_object_size(__s, 0)) / (sizeof(wchar_t))))
              ? __wmemset_alias(__s, __c, __n)
              : ((((__typeof(__n))0 < (__typeof(__n))-1 ||
                   (__builtin_constant_p(__n) && (__n) > 0)) &&
                  __builtin_constant_p(
                      (((long unsigned int)(__n)) <=
                       (__builtin_object_size(__s, 0)) / (sizeof(wchar_t)))) &&
                  !(((long unsigned int)(__n)) <=
                    (__builtin_object_size(__s, 0)) / (sizeof(wchar_t))))
                     ? __wmemset_chk_warn(__s, __c, __n,
                                          (__builtin_object_size(__s, 0)) /
                                              (sizeof(wchar_t)))
                     : __wmemset_chk(__s, __c, __n,
                                     (__builtin_object_size(__s, 0)) /
                                         (sizeof(wchar_t)))))

      ;
}

extern wchar_t *__wcscpy_chk(wchar_t *__restrict __dest,
                             const wchar_t *__restrict __src, size_t __n)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *
__wcscpy_alias(wchar_t *__restrict __dest,
               const wchar_t *__restrict __src) __asm__(""
                                                        "wcscpy")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wcscpy(wchar_t *__restrict __dest, const wchar_t *__restrict __src) {
  size_t sz = __builtin_object_size(__dest, 2 > 1);
  if (sz != (size_t)-1)
    return __wcscpy_chk(__dest, __src, sz / sizeof(wchar_t));
  return __wcscpy_alias(__dest, __src);
}

extern wchar_t *__wcpcpy_chk(wchar_t *__restrict __dest,
                             const wchar_t *__restrict __src, size_t __destlen)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *
__wcpcpy_alias(wchar_t *__restrict __dest,
               const wchar_t *__restrict __src) __asm__(""
                                                        "wcpcpy")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wcpcpy(wchar_t *__restrict __dest, const wchar_t *__restrict __src) {
  size_t sz = __builtin_object_size(__dest, 2 > 1);
  if (sz != (size_t)-1)
    return __wcpcpy_chk(__dest, __src, sz / sizeof(wchar_t));
  return __wcpcpy_alias(__dest, __src);
}

extern wchar_t *__wcsncpy_chk(wchar_t *__restrict __dest,
                              const wchar_t *__restrict __src, size_t __n,
                              size_t __destlen)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wcsncpy_alias(wchar_t *__restrict __dest,
                                const wchar_t *__restrict __src,
                                size_t __n) __asm__(""
                                                    "wcsncpy")
    __attribute__((__nothrow__, __leaf__))

    ;
extern wchar_t *__wcsncpy_chk_warn(wchar_t *__restrict __dest,
                                   const wchar_t *__restrict __src, size_t __n,
                                   size_t __destlen) __asm__(""
                                                             "__wcsncpy_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warning__(
        "wcsncpy called with length bigger than size of destination "
        "buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wcsncpy(wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n)

{
  return (
      (((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__n)) <=
            (__builtin_object_size(__dest, 2 > 1)) / (sizeof(wchar_t)))) &&
       (((long unsigned int)(__n)) <=
        (__builtin_object_size(__dest, 2 > 1)) / (sizeof(wchar_t))))
          ? __wcsncpy_alias(__dest, __src, __n)
          : ((((__typeof(__n))0 < (__typeof(__n))-1 ||
               (__builtin_constant_p(__n) && (__n) > 0)) &&
              __builtin_constant_p((((long unsigned int)(__n)) <=
                                    (__builtin_object_size(__dest, 2 > 1)) /
                                        (sizeof(wchar_t)))) &&
              !(((long unsigned int)(__n)) <=
                (__builtin_object_size(__dest, 2 > 1)) / (sizeof(wchar_t))))
                 ? __wcsncpy_chk_warn(__dest, __src, __n,
                                      (__builtin_object_size(__dest, 2 > 1)) /
                                          (sizeof(wchar_t)))
                 : __wcsncpy_chk(__dest, __src, __n,
                                 (__builtin_object_size(__dest, 2 > 1)) /
                                     (sizeof(wchar_t)))))

      ;
}

extern wchar_t *__wcpncpy_chk(wchar_t *__restrict __dest,
                              const wchar_t *__restrict __src, size_t __n,
                              size_t __destlen)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wcpncpy_alias(wchar_t *__restrict __dest,
                                const wchar_t *__restrict __src,
                                size_t __n) __asm__(""
                                                    "wcpncpy")
    __attribute__((__nothrow__, __leaf__))

    ;
extern wchar_t *__wcpncpy_chk_warn(wchar_t *__restrict __dest,
                                   const wchar_t *__restrict __src, size_t __n,
                                   size_t __destlen) __asm__(""
                                                             "__wcpncpy_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warning__(
        "wcpncpy called with length bigger than size of destination "
        "buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wcpncpy(wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n)

{
  return (
      (((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__n)) <=
            (__builtin_object_size(__dest, 2 > 1)) / (sizeof(wchar_t)))) &&
       (((long unsigned int)(__n)) <=
        (__builtin_object_size(__dest, 2 > 1)) / (sizeof(wchar_t))))
          ? __wcpncpy_alias(__dest, __src, __n)
          : ((((__typeof(__n))0 < (__typeof(__n))-1 ||
               (__builtin_constant_p(__n) && (__n) > 0)) &&
              __builtin_constant_p((((long unsigned int)(__n)) <=
                                    (__builtin_object_size(__dest, 2 > 1)) /
                                        (sizeof(wchar_t)))) &&
              !(((long unsigned int)(__n)) <=
                (__builtin_object_size(__dest, 2 > 1)) / (sizeof(wchar_t))))
                 ? __wcpncpy_chk_warn(__dest, __src, __n,
                                      (__builtin_object_size(__dest, 2 > 1)) /
                                          (sizeof(wchar_t)))
                 : __wcpncpy_chk(__dest, __src, __n,
                                 (__builtin_object_size(__dest, 2 > 1)) /
                                     (sizeof(wchar_t)))))

      ;
}

extern wchar_t *__wcscat_chk(wchar_t *__restrict __dest,
                             const wchar_t *__restrict __src, size_t __destlen)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *
__wcscat_alias(wchar_t *__restrict __dest,
               const wchar_t *__restrict __src) __asm__(""
                                                        "wcscat")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wcscat(wchar_t *__restrict __dest, const wchar_t *__restrict __src) {
  size_t sz = __builtin_object_size(__dest, 2 > 1);
  if (sz != (size_t)-1)
    return __wcscat_chk(__dest, __src, sz / sizeof(wchar_t));
  return __wcscat_alias(__dest, __src);
}

extern wchar_t *__wcsncat_chk(wchar_t *__restrict __dest,
                              const wchar_t *__restrict __src, size_t __n,
                              size_t __destlen)
    __attribute__((__nothrow__, __leaf__));
extern wchar_t *__wcsncat_alias(wchar_t *__restrict __dest,
                                const wchar_t *__restrict __src,
                                size_t __n) __asm__(""
                                                    "wcsncat")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
wchar_t *__attribute__((__nothrow__, __leaf__))
wcsncat(wchar_t *__restrict __dest, const wchar_t *__restrict __src, size_t __n)

{
  size_t sz = __builtin_object_size(__dest, 2 > 1);
  if (sz != (size_t)-1)
    return __wcsncat_chk(__dest, __src, __n, sz / sizeof(wchar_t));
  return __wcsncat_alias(__dest, __src, __n);
}

extern int __swprintf_chk(wchar_t *__restrict __s, size_t __n, int __flag,
                          size_t __s_len, const wchar_t *__restrict __format,
                          ...) __attribute__((__nothrow__, __leaf__));

extern int __swprintf_alias(wchar_t *__restrict __s, size_t __n,
                            const wchar_t *__restrict __fmt,
                            ...) __asm__(""
                                         "swprintf")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) int __attribute__((__nothrow__, __leaf__))
swprintf(wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt,
         ...)

{
  size_t sz = __builtin_object_size(__s, 2 > 1);
  if (sz != (size_t)-1 || 2 > 1)
    return __swprintf_chk(__s, __n, 2 - 1, sz / sizeof(wchar_t), __fmt,
                          __builtin_va_arg_pack());
  return __swprintf_alias(__s, __n, __fmt, __builtin_va_arg_pack());
}
extern int __vswprintf_chk(wchar_t *__restrict __s, size_t __n, int __flag,
                           size_t __s_len, const wchar_t *__restrict __format,
                           __gnuc_va_list __arg)
    __attribute__((__nothrow__, __leaf__));

extern int __vswprintf_alias(wchar_t *__restrict __s, size_t __n,
                             const wchar_t *__restrict __fmt,
                             __gnuc_va_list __ap) __asm__(""
                                                          "vswprintf")
    __attribute__((__nothrow__, __leaf__))

    ;

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__))
__attribute__((__artificial__)) int __attribute__((__nothrow__, __leaf__))
vswprintf(wchar_t *__restrict __s, size_t __n, const wchar_t *__restrict __fmt,
          __gnuc_va_list __ap)

{
  size_t sz = __builtin_object_size(__s, 2 > 1);
  if (sz != (size_t)-1 || 2 > 1)
    return __vswprintf_chk(__s, __n, 2 - 1, sz / sizeof(wchar_t), __fmt, __ap);
  return __vswprintf_alias(__s, __n, __fmt, __ap);
}

extern int __fwprintf_chk(__FILE *__restrict __stream, int __flag,
                          const wchar_t *__restrict __format, ...);
extern int __wprintf_chk(int __flag, const wchar_t *__restrict __format, ...);
extern int __vfwprintf_chk(__FILE *__restrict __stream, int __flag,
                           const wchar_t *__restrict __format,
                           __gnuc_va_list __ap);
extern int __vwprintf_chk(int __flag, const wchar_t *__restrict __format,
                          __gnuc_va_list __ap);

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
wprintf(const wchar_t *__restrict __fmt, ...) {
  return __wprintf_chk(2 - 1, __fmt, __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
fwprintf(__FILE *__restrict __stream, const wchar_t *__restrict __fmt, ...) {
  return __fwprintf_chk(__stream, 2 - 1, __fmt, __builtin_va_arg_pack());
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vwprintf(const wchar_t *__restrict __fmt, __gnuc_va_list __ap) {
  return __vwprintf_chk(2 - 1, __fmt, __ap);
}

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) int
vfwprintf(__FILE *__restrict __stream, const wchar_t *__restrict __fmt,
          __gnuc_va_list __ap) {
  return __vfwprintf_chk(__stream, 2 - 1, __fmt, __ap);
}

extern wchar_t *__fgetws_chk(wchar_t *__restrict __s, size_t __size, int __n,
                             __FILE *__restrict __stream)
    __attribute__((__warn_unused_result__));
extern wchar_t *__fgetws_alias(wchar_t *__restrict __s, int __n,
                               __FILE *__restrict __stream) __asm__(""
                                                                    "fgetws")

    __attribute__((__warn_unused_result__));
extern wchar_t *
__fgetws_chk_warn(wchar_t *__restrict __s, size_t __size, int __n,
                  __FILE *__restrict __stream) __asm__(""
                                                       "__fgetws_chk")

    __attribute__((__warn_unused_result__))
    __attribute__((__warning__("fgetws called with bigger size than length "
                               "of destination buffer")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) wchar_t *
fgetws(wchar_t *__restrict __s, int __n, __FILE *__restrict __stream) {
  size_t sz = __builtin_object_size(__s, 2 > 1);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__n)) <= (sz) / (sizeof(wchar_t)))) &&
       (((long unsigned int)(__n)) <= (sz) / (sizeof(wchar_t)))))
    return __fgetws_alias(__s, __n, __stream);
  if ((((__typeof(__n))0 < (__typeof(__n))-1 ||
        (__builtin_constant_p(__n) && (__n) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__n)) <= (sz) / (sizeof(wchar_t)))) &&
       !(((long unsigned int)(__n)) <= (sz) / (sizeof(wchar_t)))))
    return __fgetws_chk_warn(__s, sz / sizeof(wchar_t), __n, __stream);
  return __fgetws_chk(__s, sz / sizeof(wchar_t), __n, __stream);
}
extern size_t __wcrtomb_chk(char *__restrict __s, wchar_t __wchar,
                            mbstate_t *__restrict __p, size_t __buflen)
    __attribute__((__nothrow__, __leaf__))
    __attribute__((__warn_unused_result__));
extern size_t __wcrtomb_alias(char *__restrict __s, wchar_t __wchar,
                              mbstate_t *__restrict __ps) __asm__(""
                                                                  "wcrtomb")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((__warn_unused_result__));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__))
__attribute__((__warn_unused_result__)) size_t
    __attribute__((__nothrow__, __leaf__))
    wcrtomb(char *__restrict __s, wchar_t __wchar, mbstate_t *__restrict __ps)

{

  if (__builtin_object_size(__s, 2 > 1) != (size_t)-1 &&
      16 > __builtin_object_size(__s, 2 > 1))
    return __wcrtomb_chk(__s, __wchar, __ps, __builtin_object_size(__s, 2 > 1));
  return __wcrtomb_alias(__s, __wchar, __ps);
}

extern size_t __mbsrtowcs_chk(wchar_t *__restrict __dst,
                              const char **__restrict __src, size_t __len,
                              mbstate_t *__restrict __ps, size_t __dstlen)
    __attribute__((__nothrow__, __leaf__));
extern size_t __mbsrtowcs_alias(wchar_t *__restrict __dst,
                                const char **__restrict __src, size_t __len,
                                mbstate_t *__restrict __ps) __asm__(""
                                                                    "mbsrtowcs")
    __attribute__((__nothrow__, __leaf__))

    ;
extern size_t __mbsrtowcs_chk_warn(
    wchar_t *__restrict __dst, const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps,
    size_t __dstlen) __asm__(""
                             "__mbsrtowcs_chk") __attribute__((__nothrow__,
                                                               __leaf__))

__attribute__((__warning__("mbsrtowcs called with dst buffer smaller than len "
                           "* sizeof (wchar_t)")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) size_t
    __attribute__((__nothrow__, __leaf__))
    mbsrtowcs(wchar_t *__restrict __dst, const char **__restrict __src,
              size_t __len, mbstate_t *__restrict __ps)

{
  return (
      (((__typeof(__len))0 < (__typeof(__len))-1 ||
        (__builtin_constant_p(__len) && (__len) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__len)) <=
            (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t)))) &&
       (((long unsigned int)(__len)) <=
        (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t))))
          ? __mbsrtowcs_alias(__dst, __src, __len, __ps)
          : ((((__typeof(__len))0 < (__typeof(__len))-1 ||
               (__builtin_constant_p(__len) && (__len) > 0)) &&
              __builtin_constant_p((((long unsigned int)(__len)) <=
                                    (__builtin_object_size(__dst, 2 > 1)) /
                                        (sizeof(wchar_t)))) &&
              !(((long unsigned int)(__len)) <=
                (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t))))
                 ? __mbsrtowcs_chk_warn(__dst, __src, __len, __ps,
                                        (__builtin_object_size(__dst, 2 > 1)) /
                                            (sizeof(wchar_t)))
                 : __mbsrtowcs_chk(__dst, __src, __len, __ps,
                                   (__builtin_object_size(__dst, 2 > 1)) /
                                       (sizeof(wchar_t)))))

      ;
}

extern size_t __wcsrtombs_chk(char *__restrict __dst,
                              const wchar_t **__restrict __src, size_t __len,
                              mbstate_t *__restrict __ps, size_t __dstlen)
    __attribute__((__nothrow__, __leaf__));
extern size_t __wcsrtombs_alias(char *__restrict __dst,
                                const wchar_t **__restrict __src, size_t __len,
                                mbstate_t *__restrict __ps) __asm__(""
                                                                    "wcsrtombs")
    __attribute__((__nothrow__, __leaf__))

    ;
extern size_t __wcsrtombs_chk_warn(char *__restrict __dst,
                                   const wchar_t **__restrict __src,
                                   size_t __len, mbstate_t *__restrict __ps,
                                   size_t __dstlen) __asm__(""
                                                            "__wcsrtombs_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((
        __warning__("wcsrtombs called with dst buffer smaller than len")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) size_t
    __attribute__((__nothrow__, __leaf__))
    wcsrtombs(char *__restrict __dst, const wchar_t **__restrict __src,
              size_t __len, mbstate_t *__restrict __ps)

{
  return ((((__typeof(__len))0 < (__typeof(__len))-1 ||
            (__builtin_constant_p(__len) && (__len) > 0)) &&
           __builtin_constant_p(
               (((long unsigned int)(__len)) <=
                (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char)))) &&
           (((long unsigned int)(__len)) <=
            (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char))))
              ? __wcsrtombs_alias(__dst, __src, __len, __ps)
              : ((((__typeof(__len))0 < (__typeof(__len))-1 ||
                   (__builtin_constant_p(__len) && (__len) > 0)) &&
                  __builtin_constant_p((((long unsigned int)(__len)) <=
                                        (__builtin_object_size(__dst, 2 > 1)) /
                                            (sizeof(char)))) &&
                  !(((long unsigned int)(__len)) <=
                    (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char))))
                     ? __wcsrtombs_chk_warn(__dst, __src, __len, __ps,
                                            __builtin_object_size(__dst, 2 > 1))
                     : __wcsrtombs_chk(__dst, __src, __len, __ps,
                                       __builtin_object_size(__dst, 2 > 1))))

      ;
}

extern size_t __mbsnrtowcs_chk(wchar_t *__restrict __dst,
                               const char **__restrict __src, size_t __nmc,
                               size_t __len, mbstate_t *__restrict __ps,
                               size_t __dstlen)
    __attribute__((__nothrow__, __leaf__));
extern size_t
__mbsnrtowcs_alias(wchar_t *__restrict __dst, const char **__restrict __src,
                   size_t __nmc, size_t __len,
                   mbstate_t *__restrict __ps) __asm__(""
                                                       "mbsnrtowcs")
    __attribute__((__nothrow__, __leaf__))

    ;
extern size_t __mbsnrtowcs_chk_warn(
    wchar_t *__restrict __dst, const char **__restrict __src, size_t __nmc,
    size_t __len, mbstate_t *__restrict __ps,
    size_t __dstlen) __asm__(""
                             "__mbsnrtowcs_chk") __attribute__((__nothrow__,
                                                                __leaf__))

__attribute__((__warning__("mbsnrtowcs called with dst buffer smaller than len "
                           "* sizeof (wchar_t)")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) size_t
    __attribute__((__nothrow__, __leaf__))
    mbsnrtowcs(wchar_t *__restrict __dst, const char **__restrict __src,
               size_t __nmc, size_t __len, mbstate_t *__restrict __ps)

{
  return (
      (((__typeof(__len))0 < (__typeof(__len))-1 ||
        (__builtin_constant_p(__len) && (__len) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__len)) <=
            (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t)))) &&
       (((long unsigned int)(__len)) <=
        (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t))))
          ? __mbsnrtowcs_alias(__dst, __src, __nmc, __len, __ps)
          : ((((__typeof(__len))0 < (__typeof(__len))-1 ||
               (__builtin_constant_p(__len) && (__len) > 0)) &&
              __builtin_constant_p((((long unsigned int)(__len)) <=
                                    (__builtin_object_size(__dst, 2 > 1)) /
                                        (sizeof(wchar_t)))) &&
              !(((long unsigned int)(__len)) <=
                (__builtin_object_size(__dst, 2 > 1)) / (sizeof(wchar_t))))
                 ? __mbsnrtowcs_chk_warn(__dst, __src, __nmc, __len, __ps,
                                         (__builtin_object_size(__dst, 2 > 1)) /
                                             (sizeof(wchar_t)))
                 : __mbsnrtowcs_chk(__dst, __src, __nmc, __len, __ps,
                                    (__builtin_object_size(__dst, 2 > 1)) /
                                        (sizeof(wchar_t)))))

      ;
}

extern size_t __wcsnrtombs_chk(char *__restrict __dst,
                               const wchar_t **__restrict __src, size_t __nwc,
                               size_t __len, mbstate_t *__restrict __ps,
                               size_t __dstlen)
    __attribute__((__nothrow__, __leaf__));
extern size_t
__wcsnrtombs_alias(char *__restrict __dst, const wchar_t **__restrict __src,
                   size_t __nwc, size_t __len,
                   mbstate_t *__restrict __ps) __asm__(""
                                                       "wcsnrtombs")
    __attribute__((__nothrow__, __leaf__))

    ;
extern size_t
__wcsnrtombs_chk_warn(char *__restrict __dst, const wchar_t **__restrict __src,
                      size_t __nwc, size_t __len, mbstate_t *__restrict __ps,
                      size_t __dstlen) __asm__(""
                                               "__wcsnrtombs_chk")
    __attribute__((__nothrow__, __leaf__))

    __attribute__((
        __warning__("wcsnrtombs called with dst buffer smaller than len")));

extern __inline __attribute__((__always_inline__))
__attribute__((__gnu_inline__)) __attribute__((__artificial__)) size_t
    __attribute__((__nothrow__, __leaf__))
    wcsnrtombs(char *__restrict __dst, const wchar_t **__restrict __src,
               size_t __nwc, size_t __len, mbstate_t *__restrict __ps)

{
  return (
      (((__typeof(__len))0 < (__typeof(__len))-1 ||
        (__builtin_constant_p(__len) && (__len) > 0)) &&
       __builtin_constant_p(
           (((long unsigned int)(__len)) <=
            (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char)))) &&
       (((long unsigned int)(__len)) <=
        (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char))))
          ? __wcsnrtombs_alias(__dst, __src, __nwc, __len, __ps)
          : ((((__typeof(__len))0 < (__typeof(__len))-1 ||
               (__builtin_constant_p(__len) && (__len) > 0)) &&
              __builtin_constant_p(
                  (((long unsigned int)(__len)) <=
                   (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char)))) &&
              !(((long unsigned int)(__len)) <=
                (__builtin_object_size(__dst, 2 > 1)) / (sizeof(char))))
                 ? __wcsnrtombs_chk_warn(__dst, __src, __nwc, __len, __ps,
                                         __builtin_object_size(__dst, 2 > 1))
                 : __wcsnrtombs_chk(__dst, __src, __nwc, __len, __ps,
                                    __builtin_object_size(__dst, 2 > 1))))

      ;
}

typedef int __gwchar_t;

typedef struct {
  long int quot;
  long int rem;
} imaxdiv_t;
extern intmax_t imaxabs(intmax_t __n) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern intmax_t strtoimax(const char *__restrict __nptr,
                          char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern uintmax_t strtoumax(const char *__restrict __nptr,
                           char **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern intmax_t wcstoimax(const __gwchar_t *__restrict __nptr,
                          __gwchar_t **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

extern uintmax_t wcstoumax(const __gwchar_t *__restrict __nptr,
                           __gwchar_t **__restrict __endptr, int __base)
    __attribute__((__nothrow__, __leaf__));

enum {
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
extern const unsigned short int **__ctype_b_loc(void)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern const __int32_t **__ctype_tolower_loc(void)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern const __int32_t **__ctype_toupper_loc(void)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int isalnum(int) __attribute__((__nothrow__, __leaf__));
extern int isalpha(int) __attribute__((__nothrow__, __leaf__));
extern int iscntrl(int) __attribute__((__nothrow__, __leaf__));
extern int isdigit(int) __attribute__((__nothrow__, __leaf__));
extern int islower(int) __attribute__((__nothrow__, __leaf__));
extern int isgraph(int) __attribute__((__nothrow__, __leaf__));
extern int isprint(int) __attribute__((__nothrow__, __leaf__));
extern int ispunct(int) __attribute__((__nothrow__, __leaf__));
extern int isspace(int) __attribute__((__nothrow__, __leaf__));
extern int isupper(int) __attribute__((__nothrow__, __leaf__));
extern int isxdigit(int) __attribute__((__nothrow__, __leaf__));

extern int tolower(int __c) __attribute__((__nothrow__, __leaf__));

extern int toupper(int __c) __attribute__((__nothrow__, __leaf__));

extern int isblank(int) __attribute__((__nothrow__, __leaf__));
extern int isascii(int __c) __attribute__((__nothrow__, __leaf__));

extern int toascii(int __c) __attribute__((__nothrow__, __leaf__));

extern int _toupper(int) __attribute__((__nothrow__, __leaf__));
extern int _tolower(int) __attribute__((__nothrow__, __leaf__));

extern __inline __attribute__((__gnu_inline__)) int
    __attribute__((__nothrow__, __leaf__)) tolower(int __c) {
  return __c >= -128 && __c < 256 ? (*__ctype_tolower_loc())[__c] : __c;
}

extern __inline __attribute__((__gnu_inline__)) int
    __attribute__((__nothrow__, __leaf__)) toupper(int __c) {
  return __c >= -128 && __c < 256 ? (*__ctype_toupper_loc())[__c] : __c;
}

extern int isalnum_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isalpha_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int iscntrl_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isdigit_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int islower_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isgraph_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isprint_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int ispunct_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isspace_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isupper_l(int, locale_t) __attribute__((__nothrow__, __leaf__));
extern int isxdigit_l(int, locale_t) __attribute__((__nothrow__, __leaf__));

extern int isblank_l(int, locale_t) __attribute__((__nothrow__, __leaf__));

extern int __tolower_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));
extern int tolower_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));

extern int __toupper_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));
extern int toupper_l(int __c, locale_t __l)
    __attribute__((__nothrow__, __leaf__));

typedef float float_t;
typedef double double_t;

extern int __fpclassify(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __signbit(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __isinf(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __finite(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __isnan(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __iseqsig(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern int __issignaling(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern double acos(double __x) __attribute__((__nothrow__, __leaf__));
extern double __acos(double __x) __attribute__((__nothrow__, __leaf__));

extern double asin(double __x) __attribute__((__nothrow__, __leaf__));
extern double __asin(double __x) __attribute__((__nothrow__, __leaf__));

extern double atan(double __x) __attribute__((__nothrow__, __leaf__));
extern double __atan(double __x) __attribute__((__nothrow__, __leaf__));

extern double atan2(double __y, double __x)
    __attribute__((__nothrow__, __leaf__));
extern double __atan2(double __y, double __x)
    __attribute__((__nothrow__, __leaf__));

extern double cos(double __x) __attribute__((__nothrow__, __leaf__));
extern double __cos(double __x) __attribute__((__nothrow__, __leaf__));

extern double sin(double __x) __attribute__((__nothrow__, __leaf__));
extern double __sin(double __x) __attribute__((__nothrow__, __leaf__));

extern double tan(double __x) __attribute__((__nothrow__, __leaf__));
extern double __tan(double __x) __attribute__((__nothrow__, __leaf__));

extern double cosh(double __x) __attribute__((__nothrow__, __leaf__));
extern double __cosh(double __x) __attribute__((__nothrow__, __leaf__));

extern double sinh(double __x) __attribute__((__nothrow__, __leaf__));
extern double __sinh(double __x) __attribute__((__nothrow__, __leaf__));

extern double tanh(double __x) __attribute__((__nothrow__, __leaf__));
extern double __tanh(double __x) __attribute__((__nothrow__, __leaf__));
extern double acosh(double __x) __attribute__((__nothrow__, __leaf__));
extern double __acosh(double __x) __attribute__((__nothrow__, __leaf__));

extern double asinh(double __x) __attribute__((__nothrow__, __leaf__));
extern double __asinh(double __x) __attribute__((__nothrow__, __leaf__));

extern double atanh(double __x) __attribute__((__nothrow__, __leaf__));
extern double __atanh(double __x) __attribute__((__nothrow__, __leaf__));

extern double exp(double __x) __attribute__((__nothrow__, __leaf__));
extern double __exp(double __x) __attribute__((__nothrow__, __leaf__));

extern double frexp(double __x, int *__exponent)
    __attribute__((__nothrow__, __leaf__));
extern double __frexp(double __x, int *__exponent)
    __attribute__((__nothrow__, __leaf__));

extern double ldexp(double __x, int __exponent)
    __attribute__((__nothrow__, __leaf__));
extern double __ldexp(double __x, int __exponent)
    __attribute__((__nothrow__, __leaf__));

extern double log(double __x) __attribute__((__nothrow__, __leaf__));
extern double __log(double __x) __attribute__((__nothrow__, __leaf__));

extern double log10(double __x) __attribute__((__nothrow__, __leaf__));
extern double __log10(double __x) __attribute__((__nothrow__, __leaf__));

extern double modf(double __x, double *__iptr)
    __attribute__((__nothrow__, __leaf__));
extern double __modf(double __x, double *__iptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
extern double expm1(double __x) __attribute__((__nothrow__, __leaf__));
extern double __expm1(double __x) __attribute__((__nothrow__, __leaf__));

extern double log1p(double __x) __attribute__((__nothrow__, __leaf__));
extern double __log1p(double __x) __attribute__((__nothrow__, __leaf__));

extern double logb(double __x) __attribute__((__nothrow__, __leaf__));
extern double __logb(double __x) __attribute__((__nothrow__, __leaf__));

extern double exp2(double __x) __attribute__((__nothrow__, __leaf__));
extern double __exp2(double __x) __attribute__((__nothrow__, __leaf__));

extern double log2(double __x) __attribute__((__nothrow__, __leaf__));
extern double __log2(double __x) __attribute__((__nothrow__, __leaf__));

extern double pow(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __pow(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern double sqrt(double __x) __attribute__((__nothrow__, __leaf__));
extern double __sqrt(double __x) __attribute__((__nothrow__, __leaf__));

extern double hypot(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __hypot(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern double cbrt(double __x) __attribute__((__nothrow__, __leaf__));
extern double __cbrt(double __x) __attribute__((__nothrow__, __leaf__));

extern double ceil(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern double __ceil(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double fabs(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern double __fabs(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double floor(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern double __floor(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double fmod(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __fmod(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern int isinf(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int finite(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double drem(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __drem(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern double significand(double __x) __attribute__((__nothrow__, __leaf__));
extern double __significand(double __x) __attribute__((__nothrow__, __leaf__));

extern double copysign(double __x, double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern double __copysign(double __x, double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern double nan(const char *__tagb) __attribute__((__nothrow__, __leaf__));
extern double __nan(const char *__tagb) __attribute__((__nothrow__, __leaf__));
extern int isnan(double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double j0(double) __attribute__((__nothrow__, __leaf__));
extern double __j0(double) __attribute__((__nothrow__, __leaf__));
extern double j1(double) __attribute__((__nothrow__, __leaf__));
extern double __j1(double) __attribute__((__nothrow__, __leaf__));
extern double jn(int, double) __attribute__((__nothrow__, __leaf__));
extern double __jn(int, double) __attribute__((__nothrow__, __leaf__));
extern double y0(double) __attribute__((__nothrow__, __leaf__));
extern double __y0(double) __attribute__((__nothrow__, __leaf__));
extern double y1(double) __attribute__((__nothrow__, __leaf__));
extern double __y1(double) __attribute__((__nothrow__, __leaf__));
extern double yn(int, double) __attribute__((__nothrow__, __leaf__));
extern double __yn(int, double) __attribute__((__nothrow__, __leaf__));

extern double erf(double) __attribute__((__nothrow__, __leaf__));
extern double __erf(double) __attribute__((__nothrow__, __leaf__));
extern double erfc(double) __attribute__((__nothrow__, __leaf__));
extern double __erfc(double) __attribute__((__nothrow__, __leaf__));
extern double lgamma(double) __attribute__((__nothrow__, __leaf__));
extern double __lgamma(double) __attribute__((__nothrow__, __leaf__));

extern double tgamma(double) __attribute__((__nothrow__, __leaf__));
extern double __tgamma(double) __attribute__((__nothrow__, __leaf__));

extern double gamma(double) __attribute__((__nothrow__, __leaf__));
extern double __gamma(double) __attribute__((__nothrow__, __leaf__));

extern double lgamma_r(double, int *__signgamp)
    __attribute__((__nothrow__, __leaf__));
extern double __lgamma_r(double, int *__signgamp)
    __attribute__((__nothrow__, __leaf__));

extern double rint(double __x) __attribute__((__nothrow__, __leaf__));
extern double __rint(double __x) __attribute__((__nothrow__, __leaf__));

extern double nextafter(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __nextafter(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern double nexttoward(double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __nexttoward(double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern double remainder(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __remainder(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern double scalbn(double __x, int __n)
    __attribute__((__nothrow__, __leaf__));
extern double __scalbn(double __x, int __n)
    __attribute__((__nothrow__, __leaf__));

extern int ilogb(double __x) __attribute__((__nothrow__, __leaf__));
extern int __ilogb(double __x) __attribute__((__nothrow__, __leaf__));
extern double scalbln(double __x, long int __n)
    __attribute__((__nothrow__, __leaf__));
extern double __scalbln(double __x, long int __n)
    __attribute__((__nothrow__, __leaf__));

extern double nearbyint(double __x) __attribute__((__nothrow__, __leaf__));
extern double __nearbyint(double __x) __attribute__((__nothrow__, __leaf__));

extern double round(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern double __round(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double trunc(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern double __trunc(double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern double remquo(double __x, double __y, int *__quo)
    __attribute__((__nothrow__, __leaf__));
extern double __remquo(double __x, double __y, int *__quo)
    __attribute__((__nothrow__, __leaf__));

extern long int lrint(double __x) __attribute__((__nothrow__, __leaf__));
extern long int __lrint(double __x) __attribute__((__nothrow__, __leaf__));
__extension__ extern long long int llrint(double __x)
    __attribute__((__nothrow__, __leaf__));
extern long long int __llrint(double __x)
    __attribute__((__nothrow__, __leaf__));

extern long int lround(double __x) __attribute__((__nothrow__, __leaf__));
extern long int __lround(double __x) __attribute__((__nothrow__, __leaf__));
__extension__ extern long long int llround(double __x)
    __attribute__((__nothrow__, __leaf__));
extern long long int __llround(double __x)
    __attribute__((__nothrow__, __leaf__));

extern double fdim(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));
extern double __fdim(double __x, double __y)
    __attribute__((__nothrow__, __leaf__));

extern double fmax(double __x, double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern double __fmax(double __x, double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern double fmin(double __x, double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern double __fmin(double __x, double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern double fma(double __x, double __y, double __z)
    __attribute__((__nothrow__, __leaf__));
extern double __fma(double __x, double __y, double __z)
    __attribute__((__nothrow__, __leaf__));
extern double scalb(double __x, double __n)
    __attribute__((__nothrow__, __leaf__));
extern double __scalb(double __x, double __n)
    __attribute__((__nothrow__, __leaf__));

extern int __fpclassifyf(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __signbitf(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __isinff(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __finitef(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __isnanf(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __iseqsigf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern int __issignalingf(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float acosf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __acosf(float __x) __attribute__((__nothrow__, __leaf__));

extern float asinf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __asinf(float __x) __attribute__((__nothrow__, __leaf__));

extern float atanf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __atanf(float __x) __attribute__((__nothrow__, __leaf__));

extern float atan2f(float __y, float __x)
    __attribute__((__nothrow__, __leaf__));
extern float __atan2f(float __y, float __x)
    __attribute__((__nothrow__, __leaf__));

extern float cosf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __cosf(float __x) __attribute__((__nothrow__, __leaf__));

extern float sinf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __sinf(float __x) __attribute__((__nothrow__, __leaf__));

extern float tanf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __tanf(float __x) __attribute__((__nothrow__, __leaf__));

extern float coshf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __coshf(float __x) __attribute__((__nothrow__, __leaf__));

extern float sinhf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __sinhf(float __x) __attribute__((__nothrow__, __leaf__));

extern float tanhf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __tanhf(float __x) __attribute__((__nothrow__, __leaf__));
extern float acoshf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __acoshf(float __x) __attribute__((__nothrow__, __leaf__));

extern float asinhf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __asinhf(float __x) __attribute__((__nothrow__, __leaf__));

extern float atanhf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __atanhf(float __x) __attribute__((__nothrow__, __leaf__));

extern float expf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __expf(float __x) __attribute__((__nothrow__, __leaf__));

extern float frexpf(float __x, int *__exponent)
    __attribute__((__nothrow__, __leaf__));
extern float __frexpf(float __x, int *__exponent)
    __attribute__((__nothrow__, __leaf__));

extern float ldexpf(float __x, int __exponent)
    __attribute__((__nothrow__, __leaf__));
extern float __ldexpf(float __x, int __exponent)
    __attribute__((__nothrow__, __leaf__));

extern float logf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __logf(float __x) __attribute__((__nothrow__, __leaf__));

extern float log10f(float __x) __attribute__((__nothrow__, __leaf__));
extern float __log10f(float __x) __attribute__((__nothrow__, __leaf__));

extern float modff(float __x, float *__iptr)
    __attribute__((__nothrow__, __leaf__));
extern float __modff(float __x, float *__iptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
extern float expm1f(float __x) __attribute__((__nothrow__, __leaf__));
extern float __expm1f(float __x) __attribute__((__nothrow__, __leaf__));

extern float log1pf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __log1pf(float __x) __attribute__((__nothrow__, __leaf__));

extern float logbf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __logbf(float __x) __attribute__((__nothrow__, __leaf__));

extern float exp2f(float __x) __attribute__((__nothrow__, __leaf__));
extern float __exp2f(float __x) __attribute__((__nothrow__, __leaf__));

extern float log2f(float __x) __attribute__((__nothrow__, __leaf__));
extern float __log2f(float __x) __attribute__((__nothrow__, __leaf__));

extern float powf(float __x, float __y) __attribute__((__nothrow__, __leaf__));
extern float __powf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern float sqrtf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __sqrtf(float __x) __attribute__((__nothrow__, __leaf__));

extern float hypotf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));
extern float __hypotf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern float cbrtf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __cbrtf(float __x) __attribute__((__nothrow__, __leaf__));

extern float ceilf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __ceilf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float fabsf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __fabsf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float floorf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __floorf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float fmodf(float __x, float __y) __attribute__((__nothrow__, __leaf__));
extern float __fmodf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));
extern int isinff(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int finitef(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float dremf(float __x, float __y) __attribute__((__nothrow__, __leaf__));
extern float __dremf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern float significandf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __significandf(float __x) __attribute__((__nothrow__, __leaf__));

extern float copysignf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern float __copysignf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern float nanf(const char *__tagb) __attribute__((__nothrow__, __leaf__));
extern float __nanf(const char *__tagb) __attribute__((__nothrow__, __leaf__));
extern int isnanf(float __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float j0f(float) __attribute__((__nothrow__, __leaf__));
extern float __j0f(float) __attribute__((__nothrow__, __leaf__));
extern float j1f(float) __attribute__((__nothrow__, __leaf__));
extern float __j1f(float) __attribute__((__nothrow__, __leaf__));
extern float jnf(int, float) __attribute__((__nothrow__, __leaf__));
extern float __jnf(int, float) __attribute__((__nothrow__, __leaf__));
extern float y0f(float) __attribute__((__nothrow__, __leaf__));
extern float __y0f(float) __attribute__((__nothrow__, __leaf__));
extern float y1f(float) __attribute__((__nothrow__, __leaf__));
extern float __y1f(float) __attribute__((__nothrow__, __leaf__));
extern float ynf(int, float) __attribute__((__nothrow__, __leaf__));
extern float __ynf(int, float) __attribute__((__nothrow__, __leaf__));

extern float erff(float) __attribute__((__nothrow__, __leaf__));
extern float __erff(float) __attribute__((__nothrow__, __leaf__));
extern float erfcf(float) __attribute__((__nothrow__, __leaf__));
extern float __erfcf(float) __attribute__((__nothrow__, __leaf__));
extern float lgammaf(float) __attribute__((__nothrow__, __leaf__));
extern float __lgammaf(float) __attribute__((__nothrow__, __leaf__));

extern float tgammaf(float) __attribute__((__nothrow__, __leaf__));
extern float __tgammaf(float) __attribute__((__nothrow__, __leaf__));

extern float gammaf(float) __attribute__((__nothrow__, __leaf__));
extern float __gammaf(float) __attribute__((__nothrow__, __leaf__));

extern float lgammaf_r(float, int *__signgamp)
    __attribute__((__nothrow__, __leaf__));
extern float __lgammaf_r(float, int *__signgamp)
    __attribute__((__nothrow__, __leaf__));

extern float rintf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __rintf(float __x) __attribute__((__nothrow__, __leaf__));

extern float nextafterf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));
extern float __nextafterf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern float nexttowardf(float __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern float __nexttowardf(float __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern float remainderf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));
extern float __remainderf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern float scalbnf(float __x, int __n) __attribute__((__nothrow__, __leaf__));
extern float __scalbnf(float __x, int __n)
    __attribute__((__nothrow__, __leaf__));

extern int ilogbf(float __x) __attribute__((__nothrow__, __leaf__));
extern int __ilogbf(float __x) __attribute__((__nothrow__, __leaf__));
extern float scalblnf(float __x, long int __n)
    __attribute__((__nothrow__, __leaf__));
extern float __scalblnf(float __x, long int __n)
    __attribute__((__nothrow__, __leaf__));

extern float nearbyintf(float __x) __attribute__((__nothrow__, __leaf__));
extern float __nearbyintf(float __x) __attribute__((__nothrow__, __leaf__));

extern float roundf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __roundf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float truncf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __truncf(float __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern float remquof(float __x, float __y, int *__quo)
    __attribute__((__nothrow__, __leaf__));
extern float __remquof(float __x, float __y, int *__quo)
    __attribute__((__nothrow__, __leaf__));

extern long int lrintf(float __x) __attribute__((__nothrow__, __leaf__));
extern long int __lrintf(float __x) __attribute__((__nothrow__, __leaf__));
__extension__ extern long long int llrintf(float __x)
    __attribute__((__nothrow__, __leaf__));
extern long long int __llrintf(float __x)
    __attribute__((__nothrow__, __leaf__));

extern long int lroundf(float __x) __attribute__((__nothrow__, __leaf__));
extern long int __lroundf(float __x) __attribute__((__nothrow__, __leaf__));
__extension__ extern long long int llroundf(float __x)
    __attribute__((__nothrow__, __leaf__));
extern long long int __llroundf(float __x)
    __attribute__((__nothrow__, __leaf__));

extern float fdimf(float __x, float __y) __attribute__((__nothrow__, __leaf__));
extern float __fdimf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__));

extern float fmaxf(float __x, float __y) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __fmaxf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern float fminf(float __x, float __y) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern float __fminf(float __x, float __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern float fmaf(float __x, float __y, float __z)
    __attribute__((__nothrow__, __leaf__));
extern float __fmaf(float __x, float __y, float __z)
    __attribute__((__nothrow__, __leaf__));
extern float scalbf(float __x, float __n)
    __attribute__((__nothrow__, __leaf__));
extern float __scalbf(float __x, float __n)
    __attribute__((__nothrow__, __leaf__));
extern int __fpclassifyl(long double __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int __signbitl(long double __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int __isinfl(long double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __finitel(long double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __isnanl(long double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __iseqsigl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern int __issignalingl(long double __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double acosl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __acosl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double asinl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __asinl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double atanl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __atanl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double atan2l(long double __y, long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __atan2l(long double __y, long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double cosl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long double __cosl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double sinl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long double __sinl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double tanl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long double __tanl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double coshl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __coshl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double sinhl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __sinhl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double tanhl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __tanhl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double acoshl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __acoshl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double asinhl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __asinhl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double atanhl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __atanhl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double expl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long double __expl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double frexpl(long double __x, int *__exponent)
    __attribute__((__nothrow__, __leaf__));
extern long double __frexpl(long double __x, int *__exponent)
    __attribute__((__nothrow__, __leaf__));

extern long double ldexpl(long double __x, int __exponent)
    __attribute__((__nothrow__, __leaf__));
extern long double __ldexpl(long double __x, int __exponent)
    __attribute__((__nothrow__, __leaf__));

extern long double logl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long double __logl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double log10l(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __log10l(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double modfl(long double __x, long double *__iptr)
    __attribute__((__nothrow__, __leaf__));
extern long double __modfl(long double __x, long double *__iptr)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__nonnull__(2)));
extern long double expm1l(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __expm1l(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double log1pl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __log1pl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double logbl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __logbl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double exp2l(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __exp2l(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double log2l(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __log2l(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double powl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __powl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern long double sqrtl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __sqrtl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double hypotl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __hypotl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern long double cbrtl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __cbrtl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double ceill(long double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern long double __ceill(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double fabsl(long double __x) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));
extern long double __fabsl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double floorl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double __floorl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double fmodl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __fmodl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern int isinfl(long double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int finitel(long double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern long double dreml(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __dreml(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern long double significandl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __significandl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double copysignl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double __copysignl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double nanl(const char *__tagb)
    __attribute__((__nothrow__, __leaf__));
extern long double __nanl(const char *__tagb)
    __attribute__((__nothrow__, __leaf__));
extern int isnanl(long double __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern long double j0l(long double) __attribute__((__nothrow__, __leaf__));
extern long double __j0l(long double) __attribute__((__nothrow__, __leaf__));
extern long double j1l(long double) __attribute__((__nothrow__, __leaf__));
extern long double __j1l(long double) __attribute__((__nothrow__, __leaf__));
extern long double jnl(int, long double) __attribute__((__nothrow__, __leaf__));
extern long double __jnl(int, long double)
    __attribute__((__nothrow__, __leaf__));
extern long double y0l(long double) __attribute__((__nothrow__, __leaf__));
extern long double __y0l(long double) __attribute__((__nothrow__, __leaf__));
extern long double y1l(long double) __attribute__((__nothrow__, __leaf__));
extern long double __y1l(long double) __attribute__((__nothrow__, __leaf__));
extern long double ynl(int, long double) __attribute__((__nothrow__, __leaf__));
extern long double __ynl(int, long double)
    __attribute__((__nothrow__, __leaf__));

extern long double erfl(long double) __attribute__((__nothrow__, __leaf__));
extern long double __erfl(long double) __attribute__((__nothrow__, __leaf__));
extern long double erfcl(long double) __attribute__((__nothrow__, __leaf__));
extern long double __erfcl(long double) __attribute__((__nothrow__, __leaf__));
extern long double lgammal(long double) __attribute__((__nothrow__, __leaf__));
extern long double __lgammal(long double)
    __attribute__((__nothrow__, __leaf__));

extern long double tgammal(long double) __attribute__((__nothrow__, __leaf__));
extern long double __tgammal(long double)
    __attribute__((__nothrow__, __leaf__));

extern long double gammal(long double) __attribute__((__nothrow__, __leaf__));
extern long double __gammal(long double) __attribute__((__nothrow__, __leaf__));

extern long double lgammal_r(long double, int *__signgamp)
    __attribute__((__nothrow__, __leaf__));
extern long double __lgammal_r(long double, int *__signgamp)
    __attribute__((__nothrow__, __leaf__));

extern long double rintl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __rintl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double nextafterl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __nextafterl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern long double nexttowardl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __nexttowardl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double remainderl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __remainderl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern long double scalbnl(long double __x, int __n)
    __attribute__((__nothrow__, __leaf__));
extern long double __scalbnl(long double __x, int __n)
    __attribute__((__nothrow__, __leaf__));

extern int ilogbl(long double __x) __attribute__((__nothrow__, __leaf__));
extern int __ilogbl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long double scalblnl(long double __x, long int __n)
    __attribute__((__nothrow__, __leaf__));
extern long double __scalblnl(long double __x, long int __n)
    __attribute__((__nothrow__, __leaf__));

extern long double nearbyintl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long double __nearbyintl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double roundl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double __roundl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double truncl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double __truncl(long double __x)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double remquol(long double __x, long double __y, int *__quo)
    __attribute__((__nothrow__, __leaf__));
extern long double __remquol(long double __x, long double __y, int *__quo)
    __attribute__((__nothrow__, __leaf__));

extern long int lrintl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long int __lrintl(long double __x)
    __attribute__((__nothrow__, __leaf__));
__extension__ extern long long int llrintl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long long int __llrintl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long int lroundl(long double __x) __attribute__((__nothrow__, __leaf__));
extern long int __lroundl(long double __x)
    __attribute__((__nothrow__, __leaf__));
__extension__ extern long long int llroundl(long double __x)
    __attribute__((__nothrow__, __leaf__));
extern long long int __llroundl(long double __x)
    __attribute__((__nothrow__, __leaf__));

extern long double fdiml(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));
extern long double __fdiml(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__));

extern long double fmaxl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double __fmaxl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double fminl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));
extern long double __fminl(long double __x, long double __y)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern long double fmal(long double __x, long double __y, long double __z)
    __attribute__((__nothrow__, __leaf__));
extern long double __fmal(long double __x, long double __y, long double __z)
    __attribute__((__nothrow__, __leaf__));
extern long double scalbl(long double __x, long double __n)
    __attribute__((__nothrow__, __leaf__));
extern long double __scalbl(long double __x, long double __n)
    __attribute__((__nothrow__, __leaf__));

extern int __fpclassifyf128(_Float128 __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int __signbitf128(_Float128 __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int __isinff128(_Float128 __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __finitef128(_Float128 __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int __isnanf128(_Float128 __value) __attribute__((__nothrow__, __leaf__))
__attribute__((__const__));

extern int __iseqsigf128(_Float128 __x, _Float128 __y)
    __attribute__((__nothrow__, __leaf__));

extern int __issignalingf128(_Float128 __value)
    __attribute__((__nothrow__, __leaf__)) __attribute__((__const__));

extern int signgam;

enum {
  FP_NAN = 0,
  FP_INFINITE = 1,
  FP_ZERO = 2,
  FP_SUBNORMAL = 3,
  FP_NORMAL = 4
};

typedef enum { SDL_FALSE = 0, SDL_TRUE = 1 } SDL_bool;

typedef int8_t Sint8;

typedef uint8_t Uint8;

typedef int16_t Sint16;

typedef uint16_t Uint16;

typedef int32_t Sint32;

typedef uint32_t Uint32;

typedef int64_t Sint64;

typedef uint64_t Uint64;

typedef int SDL_compile_time_assert_uint8[(sizeof(Uint8) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_sint8[(sizeof(Sint8) == 1) * 2 - 1];
typedef int SDL_compile_time_assert_uint16[(sizeof(Uint16) == 2) * 2 - 1];
typedef int SDL_compile_time_assert_sint16[(sizeof(Sint16) == 2) * 2 - 1];
typedef int SDL_compile_time_assert_uint32[(sizeof(Uint32) == 4) * 2 - 1];
typedef int SDL_compile_time_assert_sint32[(sizeof(Sint32) == 4) * 2 - 1];
typedef int SDL_compile_time_assert_uint64[(sizeof(Uint64) == 8) * 2 - 1];
typedef int SDL_compile_time_assert_sint64[(sizeof(Sint64) == 8) * 2 - 1];
typedef enum { DUMMY_ENUM_VALUE } SDL_DUMMY_ENUM;

typedef int
    SDL_compile_time_assert_enum[(sizeof(SDL_DUMMY_ENUM) == sizeof(int)) * 2 -
                                 1];

extern __attribute__((visibility("default"))) void *SDL_malloc(size_t size);
extern __attribute__((visibility("default"))) void *SDL_calloc(size_t nmemb,
                                                               size_t size);
extern __attribute__((visibility("default"))) void *SDL_realloc(void *mem,
                                                                size_t size);
extern __attribute__((visibility("default"))) void SDL_free(void *mem);

typedef void *(*SDL_malloc_func)(size_t size);
typedef void *(*SDL_calloc_func)(size_t nmemb, size_t size);
typedef void *(*SDL_realloc_func)(void *mem, size_t size);
typedef void (*SDL_free_func)(void *mem);

extern __attribute__((visibility("default"))) void SDL_GetMemoryFunctions(
    SDL_malloc_func *malloc_func, SDL_calloc_func *calloc_func,
    SDL_realloc_func *realloc_func, SDL_free_func *free_func);

extern __attribute__((visibility("default"))) int
SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func,
                       SDL_realloc_func realloc_func, SDL_free_func free_func);

extern __attribute__((visibility("default"))) int SDL_GetNumAllocations(void);

extern __attribute__((visibility("default"))) char *
SDL_getenv(const char *name);
extern __attribute__((visibility("default"))) int
SDL_setenv(const char *name, const char *value, int overwrite);

extern __attribute__((visibility("default"))) void
SDL_qsort(void *base, size_t nmemb, size_t size,
          int (*compare)(const void *, const void *));

extern __attribute__((visibility("default"))) int SDL_abs(int x);

extern __attribute__((visibility("default"))) int SDL_isalpha(int x);
extern __attribute__((visibility("default"))) int SDL_isalnum(int x);
extern __attribute__((visibility("default"))) int SDL_isblank(int x);
extern __attribute__((visibility("default"))) int SDL_iscntrl(int x);
extern __attribute__((visibility("default"))) int SDL_isdigit(int x);
extern __attribute__((visibility("default"))) int SDL_isxdigit(int x);
extern __attribute__((visibility("default"))) int SDL_ispunct(int x);
extern __attribute__((visibility("default"))) int SDL_isspace(int x);
extern __attribute__((visibility("default"))) int SDL_isupper(int x);
extern __attribute__((visibility("default"))) int SDL_islower(int x);
extern __attribute__((visibility("default"))) int SDL_isprint(int x);
extern __attribute__((visibility("default"))) int SDL_isgraph(int x);
extern __attribute__((visibility("default"))) int SDL_toupper(int x);
extern __attribute__((visibility("default"))) int SDL_tolower(int x);

extern __attribute__((visibility("default"))) Uint32
SDL_crc32(Uint32 crc, const void *data, size_t len);

extern __attribute__((visibility("default"))) void *SDL_memset(void *dst, int c,
                                                               size_t len);

__attribute__((always_inline)) static __inline__ void
SDL_memset4(void *dst, Uint32 val, size_t dwords) {
  size_t _n = (dwords + 3) / 4;
  Uint32 *_p = ((Uint32 *)(dst));
  Uint32 _val = (val);
  if (dwords == 0) {
    return;
  }
  switch (dwords % 4) {
  case 0:
    do {
      *_p++ = _val;
      __attribute__((__fallthrough__));
    case 3:
      *_p++ = _val;
      __attribute__((__fallthrough__));
    case 2:
      *_p++ = _val;
      __attribute__((__fallthrough__));
    case 1:
      *_p++ = _val;
    } while (--_n);
  }
}

extern __attribute__((visibility("default"))) void *
SDL_memcpy(void *dst, const void *src, size_t len);

extern __attribute__((visibility("default"))) void *
SDL_memmove(void *dst, const void *src, size_t len);
extern __attribute__((visibility("default"))) int
SDL_memcmp(const void *s1, const void *s2, size_t len);

extern __attribute__((visibility("default"))) size_t
SDL_wcslen(const wchar_t *wstr);
extern __attribute__((visibility("default"))) size_t
SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);
extern __attribute__((visibility("default"))) size_t
SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);
extern __attribute__((visibility("default"))) wchar_t *
SDL_wcsdup(const wchar_t *wstr);
extern __attribute__((visibility("default"))) wchar_t *
SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle);

extern __attribute__((visibility("default"))) int
SDL_wcscmp(const wchar_t *str1, const wchar_t *str2);
extern __attribute__((visibility("default"))) int
SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen);
extern __attribute__((visibility("default"))) int
SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2);
extern __attribute__((visibility("default"))) int
SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t len);

extern __attribute__((visibility("default"))) size_t
SDL_strlen(const char *str);
extern __attribute__((visibility("default"))) size_t
SDL_strlcpy(char *dst, const char *src, size_t maxlen);
extern __attribute__((visibility("default"))) size_t
SDL_utf8strlcpy(char *dst, const char *src, size_t dst_bytes);
extern __attribute__((visibility("default"))) size_t
SDL_strlcat(char *dst, const char *src, size_t maxlen);
extern __attribute__((visibility("default"))) char *SDL_strdup(const char *str);
extern __attribute__((visibility("default"))) char *SDL_strrev(char *str);
extern __attribute__((visibility("default"))) char *SDL_strupr(char *str);
extern __attribute__((visibility("default"))) char *SDL_strlwr(char *str);
extern __attribute__((visibility("default"))) char *SDL_strchr(const char *str,
                                                               int c);
extern __attribute__((visibility("default"))) char *SDL_strrchr(const char *str,
                                                                int c);
extern __attribute__((visibility("default"))) char *
SDL_strstr(const char *haystack, const char *needle);
extern __attribute__((visibility("default"))) char *
SDL_strtokr(char *s1, const char *s2, char **saveptr);
extern __attribute__((visibility("default"))) size_t
SDL_utf8strlen(const char *str);

extern __attribute__((visibility("default"))) char *
SDL_itoa(int value, char *str, int radix);
extern __attribute__((visibility("default"))) char *
SDL_uitoa(unsigned int value, char *str, int radix);
extern __attribute__((visibility("default"))) char *
SDL_ltoa(long value, char *str, int radix);
extern __attribute__((visibility("default"))) char *
SDL_ultoa(unsigned long value, char *str, int radix);
extern __attribute__((visibility("default"))) char *
SDL_lltoa(Sint64 value, char *str, int radix);
extern __attribute__((visibility("default"))) char *
SDL_ulltoa(Uint64 value, char *str, int radix);

extern __attribute__((visibility("default"))) int SDL_atoi(const char *str);
extern __attribute__((visibility("default"))) double SDL_atof(const char *str);
extern __attribute__((visibility("default"))) long
SDL_strtol(const char *str, char **endp, int base);
extern __attribute__((visibility("default"))) unsigned long
SDL_strtoul(const char *str, char **endp, int base);
extern __attribute__((visibility("default"))) Sint64
SDL_strtoll(const char *str, char **endp, int base);
extern __attribute__((visibility("default"))) Uint64
SDL_strtoull(const char *str, char **endp, int base);
extern __attribute__((visibility("default"))) double SDL_strtod(const char *str,
                                                                char **endp);

extern __attribute__((visibility("default"))) int SDL_strcmp(const char *str1,
                                                             const char *str2);
extern __attribute__((visibility("default"))) int
SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
extern __attribute__((visibility("default"))) int
SDL_strcasecmp(const char *str1, const char *str2);
extern __attribute__((visibility("default"))) int
SDL_strncasecmp(const char *str1, const char *str2, size_t len);

extern __attribute__((visibility("default"))) int
SDL_sscanf(const char *text, const char *fmt, ...)
    __attribute__((format(__scanf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) int
SDL_vsscanf(const char *text, const char *fmt, va_list ap);
extern __attribute__((visibility("default"))) int
SDL_snprintf(char *text, size_t maxlen, const char *fmt, ...)
    __attribute__((format(__printf__, 3, 3 + 1)));
extern __attribute__((visibility("default"))) int
SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);
extern __attribute__((visibility("default"))) int
SDL_asprintf(char **strp, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) int
SDL_vasprintf(char **strp, const char *fmt, va_list ap);
extern __attribute__((visibility("default"))) double SDL_acos(double x);
extern __attribute__((visibility("default"))) float SDL_acosf(float x);
extern __attribute__((visibility("default"))) double SDL_asin(double x);
extern __attribute__((visibility("default"))) float SDL_asinf(float x);
extern __attribute__((visibility("default"))) double SDL_atan(double x);
extern __attribute__((visibility("default"))) float SDL_atanf(float x);
extern __attribute__((visibility("default"))) double SDL_atan2(double y,
                                                               double x);
extern __attribute__((visibility("default"))) float SDL_atan2f(float y,
                                                               float x);
extern __attribute__((visibility("default"))) double SDL_ceil(double x);
extern __attribute__((visibility("default"))) float SDL_ceilf(float x);
extern __attribute__((visibility("default"))) double SDL_copysign(double x,
                                                                  double y);
extern __attribute__((visibility("default"))) float SDL_copysignf(float x,
                                                                  float y);
extern __attribute__((visibility("default"))) double SDL_cos(double x);
extern __attribute__((visibility("default"))) float SDL_cosf(float x);
extern __attribute__((visibility("default"))) double SDL_exp(double x);
extern __attribute__((visibility("default"))) float SDL_expf(float x);
extern __attribute__((visibility("default"))) double SDL_fabs(double x);
extern __attribute__((visibility("default"))) float SDL_fabsf(float x);
extern __attribute__((visibility("default"))) double SDL_floor(double x);
extern __attribute__((visibility("default"))) float SDL_floorf(float x);
extern __attribute__((visibility("default"))) double SDL_trunc(double x);
extern __attribute__((visibility("default"))) float SDL_truncf(float x);
extern __attribute__((visibility("default"))) double SDL_fmod(double x,
                                                              double y);
extern __attribute__((visibility("default"))) float SDL_fmodf(float x, float y);
extern __attribute__((visibility("default"))) double SDL_log(double x);
extern __attribute__((visibility("default"))) float SDL_logf(float x);
extern __attribute__((visibility("default"))) double SDL_log10(double x);
extern __attribute__((visibility("default"))) float SDL_log10f(float x);
extern __attribute__((visibility("default"))) double SDL_pow(double x,
                                                             double y);
extern __attribute__((visibility("default"))) float SDL_powf(float x, float y);
extern __attribute__((visibility("default"))) double SDL_round(double x);
extern __attribute__((visibility("default"))) float SDL_roundf(float x);
extern __attribute__((visibility("default"))) long SDL_lround(double x);
extern __attribute__((visibility("default"))) long SDL_lroundf(float x);
extern __attribute__((visibility("default"))) double SDL_scalbn(double x,
                                                                int n);
extern __attribute__((visibility("default"))) float SDL_scalbnf(float x, int n);
extern __attribute__((visibility("default"))) double SDL_sin(double x);
extern __attribute__((visibility("default"))) float SDL_sinf(float x);
extern __attribute__((visibility("default"))) double SDL_sqrt(double x);
extern __attribute__((visibility("default"))) float SDL_sqrtf(float x);
extern __attribute__((visibility("default"))) double SDL_tan(double x);
extern __attribute__((visibility("default"))) float SDL_tanf(float x);

typedef struct _SDL_iconv_t *SDL_iconv_t;
extern __attribute__((visibility("default"))) SDL_iconv_t
SDL_iconv_open(const char *tocode, const char *fromcode);
extern __attribute__((visibility("default"))) int
SDL_iconv_close(SDL_iconv_t cd);
extern __attribute__((visibility("default"))) size_t
SDL_iconv(SDL_iconv_t cd, const char **inbuf, size_t *inbytesleft,
          char **outbuf, size_t *outbytesleft);

extern __attribute__((visibility("default"))) char *
SDL_iconv_string(const char *tocode, const char *fromcode, const char *inbuf,
                 size_t inbytesleft);
__attribute__((always_inline)) static __inline__ void *
SDL_memcpy4(void *dst, const void *src, size_t dwords) {
  return SDL_memcpy(dst, src, dwords * 4);
}

typedef int (*SDL_main_func)(int argc, char *argv[]);
extern int SDL_main(int argc, char *argv[]);
extern __attribute__((visibility("default"))) void SDL_SetMainReady(void);

typedef enum {
  SDL_ASSERTION_RETRY,
  SDL_ASSERTION_BREAK,
  SDL_ASSERTION_ABORT,
  SDL_ASSERTION_IGNORE,
  SDL_ASSERTION_ALWAYS_IGNORE
} SDL_AssertState;

typedef struct SDL_AssertData {
  int always_ignore;
  unsigned int trigger_count;
  const char *condition;
  const char *filename;
  int linenum;
  const char *function;
  const struct SDL_AssertData *next;
} SDL_AssertData;

extern __attribute__((visibility("default"))) SDL_AssertState
SDL_ReportAssertion(SDL_AssertData *, const char *, const char *, int);
typedef SDL_AssertState (*SDL_AssertionHandler)(const SDL_AssertData *data,
                                                void *userdata);
extern __attribute__((visibility("default"))) void
SDL_SetAssertionHandler(SDL_AssertionHandler handler, void *userdata);
extern __attribute__((visibility("default"))) SDL_AssertionHandler
SDL_GetDefaultAssertionHandler(void);
extern __attribute__((visibility("default"))) SDL_AssertionHandler
SDL_GetAssertionHandler(void **puserdata);
extern __attribute__((visibility("default"))) const SDL_AssertData *
SDL_GetAssertionReport(void);
extern __attribute__((visibility("default"))) void
SDL_ResetAssertionReport(void);

typedef int SDL_SpinLock;
extern __attribute__((visibility("default"))) SDL_bool
SDL_AtomicTryLock(SDL_SpinLock *lock);
extern __attribute__((visibility("default"))) void
SDL_AtomicLock(SDL_SpinLock *lock);
extern __attribute__((visibility("default"))) void
SDL_AtomicUnlock(SDL_SpinLock *lock);
extern __attribute__((visibility("default"))) void
SDL_MemoryBarrierReleaseFunction(void);
extern __attribute__((visibility("default"))) void
SDL_MemoryBarrierAcquireFunction(void);

typedef struct {
  int value;
} SDL_atomic_t;
extern __attribute__((visibility("default"))) SDL_bool
SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);
extern __attribute__((visibility("default"))) int SDL_AtomicSet(SDL_atomic_t *a,
                                                                int v);
extern __attribute__((visibility("default"))) int
SDL_AtomicGet(SDL_atomic_t *a);
extern __attribute__((visibility("default"))) int SDL_AtomicAdd(SDL_atomic_t *a,
                                                                int v);

extern __attribute__((visibility("default"))) SDL_bool
SDL_AtomicCASPtr(void **a, void *oldval, void *newval);
extern __attribute__((visibility("default"))) void *SDL_AtomicSetPtr(void **a,
                                                                     void *v);
extern __attribute__((visibility("default"))) void *SDL_AtomicGetPtr(void **a);

extern __attribute__((visibility("default"))) int SDL_SetError(const char *fmt,
                                                               ...)
    __attribute__((format(__printf__, 1, 1 + 1)));
extern __attribute__((visibility("default"))) const char *SDL_GetError(void);
extern __attribute__((visibility("default"))) char *
SDL_GetErrorMsg(char *errstr, int maxlen);
extern __attribute__((visibility("default"))) void SDL_ClearError(void);
typedef enum {
  SDL_ENOMEM,
  SDL_EFREAD,
  SDL_EFWRITE,
  SDL_EFSEEK,
  SDL_UNSUPPORTED,
  SDL_LASTERROR
} SDL_errorcode;

extern __attribute__((visibility("default"))) int SDL_Error(SDL_errorcode code);

__attribute__((always_inline)) static __inline__ float SDL_SwapFloat(float x) {
  union {
    float f;
    Uint32 ui32;
  } swapper;
  swapper.f = x;
  swapper.ui32 = __builtin_bswap32(swapper.ui32);
  return swapper.f;
}

struct SDL_mutex;
typedef struct SDL_mutex SDL_mutex;
extern __attribute__((visibility("default"))) SDL_mutex *SDL_CreateMutex(void);
extern __attribute__((visibility("default"))) int
SDL_LockMutex(SDL_mutex *mutex);
extern __attribute__((visibility("default"))) int
SDL_TryLockMutex(SDL_mutex *mutex);
extern __attribute__((visibility("default"))) int
SDL_UnlockMutex(SDL_mutex *mutex);
extern __attribute__((visibility("default"))) void
SDL_DestroyMutex(SDL_mutex *mutex);
struct SDL_semaphore;
typedef struct SDL_semaphore SDL_sem;
extern __attribute__((visibility("default"))) SDL_sem *
SDL_CreateSemaphore(Uint32 initial_value);
extern __attribute__((visibility("default"))) void
SDL_DestroySemaphore(SDL_sem *sem);
extern __attribute__((visibility("default"))) int SDL_SemWait(SDL_sem *sem);
extern __attribute__((visibility("default"))) int SDL_SemTryWait(SDL_sem *sem);
extern __attribute__((visibility("default"))) int
SDL_SemWaitTimeout(SDL_sem *sem, Uint32 ms);
extern __attribute__((visibility("default"))) int SDL_SemPost(SDL_sem *sem);
extern __attribute__((visibility("default"))) Uint32 SDL_SemValue(SDL_sem *sem);
struct SDL_cond;
typedef struct SDL_cond SDL_cond;
extern __attribute__((visibility("default"))) SDL_cond *SDL_CreateCond(void);
extern __attribute__((visibility("default"))) void
SDL_DestroyCond(SDL_cond *cond);
extern __attribute__((visibility("default"))) int
SDL_CondSignal(SDL_cond *cond);
extern __attribute__((visibility("default"))) int
SDL_CondBroadcast(SDL_cond *cond);
extern __attribute__((visibility("default"))) int
SDL_CondWait(SDL_cond *cond, SDL_mutex *mutex);
extern __attribute__((visibility("default"))) int
SDL_CondWaitTimeout(SDL_cond *cond, SDL_mutex *mutex, Uint32 ms);

struct SDL_Thread;
typedef struct SDL_Thread SDL_Thread;

typedef unsigned long SDL_threadID;

typedef unsigned int SDL_TLSID;
typedef enum {
  SDL_THREAD_PRIORITY_LOW,
  SDL_THREAD_PRIORITY_NORMAL,
  SDL_THREAD_PRIORITY_HIGH,
  SDL_THREAD_PRIORITY_TIME_CRITICAL
} SDL_ThreadPriority;

typedef int (*SDL_ThreadFunction)(void *data);
extern __attribute__((visibility("default"))) SDL_Thread *
SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);
extern __attribute__((visibility("default"))) SDL_Thread *
SDL_CreateThreadWithStackSize(SDL_ThreadFunction fn, const char *name,
                              const size_t stacksize, void *data);
extern __attribute__((visibility("default"))) const char *
SDL_GetThreadName(SDL_Thread *thread);
extern __attribute__((visibility("default"))) SDL_threadID SDL_ThreadID(void);
extern __attribute__((visibility("default"))) SDL_threadID
SDL_GetThreadID(SDL_Thread *thread);
extern __attribute__((visibility("default"))) int
SDL_SetThreadPriority(SDL_ThreadPriority priority);
extern __attribute__((visibility("default"))) void
SDL_WaitThread(SDL_Thread *thread, int *status);
extern __attribute__((visibility("default"))) void
SDL_DetachThread(SDL_Thread *thread);
extern __attribute__((visibility("default"))) SDL_TLSID SDL_TLSCreate(void);
extern __attribute__((visibility("default"))) void *SDL_TLSGet(SDL_TLSID id);
extern __attribute__((visibility("default"))) int
SDL_TLSSet(SDL_TLSID id, const void *value, void (*destructor)(void *));

extern __attribute__((visibility("default"))) void SDL_TLSCleanup(void);

typedef struct SDL_RWops {

  Sint64 (*size)(struct SDL_RWops *context);

  Sint64 (*seek)(struct SDL_RWops *context, Sint64 offset, int whence);

  size_t (*read)(struct SDL_RWops *context, void *ptr, size_t size,
                 size_t maxnum);

  size_t (*write)(struct SDL_RWops *context, const void *ptr, size_t size,
                  size_t num);

  int (*close)(struct SDL_RWops *context);

  Uint32 type;
  union {
    struct {
      SDL_bool autoclose;
      FILE *fp;
    } stdio;

    struct {
      Uint8 *base;
      Uint8 *here;
      Uint8 *stop;
    } mem;
    struct {
      void *data1;
      void *data2;
    } unknown;
  } hidden;

} SDL_RWops;
extern __attribute__((visibility("default"))) SDL_RWops *
SDL_RWFromFile(const char *file, const char *mode);

extern __attribute__((visibility("default"))) SDL_RWops *
SDL_RWFromFP(FILE *fp, SDL_bool autoclose);
extern __attribute__((visibility("default"))) SDL_RWops *
SDL_RWFromMem(void *mem, int size);
extern __attribute__((visibility("default"))) SDL_RWops *
SDL_RWFromConstMem(const void *mem, int size);
extern __attribute__((visibility("default"))) SDL_RWops *SDL_AllocRW(void);
extern __attribute__((visibility("default"))) void SDL_FreeRW(SDL_RWops *area);

extern __attribute__((visibility("default"))) Sint64
SDL_RWsize(SDL_RWops *context);
extern __attribute__((visibility("default"))) Sint64
SDL_RWseek(SDL_RWops *context, Sint64 offset, int whence);
extern __attribute__((visibility("default"))) Sint64
SDL_RWtell(SDL_RWops *context);
extern __attribute__((visibility("default"))) size_t
SDL_RWread(SDL_RWops *context, void *ptr, size_t size, size_t maxnum);
extern __attribute__((visibility("default"))) size_t
SDL_RWwrite(SDL_RWops *context, const void *ptr, size_t size, size_t num);
extern __attribute__((visibility("default"))) int
SDL_RWclose(SDL_RWops *context);
extern __attribute__((visibility("default"))) void *
SDL_LoadFile_RW(SDL_RWops *src, size_t *datasize, int freesrc);
extern __attribute__((visibility("default"))) void *
SDL_LoadFile(const char *file, size_t *datasize);
extern __attribute__((visibility("default"))) Uint8 SDL_ReadU8(SDL_RWops *src);
extern __attribute__((visibility("default"))) Uint16
SDL_ReadLE16(SDL_RWops *src);
extern __attribute__((visibility("default"))) Uint16
SDL_ReadBE16(SDL_RWops *src);
extern __attribute__((visibility("default"))) Uint32
SDL_ReadLE32(SDL_RWops *src);
extern __attribute__((visibility("default"))) Uint32
SDL_ReadBE32(SDL_RWops *src);
extern __attribute__((visibility("default"))) Uint64
SDL_ReadLE64(SDL_RWops *src);
extern __attribute__((visibility("default"))) Uint64
SDL_ReadBE64(SDL_RWops *src);
extern __attribute__((visibility("default"))) size_t SDL_WriteU8(SDL_RWops *dst,
                                                                 Uint8 value);
extern __attribute__((visibility("default"))) size_t
SDL_WriteLE16(SDL_RWops *dst, Uint16 value);
extern __attribute__((visibility("default"))) size_t
SDL_WriteBE16(SDL_RWops *dst, Uint16 value);
extern __attribute__((visibility("default"))) size_t
SDL_WriteLE32(SDL_RWops *dst, Uint32 value);
extern __attribute__((visibility("default"))) size_t
SDL_WriteBE32(SDL_RWops *dst, Uint32 value);
extern __attribute__((visibility("default"))) size_t
SDL_WriteLE64(SDL_RWops *dst, Uint64 value);
extern __attribute__((visibility("default"))) size_t
SDL_WriteBE64(SDL_RWops *dst, Uint64 value);

typedef Uint16 SDL_AudioFormat;

typedef void (*SDL_AudioCallback)(void *userdata, Uint8 *stream, int len);
typedef struct SDL_AudioSpec {
  int freq;
  SDL_AudioFormat format;
  Uint8 channels;
  Uint8 silence;
  Uint16 samples;
  Uint16 padding;
  Uint32 size;
  SDL_AudioCallback callback;
  void *userdata;
} SDL_AudioSpec;

struct SDL_AudioCVT;
typedef void (*SDL_AudioFilter)(struct SDL_AudioCVT *cvt,
                                SDL_AudioFormat format);

typedef struct SDL_AudioCVT {
  int needed;
  SDL_AudioFormat src_format;
  SDL_AudioFormat dst_format;
  double rate_incr;
  Uint8 *buf;
  int len;
  int len_cvt;
  int len_mult;
  double len_ratio;
  SDL_AudioFilter filters[9 + 1];
  int filter_index;
} __attribute__((packed)) SDL_AudioCVT;
extern __attribute__((visibility("default"))) int SDL_GetNumAudioDrivers(void);
extern __attribute__((visibility("default"))) const char *
SDL_GetAudioDriver(int index);
extern __attribute__((visibility("default"))) int
SDL_AudioInit(const char *driver_name);
extern __attribute__((visibility("default"))) void SDL_AudioQuit(void);
extern __attribute__((visibility("default"))) const char *
SDL_GetCurrentAudioDriver(void);
extern __attribute__((visibility("default"))) int
SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained);
typedef Uint32 SDL_AudioDeviceID;
extern __attribute__((visibility("default"))) int
SDL_GetNumAudioDevices(int iscapture);
extern __attribute__((visibility("default"))) const char *
SDL_GetAudioDeviceName(int index, int iscapture);
extern __attribute__((visibility("default"))) int
SDL_GetAudioDeviceSpec(int index, int iscapture, SDL_AudioSpec *spec);
extern __attribute__((visibility("default"))) SDL_AudioDeviceID
SDL_OpenAudioDevice(const char *device, int iscapture,
                    const SDL_AudioSpec *desired, SDL_AudioSpec *obtained,
                    int allowed_changes);
typedef enum {
  SDL_AUDIO_STOPPED = 0,
  SDL_AUDIO_PLAYING,
  SDL_AUDIO_PAUSED
} SDL_AudioStatus;
extern __attribute__((visibility("default"))) SDL_AudioStatus
SDL_GetAudioStatus(void);
extern __attribute__((visibility("default"))) SDL_AudioStatus
SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
extern __attribute__((visibility("default"))) void SDL_PauseAudio(int pause_on);
extern __attribute__((visibility("default"))) void
SDL_PauseAudioDevice(SDL_AudioDeviceID dev, int pause_on);
extern __attribute__((visibility("default"))) SDL_AudioSpec *
SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec,
               Uint8 **audio_buf, Uint32 *audio_len);

extern __attribute__((visibility("default"))) void
SDL_FreeWAV(Uint8 *audio_buf);
extern __attribute__((visibility("default"))) int
SDL_BuildAudioCVT(SDL_AudioCVT *cvt, SDL_AudioFormat src_format,
                  Uint8 src_channels, int src_rate, SDL_AudioFormat dst_format,
                  Uint8 dst_channels, int dst_rate);
extern __attribute__((visibility("default"))) int
SDL_ConvertAudio(SDL_AudioCVT *cvt);
struct _SDL_AudioStream;
typedef struct _SDL_AudioStream SDL_AudioStream;
extern __attribute__((visibility("default"))) SDL_AudioStream *
SDL_NewAudioStream(const SDL_AudioFormat src_format, const Uint8 src_channels,
                   const int src_rate, const SDL_AudioFormat dst_format,
                   const Uint8 dst_channels, const int dst_rate);
extern __attribute__((visibility("default"))) int
SDL_AudioStreamPut(SDL_AudioStream *stream, const void *buf, int len);
extern __attribute__((visibility("default"))) int
SDL_AudioStreamGet(SDL_AudioStream *stream, void *buf, int len);
extern __attribute__((visibility("default"))) int
SDL_AudioStreamAvailable(SDL_AudioStream *stream);
extern __attribute__((visibility("default"))) int
SDL_AudioStreamFlush(SDL_AudioStream *stream);
extern __attribute__((visibility("default"))) void
SDL_AudioStreamClear(SDL_AudioStream *stream);
extern __attribute__((visibility("default"))) void
SDL_FreeAudioStream(SDL_AudioStream *stream);

extern __attribute__((visibility("default"))) void
SDL_MixAudio(Uint8 *dst, const Uint8 *src, Uint32 len, int volume);
extern __attribute__((visibility("default"))) void
SDL_MixAudioFormat(Uint8 *dst, const Uint8 *src, SDL_AudioFormat format,
                   Uint32 len, int volume);
extern __attribute__((visibility("default"))) int
SDL_QueueAudio(SDL_AudioDeviceID dev, const void *data, Uint32 len);
extern __attribute__((visibility("default"))) Uint32
SDL_DequeueAudio(SDL_AudioDeviceID dev, void *data, Uint32 len);
extern __attribute__((visibility("default"))) Uint32
SDL_GetQueuedAudioSize(SDL_AudioDeviceID dev);
extern __attribute__((visibility("default"))) void
SDL_ClearQueuedAudio(SDL_AudioDeviceID dev);
extern __attribute__((visibility("default"))) void SDL_LockAudio(void);
extern __attribute__((visibility("default"))) void
SDL_LockAudioDevice(SDL_AudioDeviceID dev);
extern __attribute__((visibility("default"))) void SDL_UnlockAudio(void);
extern __attribute__((visibility("default"))) void
SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
extern __attribute__((visibility("default"))) void SDL_CloseAudio(void);
extern __attribute__((visibility("default"))) void
SDL_CloseAudioDevice(SDL_AudioDeviceID dev);

extern __attribute__((visibility("default"))) int
SDL_SetClipboardText(const char *text);
extern __attribute__((visibility("default"))) char *SDL_GetClipboardText(void);
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasClipboardText(void);

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsfd(int __X) {
  return __builtin_ctz(__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsrd(int __X) {
  return __builtin_ia32_bsrsi(__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bswapd(int __X) {
  return __builtin_bswap32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32b(unsigned int __C, unsigned char __V) {
  return __builtin_ia32_crc32qi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32w(unsigned int __C, unsigned short __V) {
  return __builtin_ia32_crc32hi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32d(unsigned int __C, unsigned int __V) {
  return __builtin_ia32_crc32si(__C, __V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __popcntd(unsigned int __X) {
  return __builtin_popcount(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rdpmc(int __S) {
  return __builtin_ia32_rdpmc(__S);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rdtsc(void) {
  return __builtin_ia32_rdtsc();
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rdtscp(unsigned int *__A) {
  return __builtin_ia32_rdtscp(__A);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rolb(unsigned char __X, int __C) {
  return __builtin_ia32_rolqi(__X, __C);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rolw(unsigned short __X, int __C) {
  return __builtin_ia32_rolhi(__X, __C);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rold(unsigned int __X, int __C) {
  __C &= 31;
  return (__X << __C) | (__X >> (-__C & 31));
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rorb(unsigned char __X, int __C) {
  return __builtin_ia32_rorqi(__X, __C);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rorw(unsigned short __X, int __C) {
  return __builtin_ia32_rorhi(__X, __C);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rord(unsigned int __X, int __C) {
  __C &= 31;
  return (__X >> __C) | (__X << (-__C & 31));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __pause(void) {
  __builtin_ia32_pause();
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsfq(long long __X) {
  return __builtin_ctzll(__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bsrq(long long __X) {
  return __builtin_ia32_bsrdi(__X);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bswapq(long long __X) {
  return __builtin_bswap64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __crc32q(unsigned long long __C, unsigned long long __V) {
  return __builtin_ia32_crc32di(__C, __V);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __popcntq(unsigned long long __X) {
  return __builtin_popcountll(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rolq(unsigned long long __X, int __C) {
  __C &= 63;
  return (__X << __C) | (__X >> (-__C & 63));
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __rorq(unsigned long long __X, int __C) {
  __C &= 63;
  return (__X >> __C) | (__X << (-__C & 63));
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __readeflags(void) {
  return __builtin_ia32_readeflags_u64();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __writeeflags(unsigned long long __X) {
  __builtin_ia32_writeeflags_u64(__X);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _subborrow_u32(unsigned char __CF, unsigned int __X, unsigned int __Y,
                   unsigned int *__P) {
  return __builtin_ia32_sbb_u32(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarry_u32(unsigned char __CF, unsigned int __X, unsigned int __Y,
                  unsigned int *__P) {
  return __builtin_ia32_addcarryx_u32(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarryx_u32(unsigned char __CF, unsigned int __X, unsigned int __Y,
                   unsigned int *__P) {
  return __builtin_ia32_addcarryx_u32(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _subborrow_u64(unsigned char __CF, unsigned long long __X,
                   unsigned long long __Y, unsigned long long *__P) {
  return __builtin_ia32_sbb_u64(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarry_u64(unsigned char __CF, unsigned long long __X,
                  unsigned long long __Y, unsigned long long *__P) {
  return __builtin_ia32_addcarryx_u64(__CF, __X, __Y, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _addcarryx_u64(unsigned char __CF, unsigned long long __X,
                   unsigned long long __Y, unsigned long long *__P) {
  return __builtin_ia32_addcarryx_u64(__CF, __X, __Y, __P);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzcnt_u16(unsigned short __X) {
  return __builtin_ia32_tzcnt_u16(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __andn_u32(unsigned int __X, unsigned int __Y) {
  return ~__X & __Y;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bextr_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_bextr_u32(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bextr_u32(unsigned int __X, unsigned int __Y, unsigned __Z) {
  return __builtin_ia32_bextr_u32(__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsi_u32(unsigned int __X) {
  return __X & -__X;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsi_u32(unsigned int __X) {
  return __blsi_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsmsk_u32(unsigned int __X) {
  return __X ^ (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsmsk_u32(unsigned int __X) {
  return __blsmsk_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsr_u32(unsigned int __X) {
  return __X & (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsr_u32(unsigned int __X) {
  return __blsr_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzcnt_u32(unsigned int __X) {
  return __builtin_ia32_tzcnt_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tzcnt_u32(unsigned int __X) {
  return __builtin_ia32_tzcnt_u32(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __andn_u64(unsigned long long __X, unsigned long long __Y) {
  return ~__X & __Y;
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bextr_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_bextr_u64(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bextr_u64(unsigned long long __X, unsigned int __Y, unsigned int __Z) {
  return __builtin_ia32_bextr_u64(__X, ((__Y & 0xff) | ((__Z & 0xff) << 8)));
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsi_u64(unsigned long long __X) {
  return __X & -__X;
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsi_u64(unsigned long long __X) {
  return __blsi_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsmsk_u64(unsigned long long __X) {
  return __X ^ (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsmsk_u64(unsigned long long __X) {
  return __blsmsk_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsr_u64(unsigned long long __X) {
  return __X & (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _blsr_u64(unsigned long long __X) {
  return __blsr_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzcnt_u64(unsigned long long __X) {
  return __builtin_ia32_tzcnt_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tzcnt_u64(unsigned long long __X) {
  return __builtin_ia32_tzcnt_u64(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bzhi_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_bzhi_si(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pdep_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_pdep_si(__X, __Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pext_u32(unsigned int __X, unsigned int __Y) {
  return __builtin_ia32_pext_si(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _bzhi_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_bzhi_di(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pdep_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_pdep_di(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pext_u64(unsigned long long __X, unsigned long long __Y) {
  return __builtin_ia32_pext_di(__X, __Y);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mulx_u64(unsigned long long __X, unsigned long long __Y,
              unsigned long long *__P) {
  unsigned __int128 __res = (unsigned __int128)__X * __Y;
  *__P = (unsigned long long)(__res >> 64);
  return (unsigned long long)__res;
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _get_ssp(void) {
  return __builtin_ia32_rdsspq();
}
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _inc_ssp(unsigned int __B) {

  __builtin_ia32_incsspq((unsigned long long)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _saveprevssp(void) {
  __builtin_ia32_saveprevssp();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rstorssp(void *__B) {
  __builtin_ia32_rstorssp(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrssd(unsigned int __B, void *__C) {
  __builtin_ia32_wrssd(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrssq(unsigned long long __B, void *__C) {
  __builtin_ia32_wrssq(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrussd(unsigned int __B, void *__C) {
  __builtin_ia32_wrussd(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrussq(unsigned long long __B, void *__C) {
  __builtin_ia32_wrussq(__B, __C);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _setssbsy(void) {
  __builtin_ia32_setssbsy();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _clrssbsy(void *__B) {
  __builtin_ia32_clrssbsy(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cldemote(void *__A) {
  __builtin_ia32_cldemote(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clflushopt(void *__A) {
  __builtin_ia32_clflushopt(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clwb(void *__A) {
  __builtin_ia32_clwb(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clzero(void *__I) {
  __builtin_ia32_clzero(__I);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enqcmd(void *__P, const void *__Q) {
  return __builtin_ia32_enqcmd(__P, __Q);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enqcmds(void *__P, const void *__Q) {
  return __builtin_ia32_enqcmds(__P, __Q);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxsave(void *__P) {
  __builtin_ia32_fxsave(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxrstor(void *__P) {
  __builtin_ia32_fxrstor(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxsave64(void *__P) {
  __builtin_ia32_fxsave64(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _fxrstor64(void *__P) {
  __builtin_ia32_fxrstor64(__P);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lzcnt16(unsigned short __X) {
  return __builtin_ia32_lzcnt_u16(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lzcnt32(unsigned int __X) {
  return __builtin_ia32_lzcnt_u32(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _lzcnt_u32(unsigned int __X) {
  return __builtin_ia32_lzcnt_u32(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lzcnt64(unsigned long long __X) {
  return __builtin_ia32_lzcnt_u64(__X);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _lzcnt_u64(unsigned long long __X) {
  return __builtin_ia32_lzcnt_u64(__X);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __llwpcb(void *__pcbAddress) {
  __builtin_ia32_llwpcb(__pcbAddress);
}

extern __inline void *__attribute__((__gnu_inline__, __always_inline__,
                                     __artificial__)) __slwpcb(void) {
  return __builtin_ia32_slwpcb();
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
__lwpval32(unsigned int __data2, unsigned int __data1, unsigned int __flags) {
  __builtin_ia32_lwpval32(__data2, __data1, __flags);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lwpval64(unsigned long long __data2, unsigned int __data1,
               unsigned int __flags) {
  __builtin_ia32_lwpval64(__data2, __data1, __flags);
}
extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
__lwpins32(unsigned int __data2, unsigned int __data1, unsigned int __flags) {
  return __builtin_ia32_lwpins32(__data2, __data1, __flags);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __lwpins64(unsigned long long __data2, unsigned int __data1,
               unsigned int __flags) {
  return __builtin_ia32_lwpins64(__data2, __data1, __flags);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _directstoreu_u32(void *__P, unsigned int __A) {
  __builtin_ia32_directstoreu_u32((unsigned int *)__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _directstoreu_u64(void *__P, unsigned long long __A) {
  __builtin_ia32_directstoreu_u64((unsigned long long *)__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _movdir64b(void *__P, const void *__Q) {
  __builtin_ia32_movdir64b(__P, __Q);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_monitor(void const *__P, unsigned int __E, unsigned int __H) {
  __builtin_ia32_monitor(__P, __E, __H);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mwait(unsigned int __E, unsigned int __H) {
  __builtin_ia32_mwait(__E, __H);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_monitorx(void const *__P, unsigned int __E, unsigned int __H) {
  __builtin_ia32_monitorx(__P, __E, __H);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mwaitx(unsigned int __E, unsigned int __H, unsigned int __C) {
  __builtin_ia32_mwaitx(__E, __H, __C);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _pconfig_u32(const unsigned int __L, size_t __D[]) {
  enum __pconfig_type {
    __PCONFIG_KEY_PROGRAM = 0x01,
  };

  unsigned int __R = 0;

  if (!__builtin_constant_p(__L))
    __asm__ __volatile__("pconfig\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__L) {
    case __PCONFIG_KEY_PROGRAM:
      __asm__ __volatile__("pconfig\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0])
                           : "cc");
      break;
    default:
      __asm__ __volatile__("pconfig\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_u32(unsigned int __X) {
  return __builtin_popcount(__X);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_u64(unsigned long long __X) {
  return __builtin_popcountll(__X);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdpkru_u32(void) {
  return __builtin_ia32_rdpkru();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wrpkru(unsigned int __key) {
  __builtin_ia32_wrpkru(__key);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdseed16_step(unsigned short *__p) {
  return __builtin_ia32_rdseed_hi_step(__p);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdseed32_step(unsigned int *__p) {
  return __builtin_ia32_rdseed_si_step(__p);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdseed64_step(unsigned long long *__p) {
  return __builtin_ia32_rdseed_di_step(__p);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xbegin(void) {
  return __builtin_ia32_xbegin();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xend(void) {
  __builtin_ia32_xend();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xabort(const unsigned int __imm) {
  __builtin_ia32_xabort(__imm);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _serialize(void) {
  __builtin_ia32_serialize();
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _encls_u32(const unsigned int __L, size_t __D[]) {
  enum __encls_type {
    __SGX_ECREATE = 0x00,
    __SGX_EADD = 0x01,
    __SGX_EINIT = 0x02,
    __SGX_EREMOVE = 0x03,
    __SGX_EDBGRD = 0x04,
    __SGX_EDBGWR = 0x05,
    __SGX_EEXTEND = 0x06,
    __SGX_ELDB = 0x07,
    __SGX_ELDU = 0x08,
    __SGX_EBLOCK = 0x09,
    __SGX_EPA = 0x0A,
    __SGX_EWB = 0x0B,
    __SGX_ETRACK = 0x0C,
    __SGX_EAUG = 0x0D,
    __SGX_EMODPR = 0x0E,
    __SGX_EMODT = 0x0F,
    __SGX_ERDINFO = 0x10,
    __SGX_ETRACKC = 0x11,
    __SGX_ELDBC = 0x12,
    __SGX_ELDUC = 0x13
  };
  enum __encls_type __T = (enum __encls_type)__L;
  unsigned int __R = 0;
  if (!__builtin_constant_p(__T))
    __asm__ __volatile__("encls\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__T) {
    case __SGX_ECREATE:
    case __SGX_EADD:
    case __SGX_EDBGWR:
    case __SGX_EEXTEND:
    case __SGX_EPA:
    case __SGX_EMODPR:
    case __SGX_EMODT:
    case __SGX_EAUG:
    case __SGX_ERDINFO:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EINIT:
    case __SGX_ELDB:
    case __SGX_ELDU:
    case __SGX_EWB:
    case __SGX_ELDBC:
    case __SGX_ELDUC:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
      break;
    case __SGX_EREMOVE:
    case __SGX_EBLOCK:
    case __SGX_ETRACK:
    case __SGX_ETRACKC:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R)
                           : "a"(__L), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EDBGRD:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R), "=b"(__D[0])
                           : "a"(__L), "c"(__D[1]));
      break;
    default:
      __asm__ __volatile__("encls\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enclu_u32(const unsigned int __L, size_t __D[]) {
  enum __enclu_type {
    __SGX_EREPORT = 0x00,
    __SGX_EGETKEY = 0x01,
    __SGX_EENTER = 0x02,
    __SGX_ERESUME = 0x03,
    __SGX_EEXIT = 0x04,
    __SGX_EACCEPT = 0x05,
    __SGX_EMODPE = 0x06,
    __SGX_EACCEPTCOPY = 0x07
  };
  enum __enclu_type __T = (enum __enclu_type)__L;
  unsigned int __R = 0;
  if (!__builtin_constant_p(__T))
    __asm__ __volatile__("enclu\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__T) {
    case __SGX_EREPORT:
    case __SGX_EACCEPTCOPY:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
      break;
    case __SGX_EGETKEY:
    case __SGX_ERESUME:
    case __SGX_EACCEPT:
    case __SGX_EMODPE:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EENTER:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R), "=c"(__D[1])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_EEXIT:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R), "=c"(__D[1])
                           : "a"(__L), "b"(__D[0])
                           : "cc");
      break;
    default:
      __asm__ __volatile__("enclu\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[1]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _enclv_u32(const unsigned int __L, size_t __D[]) {
  enum __enclv_type {
    __SGX_EDECVIRTCHILD = 0x00,
    __SGX_EINCVIRTCHILD = 0x01,
    __SGX_ESETCONTEXT = 0x02
  };
  unsigned int __R = 0;
  if (!__builtin_constant_p(__L))
    __asm__ __volatile__("enclv\n\t"
                         : "=a"(__R), "=b"(__D[0]), "=c"(__D[0]), "=d"(__D[2])
                         : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                         : "cc");
  else
    switch (__L) {
    case __SGX_EDECVIRTCHILD:
    case __SGX_EINCVIRTCHILD:
      __asm__ __volatile__("enclv\n\t"
                           : "=a"(__R)
                           : "a"(__L), "b"(__D[0]), "c"(__D[1])
                           : "cc");
      break;
    case __SGX_ESETCONTEXT:
      __asm__ __volatile__("enclv\n\t"
                           : "=a"(__R)
                           : "a"(__L), "c"(__D[1]), "d"(__D[2])
                           : "cc");
      break;
    default:
      __asm__ __volatile__("enclv\n\t"
                           : "=a"(__R), "=b"(__D[0]), "=c"(__D[0]), "=d"(__D[2])
                           : "a"(__L), "b"(__D[0]), "c"(__D[1]), "d"(__D[2])
                           : "cc");
    }
  return __R;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bextri_u32(unsigned int __X, const unsigned int __I) {
  return __builtin_ia32_bextri_u32(__X, __I);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcfill_u32(unsigned int __X) {
  return __X & (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blci_u32(unsigned int __X) {
  return __X | ~(__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcic_u32(unsigned int __X) {
  return ~__X & (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcmsk_u32(unsigned int __X) {
  return __X ^ (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcs_u32(unsigned int __X) {
  return __X | (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsfill_u32(unsigned int __X) {
  return __X | (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsic_u32(unsigned int __X) {
  return ~__X | (__X - 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __t1mskc_u32(unsigned int __X) {
  return ~__X | (__X + 1);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzmsk_u32(unsigned int __X) {
  return ~__X & (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __bextri_u64(unsigned long long __X, const unsigned int __I) {
  return __builtin_ia32_bextri_u64(__X, __I);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcfill_u64(unsigned long long __X) {
  return __X & (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blci_u64(unsigned long long __X) {
  return __X | ~(__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcic_u64(unsigned long long __X) {
  return ~__X & (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcmsk_u64(unsigned long long __X) {
  return __X ^ (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blcs_u64(unsigned long long __X) {
  return __X | (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsfill_u64(unsigned long long __X) {
  return __X | (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __blsic_u64(unsigned long long __X) {
  return ~__X | (__X - 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __t1mskc_u64(unsigned long long __X) {
  return ~__X | (__X + 1);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    __tzmsk_u64(unsigned long long __X) {
  return ~__X & (__X - 1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsusldtrk(void) {
  __builtin_ia32_xsusldtrk();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xresldtrk(void) {
  __builtin_ia32_xresldtrk();
}

struct __uintr_frame {

  unsigned long long rip;

  unsigned long long rflags;

  unsigned long long rsp;
};

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _clui(void) {
  __builtin_ia32_clui();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _stui(void) {
  __builtin_ia32_stui();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _senduipi(unsigned long long __R) {
  __builtin_ia32_senduipi(__R);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _testui(void) {
  return __builtin_ia32_testui();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _umonitor(void *__A) {
  __builtin_ia32_umonitor(__A);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _umwait(unsigned int __A, unsigned long long __B) {
  return __builtin_ia32_umwait(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tpause(unsigned int __A, unsigned long long __B) {
  return __builtin_ia32_tpause(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wbnoinvd(void) {
  __builtin_ia32_wbnoinvd();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsave(void *__P, long long __M) {
  __builtin_ia32_xsave(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstor(void *__P, long long __M) {
  __builtin_ia32_xrstor(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsetbv(unsigned int __A, long long __V) {
  __builtin_ia32_xsetbv(__A, __V);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xgetbv(unsigned int __A) {
  return __builtin_ia32_xgetbv(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsave64(void *__P, long long __M) {
  __builtin_ia32_xsave64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstor64(void *__P, long long __M) {
  __builtin_ia32_xrstor64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsavec(void *__P, long long __M) {
  __builtin_ia32_xsavec(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsavec64(void *__P, long long __M) {
  __builtin_ia32_xsavec64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaveopt(void *__P, long long __M) {
  __builtin_ia32_xsaveopt(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaveopt64(void *__P, long long __M) {
  __builtin_ia32_xsaveopt64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaves(void *__P, long long __M) {
  __builtin_ia32_xsaves(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstors(void *__P, long long __M) {
  __builtin_ia32_xrstors(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xrstors64(void *__P, long long __M) {
  __builtin_ia32_xrstors64(__P, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xsaves64(void *__P, long long __M) {
  __builtin_ia32_xsaves64(__P, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _xtest(void) {
  return __builtin_ia32_xtest();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _hreset(unsigned int __EAX) {
  __builtin_ia32_hreset(__EAX);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _wbinvd(void) {
  __builtin_ia32_wbinvd();
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdrand16_step(unsigned short *__P) {
  return __builtin_ia32_rdrand16_step(__P);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdrand32_step(unsigned int *__P) {
  return __builtin_ia32_rdrand32_step(__P);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdpid_u32(void) {
  return __builtin_ia32_rdpid();
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readfsbase_u32(void) {
  return __builtin_ia32_rdfsbase32();
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readfsbase_u64(void) {
  return __builtin_ia32_rdfsbase64();
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readgsbase_u32(void) {
  return __builtin_ia32_rdgsbase32();
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _readgsbase_u64(void) {
  return __builtin_ia32_rdgsbase64();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writefsbase_u32(unsigned int __B) {
  __builtin_ia32_wrfsbase32(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writefsbase_u64(unsigned long long __B) {
  __builtin_ia32_wrfsbase64(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writegsbase_u32(unsigned int __B) {
  __builtin_ia32_wrgsbase32(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _writegsbase_u64(unsigned long long __B) {
  __builtin_ia32_wrgsbase64(__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _rdrand64_step(unsigned long long *__P) {
  return __builtin_ia32_rdrand64_step(__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ptwrite64(unsigned long long __B) {
  __builtin_ia32_ptwrite64(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ptwrite32(unsigned __B) {
  __builtin_ia32_ptwrite32(__B);
}

typedef int __m64 __attribute__((__vector_size__(8), __may_alias__));
typedef int __m32 __attribute__((__vector_size__(4), __may_alias__));
typedef short __m16 __attribute__((__vector_size__(2), __may_alias__));

typedef int __m64_u
    __attribute__((__vector_size__(8), __may_alias__, __aligned__(1)));
typedef int __m32_u
    __attribute__((__vector_size__(4), __may_alias__, __aligned__(1)));
typedef short __m16_u
    __attribute__((__vector_size__(2), __may_alias__, __aligned__(1)));

typedef int __v2si __attribute__((__vector_size__(8)));
typedef short __v4hi __attribute__((__vector_size__(8)));
typedef char __v8qi __attribute__((__vector_size__(8)));
typedef long long __v1di __attribute__((__vector_size__(8)));
typedef float __v2sf __attribute__((__vector_size__(8)));

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_empty(void) {
  __builtin_ia32_emms();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_empty(void) {
  _mm_empty();
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_si64(int __i) {
  return (__m64)__builtin_ia32_vec_init_v2si(__i, 0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_from_int(int __i) {
  return _mm_cvtsi32_si64(__i);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_from_int64(long long __i) {
  return (__m64)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_m64(long long __i) {
  return (__m64)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_si64(long long __i) {
  return (__m64)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi64x(long long __i) {
  return (__m64)__i;
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_si32(__m64 __i) {
  return __builtin_ia32_vec_ext_v2si((__v2si)__i, 0);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_to_int(__m64 __i) {
  return _mm_cvtsi64_si32(__i);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_to_int64(__m64 __i) {
  return (long long)__i;
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtm64_si64(__m64 __i) {
  return (long long)__i;
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_si64x(__m64 __i) {
  return (long long)__i;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_packsswb((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_packsswb(__m64 __m1, __m64 __m2) {
  return _mm_packs_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_packssdw((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_packssdw(__m64 __m1, __m64 __m2) {
  return _mm_packs_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_pu16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_packuswb((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_packuswb(__m64 __m1, __m64 __m2) {
  return _mm_packs_pu16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckhbw((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckhbw(__m64 __m1, __m64 __m2) {
  return _mm_unpackhi_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckhwd((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckhwd(__m64 __m1, __m64 __m2) {
  return _mm_unpackhi_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckhdq((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckhdq(__m64 __m1, __m64 __m2) {
  return _mm_unpackhi_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpcklbw((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpcklbw(__m64 __m1, __m64 __m2) {
  return _mm_unpacklo_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpcklwd((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpcklwd(__m64 __m1, __m64 __m2) {
  return _mm_unpacklo_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_punpckldq((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_punpckldq(__m64 __m1, __m64 __m2) {
  return _mm_unpacklo_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddb(__m64 __m1, __m64 __m2) {
  return _mm_add_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddw(__m64 __m1, __m64 __m2) {
  return _mm_add_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddd(__m64 __m1, __m64 __m2) {
  return _mm_add_pi32(__m1, __m2);
}
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_si64(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddq((__v1di)__m1, (__v1di)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddsb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddsb(__m64 __m1, __m64 __m2) {
  return _mm_adds_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddsw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddsw(__m64 __m1, __m64 __m2) {
  return _mm_adds_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pu8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddusb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddusb(__m64 __m1, __m64 __m2) {
  return _mm_adds_pu8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_pu16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_paddusw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_paddusw(__m64 __m1, __m64 __m2) {
  return _mm_adds_pu16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubb(__m64 __m1, __m64 __m2) {
  return _mm_sub_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubw(__m64 __m1, __m64 __m2) {
  return _mm_sub_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubd(__m64 __m1, __m64 __m2) {
  return _mm_sub_pi32(__m1, __m2);
}
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_si64(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubq((__v1di)__m1, (__v1di)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubsb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubsb(__m64 __m1, __m64 __m2) {
  return _mm_subs_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubsw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubsw(__m64 __m1, __m64 __m2) {
  return _mm_subs_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pu8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubusb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubusb(__m64 __m1, __m64 __m2) {
  return _mm_subs_pu8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_pu16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_psubusw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psubusw(__m64 __m1, __m64 __m2) {
  return _mm_subs_pu16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmaddwd((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmaddwd(__m64 __m1, __m64 __m2) {
  return _mm_madd_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmulhw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmulhw(__m64 __m1, __m64 __m2) {
  return _mm_mulhi_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pmullw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmullw(__m64 __m1, __m64 __m2) {
  return _mm_mullo_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_pi16(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psllw((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllw(__m64 __m, __m64 __count) {
  return _mm_sll_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_pi16(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psllwi((__v4hi)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllwi(__m64 __m, int __count) {
  return _mm_slli_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_pi32(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_pslld((__v2si)__m, (__v2si)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pslld(__m64 __m, __m64 __count) {
  return _mm_sll_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_pi32(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_pslldi((__v2si)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pslldi(__m64 __m, int __count) {
  return _mm_slli_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_si64(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psllq((__v1di)__m, (__v1di)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllq(__m64 __m, __m64 __count) {
  return _mm_sll_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_si64(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psllqi((__v1di)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psllqi(__m64 __m, int __count) {
  return _mm_slli_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_pi16(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psraw((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psraw(__m64 __m, __m64 __count) {
  return _mm_sra_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_pi16(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrawi((__v4hi)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrawi(__m64 __m, int __count) {
  return _mm_srai_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_pi32(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrad((__v2si)__m, (__v2si)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrad(__m64 __m, __m64 __count) {
  return _mm_sra_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_pi32(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psradi((__v2si)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psradi(__m64 __m, int __count) {
  return _mm_srai_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_pi16(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrlw((__v4hi)__m, (__v4hi)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlw(__m64 __m, __m64 __count) {
  return _mm_srl_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_pi16(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrlwi((__v4hi)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlwi(__m64 __m, int __count) {
  return _mm_srli_pi16(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_pi32(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrld((__v2si)__m, (__v2si)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrld(__m64 __m, __m64 __count) {
  return _mm_srl_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_pi32(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrldi((__v2si)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrldi(__m64 __m, int __count) {
  return _mm_srli_pi32(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_si64(__m64 __m, __m64 __count) {
  return (__m64)__builtin_ia32_psrlq((__v1di)__m, (__v1di)__count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlq(__m64 __m, __m64 __count) {
  return _mm_srl_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_si64(__m64 __m, int __count) {
  return (__m64)__builtin_ia32_psrlqi((__v1di)__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psrlqi(__m64 __m, int __count) {
  return _mm_srli_si64(__m, __count);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_pand(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pand(__m64 __m1, __m64 __m2) {
  return _mm_and_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_pandn(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pandn(__m64 __m1, __m64 __m2) {
  return _mm_andnot_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_por(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_por(__m64 __m1, __m64 __m2) {
  return _mm_or_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_si64(__m64 __m1, __m64 __m2) {
  return __builtin_ia32_pxor(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pxor(__m64 __m1, __m64 __m2) {
  return _mm_xor_si64(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpeqb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpeqb(__m64 __m1, __m64 __m2) {
  return _mm_cmpeq_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pi8(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpgtb((__v8qi)__m1, (__v8qi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpgtb(__m64 __m1, __m64 __m2) {
  return _mm_cmpgt_pi8(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpeqw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpeqw(__m64 __m1, __m64 __m2) {
  return _mm_cmpeq_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pi16(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpgtw((__v4hi)__m1, (__v4hi)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpgtw(__m64 __m1, __m64 __m2) {
  return _mm_cmpgt_pi16(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpeqd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpeqd(__m64 __m1, __m64 __m2) {
  return _mm_cmpeq_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pi32(__m64 __m1, __m64 __m2) {
  return (__m64)__builtin_ia32_pcmpgtd((__v2si)__m1, (__v2si)__m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pcmpgtd(__m64 __m1, __m64 __m2) {
  return _mm_cmpgt_pi32(__m1, __m2);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_si64(void) {
  return (__m64)0LL;
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi32(int __i1, int __i0) {
  return (__m64)__builtin_ia32_vec_init_v2si(__i0, __i1);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi16(short __w3, short __w2, short __w1, short __w0) {
  return (__m64)__builtin_ia32_vec_init_v4hi(__w0, __w1, __w2, __w3);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pi8(char __b7, char __b6, char __b5, char __b4, char __b3,
                char __b2, char __b1, char __b0) {
  return (__m64)__builtin_ia32_vec_init_v8qi(__b0, __b1, __b2, __b3, __b4, __b5,
                                             __b6, __b7);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pi32(int __i0, int __i1) {
  return _mm_set_pi32(__i1, __i0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pi16(short __w0, short __w1, short __w2, short __w3) {
  return _mm_set_pi16(__w3, __w2, __w1, __w0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pi8(char __b0, char __b1, char __b2, char __b3, char __b4,
                 char __b5, char __b6, char __b7) {
  return _mm_set_pi8(__b7, __b6, __b5, __b4, __b3, __b2, __b1, __b0);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pi32(int __i) {
  return _mm_set_pi32(__i, __i);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pi16(short __w) {
  return _mm_set_pi16(__w, __w, __w, __w);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pi8(char __b) {
  return _mm_set_pi8(__b, __b, __b, __b, __b, __b, __b, __b);
}

extern int posix_memalign(void **, size_t, size_t);

static __inline void *_mm_malloc(size_t __size, size_t __alignment) {
  void *__ptr;
  if (__alignment == 1)
    return malloc(__size);
  if (__alignment == 2 || (sizeof(void *) == 8 && __alignment == 4))
    __alignment = sizeof(void *);
  if (posix_memalign(&__ptr, __alignment, __size) == 0)
    return __ptr;
  else
    return ((void *)0);
}

static __inline void _mm_free(void *__ptr) { free(__ptr); }

enum _mm_hint {

  _MM_HINT_ET0 = 7,
  _MM_HINT_ET1 = 6,
  _MM_HINT_T0 = 3,
  _MM_HINT_T1 = 2,
  _MM_HINT_T2 = 1,
  _MM_HINT_NTA = 0
};

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_prefetch(const void *__P, enum _mm_hint __I) {
  __builtin_prefetch(__P, (__I & 0x4) >> 2, __I & 0x3);
}
typedef float __m128 __attribute__((__vector_size__(16), __may_alias__));

typedef float __m128_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));

typedef float __v4sf __attribute__((__vector_size__(16)));

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_ps(void) {
  __m128 __Y = __Y;
  return __Y;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_ps(void) {
  return __extension__(__m128){0.0f, 0.0f, 0.0f, 0.0f};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_ss(__m128 __A) {
  return (__m128)__builtin_ia32_sqrtss((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp_ss(__m128 __A) {
  return (__m128)__builtin_ia32_rcpss((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt_ss(__m128 __A) {
  return (__m128)__builtin_ia32_rsqrtss((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A + (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A - (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A * (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_ps(__m128 __A, __m128 __B) {
  return (__m128)((__v4sf)__A / (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_ps(__m128 __A) {
  return (__m128)__builtin_ia32_sqrtps((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rcpps((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rsqrtps((__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_andps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_andnps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_orps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_ps(__m128 __A, __m128 __B) {
  return __builtin_ia32_xorps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpeqss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpltss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpless((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpltss((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpless((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpneqss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnltss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnless((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpnltss((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movss(
      (__v4sf)__A, (__v4sf)__builtin_ia32_cmpnless((__v4sf)__B, (__v4sf)__A));
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpordss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpunordss((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpeqps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpltps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpleps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpgtps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpgeps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpneqps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnltps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpnleps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpngtps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpngeps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpordps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_cmpunordps((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comieq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comieq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comilt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comilt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comile_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comile((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comigt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comigt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comige_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comige((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comineq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_comineq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomieq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomieq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomilt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomilt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomile_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomile((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomigt_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomigt((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomige_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomige((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomineq_ss(__m128 __A, __m128 __B) {
  return __builtin_ia32_ucomineq((__v4sf)__A, (__v4sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_si32(__m128 __A) {
  return __builtin_ia32_cvtss2si((__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_ss2si(__m128 __A) {
  return _mm_cvtss_si32(__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_si64(__m128 __A) {
  return __builtin_ia32_cvtss2si64((__v4sf)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_si64x(__m128 __A) {
  return __builtin_ia32_cvtss2si64((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pi32(__m128 __A) {
  return (__m64)__builtin_ia32_cvtps2pi((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_ps2pi(__m128 __A) {
  return _mm_cvtps_pi32(__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_si32(__m128 __A) {
  return __builtin_ia32_cvttss2si((__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_ss2si(__m128 __A) {
  return _mm_cvttss_si32(__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_si64(__m128 __A) {
  return __builtin_ia32_cvttss2si64((__v4sf)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_si64x(__m128 __A) {
  return __builtin_ia32_cvttss2si64((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_pi32(__m128 __A) {
  return (__m64)__builtin_ia32_cvttps2pi((__v4sf)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_ps2pi(__m128 __A) {
  return _mm_cvttps_pi32(__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_ss(__m128 __A, int __B) {
  return (__m128)__builtin_ia32_cvtsi2ss((__v4sf)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_si2ss(__m128 __A, int __B) {
  return _mm_cvtsi32_ss(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_ss(__m128 __A, long long __B) {
  return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_ss(__m128 __A, long long __B) {
  return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi32_ps(__m128 __A, __m64 __B) {
  return (__m128)__builtin_ia32_cvtpi2ps((__v4sf)__A, (__v2si)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_pi2ps(__m128 __A, __m64 __B) {
  return _mm_cvtpi32_ps(__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi16_ps(__m64 __A) {
  __v4hi __sign;
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;

  __sign = __builtin_ia32_pcmpgtw((__v4hi)0LL, (__v4hi)__A);

  __losi = (__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, __sign);
  __hisi = (__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, __sign);

  __zero = (__v4sf)_mm_setzero_ps();
  __ra = __builtin_ia32_cvtpi2ps(__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps(__ra, __hisi);

  return (__m128)__builtin_ia32_movlhps(__ra, __rb);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpu16_ps(__m64 __A) {
  __v2si __hisi, __losi;
  __v4sf __zero, __ra, __rb;

  __losi = (__v2si)__builtin_ia32_punpcklwd((__v4hi)__A, (__v4hi)0LL);
  __hisi = (__v2si)__builtin_ia32_punpckhwd((__v4hi)__A, (__v4hi)0LL);

  __zero = (__v4sf)_mm_setzero_ps();
  __ra = __builtin_ia32_cvtpi2ps(__zero, __losi);
  __rb = __builtin_ia32_cvtpi2ps(__ra, __hisi);

  return (__m128)__builtin_ia32_movlhps(__ra, __rb);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi8_ps(__m64 __A) {
  __v8qi __sign;

  __sign = __builtin_ia32_pcmpgtb((__v8qi)0LL, (__v8qi)__A);

  __A = (__m64)__builtin_ia32_punpcklbw((__v8qi)__A, __sign);

  return _mm_cvtpi16_ps(__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpu8_ps(__m64 __A) {
  __A = (__m64)__builtin_ia32_punpcklbw((__v8qi)__A, (__v8qi)0LL);
  return _mm_cvtpu16_ps(__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi32x2_ps(__m64 __A, __m64 __B) {
  __v4sf __zero = (__v4sf)_mm_setzero_ps();
  __v4sf __sfa = __builtin_ia32_cvtpi2ps(__zero, (__v2si)__A);
  __v4sf __sfb = __builtin_ia32_cvtpi2ps(__sfa, (__v2si)__B);
  return (__m128)__builtin_ia32_movlhps(__sfa, __sfb);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pi16(__m128 __A) {
  __v4sf __hisf = (__v4sf)__A;
  __v4sf __losf = __builtin_ia32_movhlps(__hisf, __hisf);
  __v2si __hisi = __builtin_ia32_cvtps2pi(__hisf);
  __v2si __losi = __builtin_ia32_cvtps2pi(__losf);
  return (__m64)__builtin_ia32_packssdw(__hisi, __losi);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pi8(__m128 __A) {
  __v4hi __tmp = (__v4hi)_mm_cvtps_pi16(__A);
  return (__m64)__builtin_ia32_packsswb(__tmp, (__v4hi)0LL);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_ps(__m128 __A, __m128 __B, int const __mask) {
  return (__m128)__builtin_ia32_shufps((__v4sf)__A, (__v4sf)__B, __mask);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpckhps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpcklps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadh_pi(__m128 __A, __m64 const *__P) {
  return (__m128)__builtin_ia32_loadhps((__v4sf)__A, (const __v2sf *)__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeh_pi(__m64 *__P, __m128 __A) {
  __builtin_ia32_storehps((__v2sf *)__P, (__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movehl_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movhlps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movelh_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movlhps((__v4sf)__A, (__v4sf)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadl_pi(__m128 __A, __m64 const *__P) {
  return (__m128)__builtin_ia32_loadlps((__v4sf)__A, (const __v2sf *)__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storel_pi(__m64 *__P, __m128 __A) {
  __builtin_ia32_storelps((__v2sf *)__P, (__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_ps(__m128 __A) {
  return __builtin_ia32_movmskps((__v4sf)__A);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getcsr(void) {
  return __builtin_ia32_stmxcsr();
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_EXCEPTION_STATE(void) {
  return _mm_getcsr() & 0x003f;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_EXCEPTION_MASK(void) {
  return _mm_getcsr() & 0x1f80;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_ROUNDING_MODE(void) {
  return _mm_getcsr() & 0x6000;
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_GET_FLUSH_ZERO_MODE(void) {
  return _mm_getcsr() & 0x8000;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setcsr(unsigned int __I) {
  __builtin_ia32_ldmxcsr(__I);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_EXCEPTION_STATE(unsigned int __mask) {
  _mm_setcsr((_mm_getcsr() & ~0x003f) | __mask);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_EXCEPTION_MASK(unsigned int __mask) {
  _mm_setcsr((_mm_getcsr() & ~0x1f80) | __mask);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_ROUNDING_MODE(unsigned int __mode) {
  _mm_setcsr((_mm_getcsr() & ~0x6000) | __mode);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _MM_SET_FLUSH_ZERO_MODE(unsigned int __mode) {
  _mm_setcsr((_mm_getcsr() & ~0x8000) | __mode);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_ss(float __F) {
  return __extension__(__m128)(__v4sf){__F, 0.0f, 0.0f, 0.0f};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_ps(float __F) {
  return __extension__(__m128)(__v4sf){__F, __F, __F, __F};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_ps1(float __F) {
  return _mm_set1_ps(__F);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ss(float const *__P) {
  return _mm_set_ss(*__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load1_ps(float const *__P) {
  return _mm_set1_ps(*__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ps1(float const *__P) {
  return _mm_load1_ps(__P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_ps(float const *__P) {
  return *(__m128 *)__P;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_ps(float const *__P) {
  return *(__m128_u *)__P;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadr_ps(float const *__P) {
  __v4sf __tmp = *(__v4sf *)__P;
  return (__m128)__builtin_ia32_shufps(
      __tmp, __tmp, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_set_ps(const float __Z, const float __Y, const float __X, const float __W) {
  return __extension__(__m128)(__v4sf){__W, __X, __Y, __Z};
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_ps(float __Z, float __Y, float __X, float __W) {
  return __extension__(__m128)(__v4sf){__Z, __Y, __X, __W};
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ss(float *__P, __m128 __A) {
  *__P = ((__v4sf)__A)[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_f32(__m128 __A) {
  return ((__v4sf)__A)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ps(float *__P, __m128 __A) {
  *(__m128 *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_ps(float *__P, __m128 __A) {
  *(__m128_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store1_ps(float *__P, __m128 __A) {
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps(
      __va, __va, (((0) << 6) | ((0) << 4) | ((0) << 2) | (0)));
  _mm_storeu_ps(__P, __tmp);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_ps1(float *__P, __m128 __A) {
  _mm_store1_ps(__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storer_ps(float *__P, __m128 __A) {
  __v4sf __va = (__v4sf)__A;
  __v4sf __tmp = __builtin_ia32_shufps(
      __va, __va, (((0) << 6) | ((1) << 4) | ((2) << 2) | (3)));
  _mm_store_ps(__P, __tmp);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_shuffle(
      (__v4sf)__A, (__v4sf)__B,
      __extension__(__attribute__((__vector_size__(16))) int){4, 1, 2, 3});
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_extract_pi16(__m64 const __A, int const __N) {
  return (unsigned short)__builtin_ia32_vec_ext_v4hi((__v4hi)__A, __N);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pextrw(__m64 const __A, int const __N) {
  return _mm_extract_pi16(__A, __N);
}
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_insert_pi16(__m64 const __A, int const __D, int const __N) {
  return (__m64)__builtin_ia32_vec_set_v4hi((__v4hi)__A, __D, __N);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pinsrw(__m64 const __A, int const __D, int const __N) {
  return _mm_insert_pi16(__A, __D, __N);
}
extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_pi16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmaxsw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmaxsw(__m64 __A, __m64 __B) {
  return _mm_max_pi16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmaxub((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmaxub(__m64 __A, __m64 __B) {
  return _mm_max_pu8(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_pi16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pminsw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pminsw(__m64 __A, __m64 __B) {
  return _mm_min_pi16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pminub((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pminub(__m64 __A, __m64 __B) {
  return _mm_min_pu8(__A, __B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_pi8(__m64 __A) {
  return __builtin_ia32_pmovmskb((__v8qi)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmovmskb(__m64 __A) {
  return _mm_movemask_pi8(__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_pu16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmulhuw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pmulhuw(__m64 __A, __m64 __B) {
  return _mm_mulhi_pu16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_pi16(__m64 __A, int const __N) {
  return (__m64)__builtin_ia32_pshufw((__v4hi)__A, __N);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pshufw(__m64 __A, int const __N) {
  return _mm_shuffle_pi16(__A, __N);
}
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskmove_si64(__m64 __A, __m64 __N, char *__P) {

  typedef long long __v2di __attribute__((__vector_size__(16)));
  typedef char __v16qi __attribute__((__vector_size__(16)));

  __v2di __A128 = __extension__(__v2di){((__v1di)__A)[0], 0};
  __v2di __N128 = __extension__(__v2di){((__v1di)__N)[0], 0};

  long unsigned int offset = ((long unsigned int)__P) & 0xf;
  if (offset) {

    if (offset > 8)
      offset = 8;
    __P = (char *)(((long unsigned int)__P) - offset);

    switch (offset) {
    case 1:
      __A128 = __builtin_ia32_pslldqi128(__A128, 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 8);
      break;
    case 2:
      __A128 = __builtin_ia32_pslldqi128(__A128, 2 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 2 * 8);
      break;
    case 3:
      __A128 = __builtin_ia32_pslldqi128(__A128, 3 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 3 * 8);
      break;
    case 4:
      __A128 = __builtin_ia32_pslldqi128(__A128, 4 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 4 * 8);
      break;
    case 5:
      __A128 = __builtin_ia32_pslldqi128(__A128, 5 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 5 * 8);
      break;
    case 6:
      __A128 = __builtin_ia32_pslldqi128(__A128, 6 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 6 * 8);
      break;
    case 7:
      __A128 = __builtin_ia32_pslldqi128(__A128, 7 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 7 * 8);
      break;
    case 8:
      __A128 = __builtin_ia32_pslldqi128(__A128, 8 * 8);
      __N128 = __builtin_ia32_pslldqi128(__N128, 8 * 8);
      break;
    default:
      break;
    }
  }
  __builtin_ia32_maskmovdqu((__v16qi)__A128, (__v16qi)__N128, __P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_maskmovq(__m64 __A, __m64 __N, char *__P) {
  _mm_maskmove_si64(__A, __N, __P);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pavgb((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pavgb(__m64 __A, __m64 __B) {
  return _mm_avg_pu8(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_pu16(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pavgw((__v4hi)__A, (__v4hi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_pavgw(__m64 __A, __m64 __B) {
  return _mm_avg_pu16(__A, __B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sad_pu8(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_psadbw((__v8qi)__A, (__v8qi)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_psadbw(__m64 __A, __m64 __B) {
  return _mm_sad_pu8(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_pi(__m64 *__P, __m64 __A) {
  __builtin_ia32_movntq((unsigned long long *)__P, (unsigned long long)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_ps(float *__P, __m128 __A) {
  __builtin_ia32_movntps(__P, (__v4sf)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sfence(void) {
  __builtin_ia32_sfence();
}

typedef double __v2df __attribute__((__vector_size__(16)));
typedef long long __v2di __attribute__((__vector_size__(16)));
typedef unsigned long long __v2du __attribute__((__vector_size__(16)));
typedef int __v4si __attribute__((__vector_size__(16)));
typedef unsigned int __v4su __attribute__((__vector_size__(16)));
typedef short __v8hi __attribute__((__vector_size__(16)));
typedef unsigned short __v8hu __attribute__((__vector_size__(16)));
typedef char __v16qi __attribute__((__vector_size__(16)));
typedef signed char __v16qs __attribute__((__vector_size__(16)));
typedef unsigned char __v16qu __attribute__((__vector_size__(16)));

typedef long long __m128i __attribute__((__vector_size__(16), __may_alias__));
typedef double __m128d __attribute__((__vector_size__(16), __may_alias__));

typedef long long __m128i_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef double __m128d_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_sd(double __F) {
  return __extension__(__m128d){__F, 0.0};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_pd(double __F) {
  return __extension__(__m128d){__F, __F};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pd1(double __F) {
  return _mm_set1_pd(__F);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_pd(double __W, double __X) {
  return __extension__(__m128d){__X, __W};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_pd(double __W, double __X) {
  return __extension__(__m128d){__W, __X};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_pd(void) {
  __m128d __Y = __Y;
  return __Y;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_pd(void) {
  return __extension__(__m128d){0.0, 0.0};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_sd(__m128d __A, __m128d __B) {
  return __extension__(__m128d)
      __builtin_shuffle((__v2df)__A, (__v2df)__B, (__v2di){2, 1});
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_pd(double const *__P) {
  return *(__m128d *)__P;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_pd(double const *__P) {
  return *(__m128d_u *)__P;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load1_pd(double const *__P) {
  return _mm_set1_pd(*__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_sd(double const *__P) {
  return _mm_set_sd(*__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_pd1(double const *__P) {
  return _mm_load1_pd(__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadr_pd(double const *__P) {
  __m128d __tmp = _mm_load_pd(__P);
  return __builtin_ia32_shufpd(__tmp, __tmp, (((0) << 1) | (1)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_pd(double *__P, __m128d __A) {
  *(__m128d *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_pd(double *__P, __m128d __A) {
  *(__m128d_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_sd(double *__P, __m128d __A) {
  *__P = ((__v2df)__A)[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_f64(__m128d __A) {
  return ((__v2df)__A)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storel_pd(double *__P, __m128d __A) {
  _mm_store_sd(__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeh_pd(double *__P, __m128d __A) {
  *__P = ((__v2df)__A)[1];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store1_pd(double *__P, __m128d __A) {
  _mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (((0) << 1) | (0))));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_pd1(double *__P, __m128d __A) {
  _mm_store1_pd(__P, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storer_pd(double *__P, __m128d __A) {
  _mm_store_pd(__P, __builtin_ia32_shufpd(__A, __A, (((0) << 1) | (1))));
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si32(__m128i __A) {
  return __builtin_ia32_vec_ext_v4si((__v4si)__A, 0);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si64(__m128i __A) {
  return ((__v2di)__A)[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi128_si64x(__m128i __A) {
  return ((__v2di)__A)[0];
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A + (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A - (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A * (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_pd(__m128d __A, __m128d __B) {
  return (__m128d)((__v2df)__A / (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_sqrtpd((__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_sd(__m128d __A, __m128d __B) {
  __v2df __tmp = __builtin_ia32_movsd((__v2df)__A, (__v2df)__B);
  return (__m128d)__builtin_ia32_sqrtsd((__v2df)__tmp);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andnpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_orpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_xorpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpeqpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpltpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmplepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpgtpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpgepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpneqpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnltpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnlepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpngtpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpngepd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpordpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpunordpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpeqsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpltsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmplesd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmpltsd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmplesd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpneqsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnlt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnltsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnle_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpnlesd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpngt_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmpnltsd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpnge_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movsd(
      (__v2df)__A, (__v2df)__builtin_ia32_cmpnlesd((__v2df)__B, (__v2df)__A));
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpord_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpordsd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpunord_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_cmpunordsd((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comieq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdeq((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comilt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdlt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comile_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdle((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comigt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdgt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comige_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdge((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comineq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_comisdneq((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomieq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdeq((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomilt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdlt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomile_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdle((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomigt_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdgt((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomige_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdge((__v2df)__A, (__v2df)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ucomineq_sd(__m128d __A, __m128d __B) {
  return __builtin_ia32_ucomisdneq((__v2df)__A, (__v2df)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi64x(long long __q1, long long __q0) {
  return __extension__(__m128i)(__v2di){__q0, __q1};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi64(__m64 __q1, __m64 __q0) {
  return _mm_set_epi64x((long long)__q1, (long long)__q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi32(int __q3, int __q2, int __q1, int __q0) {
  return __extension__(__m128i)(__v4si){__q0, __q1, __q2, __q3};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi16(short __q7, short __q6, short __q5, short __q4, short __q3,
                  short __q2, short __q1, short __q0) {
  return __extension__(__m128i)(__v8hi){__q0, __q1, __q2, __q3,
                                        __q4, __q5, __q6, __q7};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set_epi8(char __q15, char __q14, char __q13, char __q12, char __q11,
                 char __q10, char __q09, char __q08, char __q07, char __q06,
                 char __q05, char __q04, char __q03, char __q02, char __q01,
                 char __q00) {
  return __extension__(__m128i)(__v16qi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15};
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi64x(long long __A) {
  return _mm_set_epi64x(__A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi64(__m64 __A) {
  return _mm_set_epi64(__A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi32(int __A) {
  return _mm_set_epi32(__A, __A, __A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi16(short __A) {
  return _mm_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_set1_epi8(char __A) {
  return _mm_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                      __A, __A, __A, __A, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi64(__m64 __q0, __m64 __q1) {
  return _mm_set_epi64(__q1, __q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi32(int __q0, int __q1, int __q2, int __q3) {
  return _mm_set_epi32(__q3, __q2, __q1, __q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi16(short __q0, short __q1, short __q2, short __q3, short __q4,
                   short __q5, short __q6, short __q7) {
  return _mm_set_epi16(__q7, __q6, __q5, __q4, __q3, __q2, __q1, __q0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setr_epi8(char __q00, char __q01, char __q02, char __q03, char __q04,
                  char __q05, char __q06, char __q07, char __q08, char __q09,
                  char __q10, char __q11, char __q12, char __q13, char __q14,
                  char __q15) {
  return _mm_set_epi8(__q15, __q14, __q13, __q12, __q11, __q10, __q09, __q08,
                      __q07, __q06, __q05, __q04, __q03, __q02, __q01, __q00);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_si128(__m128i const *__P) {
  return *__P;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si128(__m128i_u const *__P) {
  return *__P;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadl_epi64(__m128i_u const *__P) {
  return _mm_set_epi64((__m64)0LL, *(__m64_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si64(void const *__P) {
  return _mm_loadl_epi64((__m128i_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si32(void const *__P) {
  return _mm_set_epi32(0, 0, 0, (*(__m32_u *)__P)[0]);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_si16(void const *__P) {
  return _mm_set_epi16(0, 0, 0, 0, 0, 0, 0, (*(__m16_u *)__P)[0]);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_si128(__m128i *__P, __m128i __B) {
  *__P = __B;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si128(__m128i_u *__P, __m128i __B) {
  *__P = __B;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storel_epi64(__m128i_u *__P, __m128i __B) {
  *(__m64_u *)__P = (__m64)((__v2di)__B)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si64(void *__P, __m128i __B) {
  _mm_storel_epi64((__m128i_u *)__P, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si32(void *__P, __m128i __B) {
  *(__m32_u *)__P = (__m32)((__v4si)__B)[0];
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_si16(void *__P, __m128i __B) {
  *(__m16_u *)__P = (__m16)((__v8hi)__B)[0];
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi64_pi64(__m128i __B) {
  return (__m64)((__v2di)__B)[0];
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movpi64_epi64(__m64 __A) {
  return _mm_set_epi64((__m64)0LL, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_move_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_movq128((__v2di)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_undefined_si128(void) {
  __m128i __Y = __Y;
  return __Y;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_setzero_si128(void) {
  return __extension__(__m128i)(__v4si){0, 0, 0, 0};
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtdq2pd((__v4si)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtdq2ps((__v4si)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epi32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq((__v2df)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_pi32(__m128d __A) {
  return (__m64)__builtin_ia32_cvtpd2pi((__v2df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_ps(__m128d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps((__v2df)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epi32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq((__v2df)__A);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_pi32(__m128d __A) {
  return (__m64)__builtin_ia32_cvttpd2pi((__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpi32_pd(__m64 __A) {
  return (__m128d)__builtin_ia32_cvtpi2pd((__v2si)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epi32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2dq((__v4sf)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epi32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2dq((__v4sf)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_pd(__m128 __A) {
  return (__m128d)__builtin_ia32_cvtps2pd((__v4sf)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_si32(__m128d __A) {
  return __builtin_ia32_cvtsd2si((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_si64(__m128d __A) {
  return __builtin_ia32_cvtsd2si64((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_si64x(__m128d __A) {
  return __builtin_ia32_cvtsd2si64((__v2df)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_si32(__m128d __A) {
  return __builtin_ia32_cvttsd2si((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_si64(__m128d __A) {
  return __builtin_ia32_cvttsd2si64((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_si64x(__m128d __A) {
  return __builtin_ia32_cvttsd2si64((__v2df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_ss(__m128 __A, __m128d __B) {
  return (__m128)__builtin_ia32_cvtsd2ss((__v4sf)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_sd(__m128d __A, int __B) {
  return (__m128d)__builtin_ia32_cvtsi2sd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_sd(__m128d __A, long long __B) {
  return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_sd(__m128d __A, long long __B) {
  return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_sd(__m128d __A, __m128 __B) {
  return (__m128d)__builtin_ia32_cvtss2sd((__v2df)__A, (__v4sf)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_pd(__m128d __A, __m128d __B, const int __mask) {
  return (__m128d)__builtin_ia32_shufpd((__v2df)__A, (__v2df)__B, __mask);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpckhpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpcklpd((__v2df)__A, (__v2df)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadh_pd(__m128d __A, double const *__B) {
  return (__m128d)__builtin_ia32_loadhpd((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadl_pd(__m128d __A, double const *__B) {
  return (__m128d)__builtin_ia32_loadlpd((__v2df)__A, __B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_pd(__m128d __A) {
  return __builtin_ia32_movmskpd((__v2df)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packsswb128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packs_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packssdw128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packus_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packuswb128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhbw128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhwd128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhdq128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpackhi_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhqdq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklbw128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklwd128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckldq128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_unpacklo_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklqdq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qu)__A + (__v16qu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hu)__A + (__v8hu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A + (__v4su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A + (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_adds_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qu)__A - (__v16qu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hu)__A - (__v8hu)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A - (__v4su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A - (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_subs_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaddwd128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hu)__A * (__v8hu)__B);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_su32(__m64 __A, __m64 __B) {
  return (__m64)__builtin_ia32_pmuludq((__v2si)__A, (__v2si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmuludq128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_epi16(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllwi128((__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_epi32(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_pslldi128((__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_epi64(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllqi128((__v2di)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_epi16(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrawi128((__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_epi32(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psradi128((__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_bsrli_si128(__m128i __A, const int __N) {
  return (__m128i)__builtin_ia32_psrldqi128(__A, __N * 8);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_bslli_si128(__m128i __A, const int __N) {
  return (__m128i)__builtin_ia32_pslldqi128(__A, __N * 8);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_si128(__m128i __A, const int __N) {
  return (__m128i)__builtin_ia32_psrldqi128(__A, __N * 8);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_slli_si128(__m128i __A, const int __N) {
  return (__m128i)__builtin_ia32_pslldqi128(__A, __N * 8);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_epi16(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrlwi128((__v8hi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_epi32(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrldi128((__v4si)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srli_epi64(__m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psrlqi128((__v2di)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pslld128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sll_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrad128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrld128((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srl_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlq128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_and_si128(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A & (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_andnot_si128(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandn128((__v2di)__A, (__v2di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_si128(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A | (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_si128(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A ^ (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qi)__A == (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hi)__A == (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4si)__A == (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qs)__A < (__v16qs)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hi)__A < (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4si)__A < (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi8(__m128i __A, __m128i __B) {
  return (__m128i)((__v16qs)__A > (__v16qs)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi16(__m128i __A, __m128i __B) {
  return (__m128i)((__v8hi)__A > (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4si)__A > (__v4si)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_extract_epi16(__m128i const __A, int const __N) {
  return (unsigned short)__builtin_ia32_vec_ext_v8hi((__v8hi)__A, __N);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_insert_epi16(__m128i const __A, int const __D, int const __N) {
  return (__m128i)__builtin_ia32_vec_set_v8hi((__v8hi)__A, __D, __N);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxub128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminub128((__v16qi)__A, (__v16qi)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movemask_epi8(__m128i __A) {
  return __builtin_ia32_pmovmskb128((__v16qi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhi_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhuw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shufflehi_epi16(__m128i __A, const int __mask) {
  return (__m128i)__builtin_ia32_pshufhw((__v8hi)__A, __mask);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shufflelo_epi16(__m128i __A, const int __mask) {
  return (__m128i)__builtin_ia32_pshuflw((__v8hi)__A, __mask);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_epi32(__m128i __A, const int __mask) {
  return (__m128i)__builtin_ia32_pshufd((__v4si)__A, __mask);
}
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskmoveu_si128(__m128i __A, __m128i __B, char *__C) {
  __builtin_ia32_maskmovdqu((__v16qi)__A, (__v16qi)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgb128((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_avg_epu16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgw128((__v8hi)__A, (__v8hi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sad_epu8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psadbw128((__v16qi)__A, (__v16qi)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_si32(int *__A, int __B) {
  __builtin_ia32_movnti(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_si64(long long int *__A, long long int __B) {
  __builtin_ia32_movnti64(__A, __B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_si128(__m128i *__A, __m128i __B) {
  __builtin_ia32_movntdq((__v2di *)__A, (__v2di)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_pd(double *__A, __m128d __B) {
  __builtin_ia32_movntpd(__A, (__v2df)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clflush(void const *__A) {
  __builtin_ia32_clflush(__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lfence(void) {
  __builtin_ia32_lfence();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mfence(void) {
  __builtin_ia32_mfence();
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi32_si128(int __A) {
  return _mm_set_epi32(0, 0, 0, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64_si128(long long __A) {
  return _mm_set_epi64x(0, __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsi64x_si128(long long __A) {
  return _mm_set_epi64x(0, __A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castpd_ps(__m128d __A) {
  return (__m128)__A;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castpd_si128(__m128d __A) {
  return (__m128i)__A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castps_pd(__m128 __A) {
  return (__m128d)__A;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castps_si128(__m128 __A) {
  return (__m128i)__A;
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castsi128_ps(__m128i __A) {
  return (__m128)__A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_castsi128_pd(__m128i __A) {
  return (__m128d)__A;
}
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_pause(void) {
  __builtin_ia32_pause();
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_addsub_ps(__m128 __X, __m128 __Y) {
  return (__m128)__builtin_ia32_addsubps((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_ps(__m128 __X, __m128 __Y) {
  return (__m128)__builtin_ia32_haddps((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_ps(__m128 __X, __m128 __Y) {
  return (__m128)__builtin_ia32_hsubps((__v4sf)__X, (__v4sf)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movehdup_ps(__m128 __X) {
  return (__m128)__builtin_ia32_movshdup((__v4sf)__X);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_moveldup_ps(__m128 __X) {
  return (__m128)__builtin_ia32_movsldup((__v4sf)__X);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_addsub_pd(__m128d __X, __m128d __Y) {
  return (__m128d)__builtin_ia32_addsubpd((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_pd(__m128d __X, __m128d __Y) {
  return (__m128d)__builtin_ia32_haddpd((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_pd(__m128d __X, __m128d __Y) {
  return (__m128d)__builtin_ia32_hsubpd((__v2df)__X, (__v2df)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loaddup_pd(double const *__P) {
  return _mm_load1_pd(__P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movedup_pd(__m128d __X) {
  return _mm_shuffle_pd(__X, __X, (((0) << 1) | (0)));
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lddqu_si128(__m128i const *__P) {
  return (__m128i)__builtin_ia32_lddqu((char const *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phaddw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phaddd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadds_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phaddsw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phaddw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadd_pi32(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phaddd((__v2si)__X, (__v2si)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hadds_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phaddsw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phsubw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phsubd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsubs_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_phsubsw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phsubw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsub_pi32(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phsubd((__v2si)__X, (__v2si)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_hsubs_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_phsubsw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maddubs_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaddubsw128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maddubs_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_pmaddubsw((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhrs_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmulhrsw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mulhrs_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_pmulhrsw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pshufb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shuffle_pi8(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_pshufb((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psignb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_epi16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psignw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psignd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_pi8(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_psignb((__v8qi)__X, (__v8qi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_pi16(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_psignw((__v4hi)__X, (__v4hi)__Y);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sign_pi32(__m64 __X, __m64 __Y) {
  return (__m64)__builtin_ia32_psignd((__v2si)__X, (__v2si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_alignr_epi8(__m128i __X, __m128i __Y, const int __N) {
  return (__m128i)__builtin_ia32_palignr128((__v2di)__X, (__v2di)__Y, __N * 8);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_alignr_pi8(__m64 __X, __m64 __Y, const int __N) {
  return (__m64)__builtin_ia32_palignr((__v1di)__X, (__v1di)__Y, __N * 8);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi8(__m128i __X) {
  return (__m128i)__builtin_ia32_pabsb128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pabsw128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pabsd128((__v4si)__X);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_pi8(__m64 __X) {
  return (__m64)__builtin_ia32_pabsb((__v8qi)__X);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_pi16(__m64 __X) {
  return (__m64)__builtin_ia32_pabsw((__v4hi)__X);
}

extern __inline __m64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_pi32(__m64 __X) {
  return (__m64)__builtin_ia32_pabsd((__v2si)__X);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testz_si128(__m128i __M, __m128i __V) {
  return __builtin_ia32_ptestz128((__v2di)__M, (__v2di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testc_si128(__m128i __M, __m128i __V) {
  return __builtin_ia32_ptestc128((__v2di)__M, (__v2di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testnzc_si128(__m128i __M, __m128i __V) {
  return __builtin_ia32_ptestnzc128((__v2di)__M, (__v2di)__V);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_round_pd(__m128d __V, const int __M) {
  return (__m128d)__builtin_ia32_roundpd((__v2df)__V, __M);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_round_sd(__m128d __D, __m128d __V, const int __M) {
  return (__m128d)__builtin_ia32_roundsd((__v2df)__D, (__v2df)__V, __M);
}
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_round_ps(__m128 __V, const int __M) {
  return (__m128)__builtin_ia32_roundps((__v4sf)__V, __M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_round_ss(__m128 __D, __m128 __V, const int __M) {
  return (__m128)__builtin_ia32_roundss((__v4sf)__D, (__v4sf)__V, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blend_epi16(__m128i __X, __m128i __Y, const int __M) {
  return (__m128i)__builtin_ia32_pblendw128((__v8hi)__X, (__v8hi)__Y, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blendv_epi8(__m128i __X, __m128i __Y, __m128i __M) {
  return (__m128i)__builtin_ia32_pblendvb128((__v16qi)__X, (__v16qi)__Y,
                                             (__v16qi)__M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blend_ps(__m128 __X, __m128 __Y, const int __M) {
  return (__m128)__builtin_ia32_blendps((__v4sf)__X, (__v4sf)__Y, __M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blendv_ps(__m128 __X, __m128 __Y, __m128 __M) {
  return (__m128)__builtin_ia32_blendvps((__v4sf)__X, (__v4sf)__Y, (__v4sf)__M);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blend_pd(__m128d __X, __m128d __Y, const int __M) {
  return (__m128d)__builtin_ia32_blendpd((__v2df)__X, (__v2df)__Y, __M);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blendv_pd(__m128d __X, __m128d __Y, __m128d __M) {
  return (__m128d)__builtin_ia32_blendvpd((__v2df)__X, (__v2df)__Y,
                                          (__v2df)__M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dp_ps(__m128 __X, __m128 __Y, const int __M) {
  return (__m128)__builtin_ia32_dpps((__v4sf)__X, (__v4sf)__Y, __M);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dp_pd(__m128d __X, __m128d __Y, const int __M) {
  return (__m128d)__builtin_ia32_dppd((__v2df)__X, (__v2df)__Y, __M);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)((__v2di)__X == (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminsb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxsb128((__v16qi)__X, (__v16qi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminuw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu16(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxuw128((__v8hi)__X, (__v8hi)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminsd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxsd128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pminud128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaxud128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)((__v4su)__X * (__v4su)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuldq128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_insert_ps(__m128 __D, __m128 __S, const int __N) {
  return (__m128)__builtin_ia32_insertps128((__v4sf)__D, (__v4sf)__S, __N);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_extract_ps(__m128 __X, const int __N) {
  union {
    int __i;
    float __f;
  } __tmp;
  __tmp.__f = __builtin_ia32_vec_ext_v4sf((__v4sf)__X, __N);
  return __tmp.__i;
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_insert_epi8(__m128i __D, int __S, const int __N) {
  return (__m128i)__builtin_ia32_vec_set_v16qi((__v16qi)__D, __S, __N);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_insert_epi32(__m128i __D, int __S, const int __N) {
  return (__m128i)__builtin_ia32_vec_set_v4si((__v4si)__D, __S, __N);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_insert_epi64(__m128i __D, long long __S, const int __N) {
  return (__m128i)__builtin_ia32_vec_set_v2di((__v2di)__D, __S, __N);
}
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_extract_epi8(__m128i __X, const int __N) {
  return (unsigned char)__builtin_ia32_vec_ext_v16qi((__v16qi)__X, __N);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_extract_epi32(__m128i __X, const int __N) {
  return __builtin_ia32_vec_ext_v4si((__v4si)__X, __N);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_extract_epi64(__m128i __X, const int __N) {
  return __builtin_ia32_vec_ext_v2di((__v2di)__X, __N);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_minpos_epu16(__m128i __X) {
  return (__m128i)__builtin_ia32_phminposuw128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi8_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxbd128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxwd128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi8_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxbq128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxdq128((__v4si)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxwq128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi8_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxbw128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu8_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxbd128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu16_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxwd128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu8_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxbq128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxdq128((__v4si)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu16_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxwq128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu8_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxbw128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_packus_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_packusdw128((__v4si)__X, (__v4si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mpsadbw_epu8(__m128i __X, __m128i __Y, const int __M) {
  return (__m128i)__builtin_ia32_mpsadbw128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_stream_load_si128(__m128i *__X) {
  return (__m128i)__builtin_ia32_movntdqa((__v2di *)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistrm(__m128i __X, __m128i __Y, const int __M) {
  return (__m128i)__builtin_ia32_pcmpistrm128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistri(__m128i __X, __m128i __Y, const int __M) {
  return __builtin_ia32_pcmpistri128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestrm(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return (__m128i)__builtin_ia32_pcmpestrm128((__v16qi)__X, __LX, (__v16qi)__Y,
                                              __LY, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestri(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return __builtin_ia32_pcmpestri128((__v16qi)__X, __LX, (__v16qi)__Y, __LY,
                                     __M);
}
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistra(__m128i __X, __m128i __Y, const int __M) {
  return __builtin_ia32_pcmpistria128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistrc(__m128i __X, __m128i __Y, const int __M) {
  return __builtin_ia32_pcmpistric128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistro(__m128i __X, __m128i __Y, const int __M) {
  return __builtin_ia32_pcmpistrio128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistrs(__m128i __X, __m128i __Y, const int __M) {
  return __builtin_ia32_pcmpistris128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpistrz(__m128i __X, __m128i __Y, const int __M) {
  return __builtin_ia32_pcmpistriz128((__v16qi)__X, (__v16qi)__Y, __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestra(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return __builtin_ia32_pcmpestria128((__v16qi)__X, __LX, (__v16qi)__Y, __LY,
                                      __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestrc(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return __builtin_ia32_pcmpestric128((__v16qi)__X, __LX, (__v16qi)__Y, __LY,
                                      __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestro(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return __builtin_ia32_pcmpestrio128((__v16qi)__X, __LX, (__v16qi)__Y, __LY,
                                      __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestrs(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return __builtin_ia32_pcmpestris128((__v16qi)__X, __LX, (__v16qi)__Y, __LY,
                                      __M);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpestrz(__m128i __X, int __LX, __m128i __Y, int __LY, const int __M) {
  return __builtin_ia32_pcmpestriz128((__v16qi)__X, __LX, (__v16qi)__Y, __LY,
                                      __M);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)((__v2di)__X > (__v2di)__Y);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u8(unsigned int __C, unsigned char __V) {
  return __builtin_ia32_crc32qi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u16(unsigned int __C, unsigned short __V) {
  return __builtin_ia32_crc32hi(__C, __V);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u32(unsigned int __C, unsigned int __V) {
  return __builtin_ia32_crc32si(__C, __V);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_crc32_u64(unsigned long long __C, unsigned long long __V) {
  return __builtin_ia32_crc32di(__C, __V);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdec_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesdec128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdeclast_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesdeclast128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenc_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesenc128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenclast_si128(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_aesenclast128((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesimc_si128(__m128i __X) {
  return (__m128i)__builtin_ia32_aesimc128((__v2di)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aeskeygenassist_si128(__m128i __X, const int __C) {
  return (__m128i)__builtin_ia32_aeskeygenassist128((__v2di)__X, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_clmulepi64_si128(__m128i __X, __m128i __Y, const int __I) {
  return (__m128i)__builtin_ia32_pclmulqdq128((__v2di)__X, (__v2di)__Y, __I);
}

typedef double __v4df __attribute__((__vector_size__(32)));
typedef float __v8sf __attribute__((__vector_size__(32)));
typedef long long __v4di __attribute__((__vector_size__(32)));
typedef unsigned long long __v4du __attribute__((__vector_size__(32)));
typedef int __v8si __attribute__((__vector_size__(32)));
typedef unsigned int __v8su __attribute__((__vector_size__(32)));
typedef short __v16hi __attribute__((__vector_size__(32)));
typedef unsigned short __v16hu __attribute__((__vector_size__(32)));
typedef char __v32qi __attribute__((__vector_size__(32)));
typedef signed char __v32qs __attribute__((__vector_size__(32)));
typedef unsigned char __v32qu __attribute__((__vector_size__(32)));

typedef float __m256 __attribute__((__vector_size__(32), __may_alias__));
typedef long long __m256i __attribute__((__vector_size__(32), __may_alias__));
typedef double __m256d __attribute__((__vector_size__(32), __may_alias__));

typedef float __m256_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef long long __m256i_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef double __m256d_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A + (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A + (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_addsub_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_addsubpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_addsub_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_addsubps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_and_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_and_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_andnot_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andnpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_andnot_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andnps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blend_pd(__m256d __X, __m256d __Y, const int __M) {
  return (__m256d)__builtin_ia32_blendpd256((__v4df)__X, (__v4df)__Y, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blend_ps(__m256 __X, __m256 __Y, const int __M) {
  return (__m256)__builtin_ia32_blendps256((__v8sf)__X, (__v8sf)__Y, __M);
}
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blendv_pd(__m256d __X, __m256d __Y, __m256d __M) {
  return (__m256d)__builtin_ia32_blendvpd256((__v4df)__X, (__v4df)__Y,
                                             (__v4df)__M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blendv_ps(__m256 __X, __m256 __Y, __m256 __M) {
  return (__m256)__builtin_ia32_blendvps256((__v8sf)__X, (__v8sf)__Y,
                                            (__v8sf)__M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_div_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A / (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_div_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A / (__v8sf)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dp_ps(__m256 __X, __m256 __Y, const int __M) {
  return (__m256)__builtin_ia32_dpps256((__v8sf)__X, (__v8sf)__Y, __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_pd(__m256d __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_haddpd256((__v4df)__X, (__v4df)__Y);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_ps(__m256 __X, __m256 __Y) {
  return (__m256)__builtin_ia32_haddps256((__v8sf)__X, (__v8sf)__Y);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_pd(__m256d __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_hsubpd256((__v4df)__X, (__v4df)__Y);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_ps(__m256 __X, __m256 __Y) {
  return (__m256)__builtin_ia32_hsubps256((__v8sf)__X, (__v8sf)__Y);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_maxpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_maxps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_minpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_minps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A * (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A * (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_orpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_orps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_pd(__m256d __A, __m256d __B, const int __mask) {
  return (__m256d)__builtin_ia32_shufpd256((__v4df)__A, (__v4df)__B, __mask);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_ps(__m256 __A, __m256 __B, const int __mask) {
  return (__m256)__builtin_ia32_shufps256((__v8sf)__A, (__v8sf)__B, __mask);
}
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_pd(__m256d __A, __m256d __B) {
  return (__m256d)((__v4df)__A - (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_ps(__m256 __A, __m256 __B) {
  return (__m256)((__v8sf)__A - (__v8sf)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_xorpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_xorps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_pd(__m128d __X, __m128d __Y, const int __P) {
  return (__m128d)__builtin_ia32_cmppd((__v2df)__X, (__v2df)__Y, __P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_ps(__m128 __X, __m128 __Y, const int __P) {
  return (__m128)__builtin_ia32_cmpps((__v4sf)__X, (__v4sf)__Y, __P);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_pd(__m256d __X, __m256d __Y, const int __P) {
  return (__m256d)__builtin_ia32_cmppd256((__v4df)__X, (__v4df)__Y, __P);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_ps(__m256 __X, __m256 __Y, const int __P) {
  return (__m256)__builtin_ia32_cmpps256((__v8sf)__X, (__v8sf)__Y, __P);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_sd(__m128d __X, __m128d __Y, const int __P) {
  return (__m128d)__builtin_ia32_cmpsd((__v2df)__X, (__v2df)__Y, __P);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_ss(__m128 __X, __m128 __Y, const int __P) {
  return (__m128)__builtin_ia32_cmpss((__v4sf)__X, (__v4sf)__Y, __P);
}
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsi256_si32(__m256i __A) {
  __v8si __B = (__v8si)__A;
  return __B[0];
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_pd(__m128i __A) {
  return (__m256d)__builtin_ia32_cvtdq2pd256((__v4si)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_ps(__m256i __A) {
  return (__m256)__builtin_ia32_cvtdq2ps256((__v8si)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_ps(__m256d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps256((__v4df)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epi32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2dq256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_pd(__m128 __A) {
  return (__m256d)__builtin_ia32_cvtps2pd256((__v4sf)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epi32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq256((__v4df)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epi32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq256((__v4df)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epi32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2dq256((__v8sf)__A);
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsd_f64(__m256d __A) {
  return __A[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtss_f32(__m256 __A) {
  return __A[0];
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extractf128_pd(__m256d __X, const int __N) {
  return (__m128d)__builtin_ia32_vextractf128_pd256((__v4df)__X, __N);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extractf128_ps(__m256 __X, const int __N) {
  return (__m128)__builtin_ia32_vextractf128_ps256((__v8sf)__X, __N);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extractf128_si256(__m256i __X, const int __N) {
  return (__m128i)__builtin_ia32_vextractf128_si256((__v8si)__X, __N);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extract_epi32(__m256i __X, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 2);
  return _mm_extract_epi32(__Y, __N % 4);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extract_epi16(__m256i __X, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 3);
  return _mm_extract_epi16(__Y, __N % 8);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extract_epi8(__m256i __X, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 4);
  return _mm_extract_epi8(__Y, __N % 16);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extract_epi64(__m256i __X, const int __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 1);
  return _mm_extract_epi64(__Y, __N % 2);
}
extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zeroall(void) {
  __builtin_ia32_vzeroall();
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zeroupper(void) {
  __builtin_ia32_vzeroupper();
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutevar_pd(__m128d __A, __m128i __C) {
  return (__m128d)__builtin_ia32_vpermilvarpd((__v2df)__A, (__v2di)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar_pd(__m256d __A, __m256i __C) {
  return (__m256d)__builtin_ia32_vpermilvarpd256((__v4df)__A, (__v4di)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutevar_ps(__m128 __A, __m128i __C) {
  return (__m128)__builtin_ia32_vpermilvarps((__v4sf)__A, (__v4si)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar_ps(__m256 __A, __m256i __C) {
  return (__m256)__builtin_ia32_vpermilvarps256((__v8sf)__A, (__v8si)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permute_pd(__m128d __X, const int __C) {
  return (__m128d)__builtin_ia32_vpermilpd((__v2df)__X, __C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute_pd(__m256d __X, const int __C) {
  return (__m256d)__builtin_ia32_vpermilpd256((__v4df)__X, __C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permute_ps(__m128 __X, const int __C) {
  return (__m128)__builtin_ia32_vpermilps((__v4sf)__X, __C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute_ps(__m256 __X, const int __C) {
  return (__m256)__builtin_ia32_vpermilps256((__v8sf)__X, __C);
}
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute2f128_pd(__m256d __X, __m256d __Y, const int __C) {
  return (__m256d)__builtin_ia32_vperm2f128_pd256((__v4df)__X, (__v4df)__Y,
                                                  __C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute2f128_ps(__m256 __X, __m256 __Y, const int __C) {
  return (__m256)__builtin_ia32_vperm2f128_ps256((__v8sf)__X, (__v8sf)__Y, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute2f128_si256(__m256i __X, __m256i __Y, const int __C) {
  return (__m256i)__builtin_ia32_vperm2f128_si256((__v8si)__X, (__v8si)__Y,
                                                  __C);
}
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcast_ss(float const *__X) {
  return (__m128)__builtin_ia32_vbroadcastss(__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_sd(double const *__X) {
  return (__m256d)__builtin_ia32_vbroadcastsd256(__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_ss(float const *__X) {
  return (__m256)__builtin_ia32_vbroadcastss256(__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_pd(__m128d const *__X) {
  return (__m256d)__builtin_ia32_vbroadcastf128_pd256(__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_ps(__m128 const *__X) {
  return (__m256)__builtin_ia32_vbroadcastf128_ps256(__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insertf128_pd(__m256d __X, __m128d __Y, const int __O) {
  return (__m256d)__builtin_ia32_vinsertf128_pd256((__v4df)__X, (__v2df)__Y,
                                                   __O);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insertf128_ps(__m256 __X, __m128 __Y, const int __O) {
  return (__m256)__builtin_ia32_vinsertf128_ps256((__v8sf)__X, (__v4sf)__Y,
                                                  __O);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insertf128_si256(__m256i __X, __m128i __Y, const int __O) {
  return (__m256i)__builtin_ia32_vinsertf128_si256((__v8si)__X, (__v4si)__Y,
                                                   __O);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insert_epi32(__m256i __X, int __D, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 2);
  __Y = _mm_insert_epi32(__Y, __D, __N % 4);
  return _mm256_insertf128_si256(__X, __Y, __N >> 2);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insert_epi16(__m256i __X, int __D, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 3);
  __Y = _mm_insert_epi16(__Y, __D, __N % 8);
  return _mm256_insertf128_si256(__X, __Y, __N >> 3);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insert_epi8(__m256i __X, int __D, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 4);
  __Y = _mm_insert_epi8(__Y, __D, __N % 16);
  return _mm256_insertf128_si256(__X, __Y, __N >> 4);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insert_epi64(__m256i __X, long long __D, int const __N) {
  __m128i __Y = _mm256_extractf128_si256(__X, __N >> 1);
  __Y = _mm_insert_epi64(__Y, __D, __N % 2);
  return _mm256_insertf128_si256(__X, __Y, __N >> 1);
}
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_pd(double const *__P) {
  return *(__m256d *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_pd(double *__P, __m256d __A) {
  *(__m256d *)__P = __A;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_ps(float const *__P) {
  return *(__m256 *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_ps(float *__P, __m256 __A) {
  *(__m256 *)__P = __A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_pd(double const *__P) {
  return *(__m256d_u *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_pd(double *__P, __m256d __A) {
  *(__m256d_u *)__P = __A;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_ps(float const *__P) {
  return *(__m256_u *)__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_ps(float *__P, __m256 __A) {
  *(__m256_u *)__P = __A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_si256(__m256i const *__P) {
  return *__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_si256(__m256i *__P, __m256i __A) {
  *__P = __A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_si256(__m256i_u const *__P) {
  return *__P;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_si256(__m256i_u *__P, __m256i __A) {
  *__P = __A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_pd(double const *__P, __m128i __M) {
  return (__m128d)__builtin_ia32_maskloadpd((const __v2df *)__P, (__v2di)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_pd(double *__P, __m128i __M, __m128d __A) {
  __builtin_ia32_maskstorepd((__v2df *)__P, (__v2di)__M, (__v2df)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_pd(double const *__P, __m256i __M) {
  return (__m256d)__builtin_ia32_maskloadpd256((const __v4df *)__P,
                                               (__v4di)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_pd(double *__P, __m256i __M, __m256d __A) {
  __builtin_ia32_maskstorepd256((__v4df *)__P, (__v4di)__M, (__v4df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_ps(float const *__P, __m128i __M) {
  return (__m128)__builtin_ia32_maskloadps((const __v4sf *)__P, (__v4si)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_ps(float *__P, __m128i __M, __m128 __A) {
  __builtin_ia32_maskstoreps((__v4sf *)__P, (__v4si)__M, (__v4sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_ps(float const *__P, __m256i __M) {
  return (__m256)__builtin_ia32_maskloadps256((const __v8sf *)__P, (__v8si)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_ps(float *__P, __m256i __M, __m256 __A) {
  __builtin_ia32_maskstoreps256((__v8sf *)__P, (__v8si)__M, (__v8sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movehdup_ps(__m256 __X) {
  return (__m256)__builtin_ia32_movshdup256((__v8sf)__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_moveldup_ps(__m256 __X) {
  return (__m256)__builtin_ia32_movsldup256((__v8sf)__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movedup_pd(__m256d __X) {
  return (__m256d)__builtin_ia32_movddup256((__v4df)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_lddqu_si256(__m256i const *__P) {
  return (__m256i)__builtin_ia32_lddqu256((char const *)__P);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_si256(__m256i *__A, __m256i __B) {
  __builtin_ia32_movntdq256((__v4di *)__A, (__v4di)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_pd(double *__A, __m256d __B) {
  __builtin_ia32_movntpd256(__A, (__v4df)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_ps(float *__P, __m256 __A) {
  __builtin_ia32_movntps256(__P, (__v8sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rcpps256((__v8sf)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rsqrtps256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sqrt_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_sqrtpd256((__v4df)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sqrt_ps(__m256 __A) {
  return (__m256)__builtin_ia32_sqrtps256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_round_pd(__m256d __V, const int __M) {
  return (__m256d)__builtin_ia32_roundpd256((__v4df)__V, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_round_ps(__m256 __V, const int __M) {
  return (__m256)__builtin_ia32_roundps256((__v8sf)__V, __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpckhpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpcklpd256((__v4df)__A, (__v4df)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpckhps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpcklps256((__v8sf)__A, (__v8sf)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testz_pd(__m128d __M, __m128d __V) {
  return __builtin_ia32_vtestzpd((__v2df)__M, (__v2df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testc_pd(__m128d __M, __m128d __V) {
  return __builtin_ia32_vtestcpd((__v2df)__M, (__v2df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testnzc_pd(__m128d __M, __m128d __V) {
  return __builtin_ia32_vtestnzcpd((__v2df)__M, (__v2df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testz_ps(__m128 __M, __m128 __V) {
  return __builtin_ia32_vtestzps((__v4sf)__M, (__v4sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testc_ps(__m128 __M, __m128 __V) {
  return __builtin_ia32_vtestcps((__v4sf)__M, (__v4sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testnzc_ps(__m128 __M, __m128 __V) {
  return __builtin_ia32_vtestnzcps((__v4sf)__M, (__v4sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testz_pd(__m256d __M, __m256d __V) {
  return __builtin_ia32_vtestzpd256((__v4df)__M, (__v4df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testc_pd(__m256d __M, __m256d __V) {
  return __builtin_ia32_vtestcpd256((__v4df)__M, (__v4df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testnzc_pd(__m256d __M, __m256d __V) {
  return __builtin_ia32_vtestnzcpd256((__v4df)__M, (__v4df)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testz_ps(__m256 __M, __m256 __V) {
  return __builtin_ia32_vtestzps256((__v8sf)__M, (__v8sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testc_ps(__m256 __M, __m256 __V) {
  return __builtin_ia32_vtestcps256((__v8sf)__M, (__v8sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testnzc_ps(__m256 __M, __m256 __V) {
  return __builtin_ia32_vtestnzcps256((__v8sf)__M, (__v8sf)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testz_si256(__m256i __M, __m256i __V) {
  return __builtin_ia32_ptestz256((__v4di)__M, (__v4di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testc_si256(__m256i __M, __m256i __V) {
  return __builtin_ia32_ptestc256((__v4di)__M, (__v4di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testnzc_si256(__m256i __M, __m256i __V) {
  return __builtin_ia32_ptestnzc256((__v4di)__M, (__v4di)__V);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movemask_pd(__m256d __A) {
  return __builtin_ia32_movmskpd256((__v4df)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movemask_ps(__m256 __A) {
  return __builtin_ia32_movmskps256((__v8sf)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_pd(void) {
  __m256d __Y = __Y;
  return __Y;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_ps(void) {
  __m256 __Y = __Y;
  return __Y;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_undefined_si256(void) {
  __m256i __Y = __Y;
  return __Y;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_pd(void) {
  return __extension__(__m256d){0.0, 0.0, 0.0, 0.0};
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_ps(void) {
  return __extension__(__m256){0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setzero_si256(void) {
  return __extension__(__m256i)(__v4di){0, 0, 0, 0};
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_pd(double __A, double __B, double __C, double __D) {
  return __extension__(__m256d){__D, __C, __B, __A};
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_ps(float __A, float __B, float __C, float __D, float __E,
                  float __F, float __G, float __H) {
  return __extension__(__m256){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_epi32(int __A, int __B, int __C, int __D, int __E, int __F,
                     int __G, int __H) {
  return __extension__(__m256i)(__v8si){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_epi16(short __q15, short __q14, short __q13, short __q12,
                     short __q11, short __q10, short __q09, short __q08,
                     short __q07, short __q06, short __q05, short __q04,
                     short __q03, short __q02, short __q01, short __q00) {
  return __extension__(__m256i)(__v16hi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_epi8(char __q31, char __q30, char __q29, char __q28, char __q27,
                    char __q26, char __q25, char __q24, char __q23, char __q22,
                    char __q21, char __q20, char __q19, char __q18, char __q17,
                    char __q16, char __q15, char __q14, char __q13, char __q12,
                    char __q11, char __q10, char __q09, char __q08, char __q07,
                    char __q06, char __q05, char __q04, char __q03, char __q02,
                    char __q01, char __q00) {
  return __extension__(__m256i)(__v32qi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
      __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
      __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31};
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_set_epi64x(long long __A, long long __B, long long __C, long long __D) {
  return __extension__(__m256i)(__v4di){__D, __C, __B, __A};
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_pd(double __A) {
  return __extension__(__m256d){__A, __A, __A, __A};
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_ps(float __A) {
  return __extension__(__m256){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi32(int __A) {
  return __extension__(__m256i)(__v8si){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi16(short __A) {
  return _mm256_set_epi16(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                          __A, __A, __A, __A, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi8(char __A) {
  return _mm256_set_epi8(__A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                         __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
                         __A, __A, __A, __A, __A, __A, __A, __A, __A, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set1_epi64x(long long __A) {
  return __extension__(__m256i)(__v4di){__A, __A, __A, __A};
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_pd(double __A, double __B, double __C, double __D) {
  return _mm256_set_pd(__D, __C, __B, __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_ps(float __A, float __B, float __C, float __D, float __E,
                   float __F, float __G, float __H) {
  return _mm256_set_ps(__H, __G, __F, __E, __D, __C, __B, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_epi32(int __A, int __B, int __C, int __D, int __E, int __F,
                      int __G, int __H) {
  return _mm256_set_epi32(__H, __G, __F, __E, __D, __C, __B, __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_epi16(short __q15, short __q14, short __q13, short __q12,
                      short __q11, short __q10, short __q09, short __q08,
                      short __q07, short __q06, short __q05, short __q04,
                      short __q03, short __q02, short __q01, short __q00) {
  return _mm256_set_epi16(__q00, __q01, __q02, __q03, __q04, __q05, __q06,
                          __q07, __q08, __q09, __q10, __q11, __q12, __q13,
                          __q14, __q15);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_epi8(char __q31, char __q30, char __q29, char __q28, char __q27,
                     char __q26, char __q25, char __q24, char __q23, char __q22,
                     char __q21, char __q20, char __q19, char __q18, char __q17,
                     char __q16, char __q15, char __q14, char __q13, char __q12,
                     char __q11, char __q10, char __q09, char __q08, char __q07,
                     char __q06, char __q05, char __q04, char __q03, char __q02,
                     char __q01, char __q00) {
  return _mm256_set_epi8(__q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
                         __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
                         __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
                         __q24, __q25, __q26, __q27, __q28, __q29, __q30,
                         __q31);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_setr_epi64x(long long __A, long long __B, long long __C, long long __D) {
  return _mm256_set_epi64x(__D, __C, __B, __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd_ps(__m256d __A) {
  return (__m256)__A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd_si256(__m256d __A) {
  return (__m256i)__A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps_pd(__m256 __A) {
  return (__m256d)__A;
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps_si256(__m256 __A) {
  return (__m256i)__A;
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_ps(__m256i __A) {
  return (__m256)__A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_pd(__m256i __A) {
  return (__m256d)__A;
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd256_pd128(__m256d __A) {
  return (__m128d)__builtin_ia32_pd_pd256((__v4df)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps256_ps128(__m256 __A) {
  return (__m128)__builtin_ia32_ps_ps256((__v8sf)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi256_si128(__m256i __A) {
  return (__m128i)__builtin_ia32_si_si256((__v8si)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castpd128_pd256(__m128d __A) {
  return (__m256d)__builtin_ia32_pd256_pd((__v2df)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castps128_ps256(__m128 __A) {
  return (__m256)__builtin_ia32_ps256_ps((__v4sf)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_castsi128_si256(__m128i __A) {
  return (__m256i)__builtin_ia32_si256_si((__v4si)__A);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextpd128_pd256(__m128d __A) {
  return _mm256_insertf128_pd(_mm256_setzero_pd(), __A, 0);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextps128_ps256(__m128 __A) {
  return _mm256_insertf128_ps(_mm256_setzero_ps(), __A, 0);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_zextsi128_si256(__m128i __A) {
  return _mm256_insertf128_si256(_mm256_setzero_si256(), __A, 0);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_m128(__m128 __H, __m128 __L) {
  return _mm256_insertf128_ps(_mm256_castps128_ps256(__L), __H, 1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_m128d(__m128d __H, __m128d __L) {
  return _mm256_insertf128_pd(_mm256_castpd128_pd256(__L), __H, 1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_set_m128i(__m128i __H, __m128i __L) {
  return _mm256_insertf128_si256(_mm256_castsi128_si256(__L), __H, 1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_m128(__m128 __L, __m128 __H) {
  return _mm256_set_m128(__H, __L);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_m128d(__m128d __L, __m128d __H) {
  return _mm256_set_m128d(__H, __L);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_setr_m128i(__m128i __L, __m128i __H) {
  return _mm256_set_m128i(__H, __L);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu2_m128(float const *__PH, float const *__PL) {
  return _mm256_insertf128_ps(_mm256_castps128_ps256(_mm_loadu_ps(__PL)),
                              _mm_loadu_ps(__PH), 1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu2_m128(float *__PH, float *__PL, __m256 __A) {
  _mm_storeu_ps(__PL, _mm256_castps256_ps128(__A));
  _mm_storeu_ps(__PH, _mm256_extractf128_ps(__A, 1));
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu2_m128d(double const *__PH, double const *__PL) {
  return _mm256_insertf128_pd(_mm256_castpd128_pd256(_mm_loadu_pd(__PL)),
                              _mm_loadu_pd(__PH), 1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu2_m128d(double *__PH, double *__PL, __m256d __A) {
  _mm_storeu_pd(__PL, _mm256_castpd256_pd128(__A));
  _mm_storeu_pd(__PH, _mm256_extractf128_pd(__A, 1));
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu2_m128i(__m128i_u const *__PH, __m128i_u const *__PL) {
  return _mm256_insertf128_si256(_mm256_castsi128_si256(_mm_loadu_si128(__PL)),
                                 _mm_loadu_si128(__PH), 1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu2_m128i(__m128i_u *__PH, __m128i_u *__PL, __m256i __A) {
  _mm_storeu_si128(__PL, _mm256_castsi256_si128(__A));
  _mm_storeu_si128(__PH, _mm256_extractf128_si256(__A, 1));
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbusd_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpbusd_v8si((__v8si)__A, (__v8si)__B,
                                               (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbusd_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpbusd_v4si((__v4si)__A, (__v4si)__B,
                                               (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbusds_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpbusds_v8si((__v8si)__A, (__v8si)__B,
                                                (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbusds_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpbusds_v4si((__v4si)__A, (__v4si)__B,
                                                (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpwssd_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpwssd_v8si((__v8si)__A, (__v8si)__B,
                                               (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpwssd_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpwssd_v4si((__v4si)__A, (__v4si)__B,
                                               (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpwssds_avx_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpdpwssds_v8si((__v8si)__A, (__v8si)__B,
                                                (__v8si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpwssds_avx_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpdpwssds_v4si((__v4si)__A, (__v4si)__B,
                                                (__v4si)__C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mpsadbw_epu8(__m256i __X, __m256i __Y, const int __M) {
  return (__m256i)__builtin_ia32_mpsadbw256((__v32qi)__X, (__v32qi)__Y, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi8(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsb256((__v32qi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi16(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsw256((__v16hi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsd256((__v8si)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packs_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packssdw256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packs_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packsswb256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packus_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packusdw256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_packus_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packuswb256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qu)__A + (__v32qu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hu)__A + (__v16hu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A + (__v8su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_add_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A + (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_adds_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_alignr_epi8(__m256i __A, __m256i __B, const int __N) {
  return (__m256i)__builtin_ia32_palignr256((__v4di)__A, (__v4di)__B, __N * 8);
}
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_and_si256(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A & (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_andnot_si256(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_andnotsi256((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_avg_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_avg_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blendv_epi8(__m256i __X, __m256i __Y, __m256i __M) {
  return (__m256i)__builtin_ia32_pblendvb256((__v32qi)__X, (__v32qi)__Y,
                                             (__v32qi)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blend_epi16(__m256i __X, __m256i __Y, const int __M) {
  return (__m256i)__builtin_ia32_pblendw256((__v16hi)__X, (__v16hi)__Y, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qi)__A == (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hi)__A == (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8si)__A == (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4di)__A == (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qs)__A > (__v32qs)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hi)__A > (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8si)__A > (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4di)__A > (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phaddw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadd_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phaddd256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hadds_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phaddsw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phsubw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsub_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phsubd256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_hsubs_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_phsubsw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maddubs_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmaddubsw256((__v32qi)__X, (__v32qi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_madd_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaddwd256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsd256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxub256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxud256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsd256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminub256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminud256((__v8si)__A, (__v8si)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movemask_epi8(__m256i __A) {
  return __builtin_ia32_pmovmskb256((__v32qi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi8_epi16(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxbw256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi8_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxbd256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi8_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxbq256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxwd256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxwq256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxdq256((__v4si)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu8_epi16(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxbw256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu8_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxbd256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu8_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxbq256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu16_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxwd256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu16_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxwq256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxdq256((__v4si)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuldq256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mulhrs_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmulhrsw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mulhi_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhuw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mulhi_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mullo_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hu)__A * (__v16hu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mullo_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A * (__v8su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mul_epu32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmuludq256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_si256(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A | (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sad_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psadbw256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_epi8(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pshufb256((__v32qi)__X, (__v32qi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_epi32(__m256i __A, const int __mask) {
  return (__m256i)__builtin_ia32_pshufd256((__v8si)__A, __mask);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shufflehi_epi16(__m256i __A, const int __mask) {
  return (__m256i)__builtin_ia32_pshufhw256((__v16hi)__A, __mask);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shufflelo_epi16(__m256i __A, const int __mask) {
  return (__m256i)__builtin_ia32_pshuflw256((__v16hi)__A, __mask);
}
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sign_epi8(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psignb256((__v32qi)__X, (__v32qi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sign_epi16(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psignw256((__v16hi)__X, (__v16hi)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sign_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psignd256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_bslli_epi128(__m256i __A, const int __N) {
  return (__m256i)__builtin_ia32_pslldqi256(__A, __N * 8);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_si256(__m256i __A, const int __N) {
  return (__m256i)__builtin_ia32_pslldqi256(__A, __N * 8);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_epi16(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllwi256((__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sll_epi16(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_epi32(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_pslldi256((__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sll_epi32(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_pslld256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_slli_epi64(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllqi256((__v4di)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sll_epi64(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllq256((__v4di)__A, (__v2di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srai_epi16(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrawi256((__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sra_epi16(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srai_epi32(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psradi256((__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sra_epi32(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrad256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_bsrli_epi128(__m256i __A, const int __N) {
  return (__m256i)__builtin_ia32_psrldqi256(__A, __N * 8);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_si256(__m256i __A, const int __N) {
  return (__m256i)__builtin_ia32_psrldqi256(__A, __N * 8);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_epi16(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrlwi256((__v16hi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srl_epi16(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlw256((__v16hi)__A, (__v8hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_epi32(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrldi256((__v8si)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srl_epi32(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrld256((__v8si)__A, (__v4si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srli_epi64(__m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psrlqi256((__v4di)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srl_epi64(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlq256((__v4di)__A, (__v2di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi8(__m256i __A, __m256i __B) {
  return (__m256i)((__v32qu)__A - (__v32qu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi16(__m256i __A, __m256i __B) {
  return (__m256i)((__v16hu)__A - (__v16hu)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A - (__v8su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sub_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A - (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epu8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusb256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_subs_epu16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusw256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhbw256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhwd256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhdq256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpackhi_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhqdq256((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklbw256((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklwd256((__v16hi)__A, (__v16hi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckldq256((__v8si)__A, (__v8si)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_unpacklo_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklqdq256((__v4di)__A, (__v4di)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_si256(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A ^ (__v4du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_stream_load_si256(__m256i const *__X) {
  return (__m256i)__builtin_ia32_movntdqa256((__v4di *)__X);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastss_ps(__m128 __X) {
  return (__m128)__builtin_ia32_vbroadcastss_ps((__v4sf)__X);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastss_ps(__m128 __X) {
  return (__m256)__builtin_ia32_vbroadcastss_ps256((__v4sf)__X);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastsd_pd(__m128d __X) {
  return (__m256d)__builtin_ia32_vbroadcastsd_pd256((__v2df)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastsi128_si256(__m128i __X) {
  return (__m256i)__builtin_ia32_vbroadcastsi256((__v2di)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_blend_epi32(__m128i __X, __m128i __Y, const int __M) {
  return (__m128i)__builtin_ia32_pblendd128((__v4si)__X, (__v4si)__Y, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_blend_epi32(__m256i __X, __m256i __Y, const int __M) {
  return (__m256i)__builtin_ia32_pblendd256((__v8si)__X, (__v8si)__Y, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastb_epi8(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastb256((__v16qi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastw_epi16(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastw256((__v8hi)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastd_epi32(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastd256((__v4si)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastq_epi64(__m128i __X) {
  return (__m256i)__builtin_ia32_pbroadcastq256((__v2di)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastb_epi8(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastb128((__v16qi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastw_epi16(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastw128((__v8hi)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastd_epi32(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastd128((__v4si)__X);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastq_epi64(__m128i __X) {
  return (__m128i)__builtin_ia32_pbroadcastq128((__v2di)__X);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar8x32_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256((__v8si)__X, (__v8si)__Y);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute4x64_pd(__m256d __X, const int __M) {
  return (__m256d)__builtin_ia32_permdf256((__v4df)__X, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutevar8x32_ps(__m256 __X, __m256i __Y) {
  return (__m256)__builtin_ia32_permvarsf256((__v8sf)__X, (__v8si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute4x64_epi64(__m256i __X, const int __M) {
  return (__m256i)__builtin_ia32_permdi256((__v4di)__X, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permute2x128_si256(__m256i __X, __m256i __Y, const int __M) {
  return (__m256i)__builtin_ia32_permti256((__v4di)__X, (__v4di)__Y, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extracti128_si256(__m256i __X, const int __M) {
  return (__m128i)__builtin_ia32_extract128i256((__v4di)__X, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_inserti128_si256(__m256i __X, __m128i __Y, const int __M) {
  return (__m256i)__builtin_ia32_insert128i256((__v4di)__X, (__v2di)__Y, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_epi32(int const *__X, __m256i __M) {
  return (__m256i)__builtin_ia32_maskloadd256((const __v8si *)__X, (__v8si)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskload_epi64(long long const *__X, __m256i __M) {
  return (__m256i)__builtin_ia32_maskloadq256((const __v4di *)__X, (__v4di)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_epi32(int const *__X, __m128i __M) {
  return (__m128i)__builtin_ia32_maskloadd((const __v4si *)__X, (__v4si)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskload_epi64(long long const *__X, __m128i __M) {
  return (__m128i)__builtin_ia32_maskloadq((const __v2di *)__X, (__v2di)__M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_epi32(int *__X, __m256i __M, __m256i __Y) {
  __builtin_ia32_maskstored256((__v8si *)__X, (__v8si)__M, (__v8si)__Y);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskstore_epi64(long long *__X, __m256i __M, __m256i __Y) {
  __builtin_ia32_maskstoreq256((__v4di *)__X, (__v4di)__M, (__v4di)__Y);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_epi32(int *__X, __m128i __M, __m128i __Y) {
  __builtin_ia32_maskstored((__v4si *)__X, (__v4si)__M, (__v4si)__Y);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskstore_epi64(long long *__X, __m128i __M, __m128i __Y) {
  __builtin_ia32_maskstoreq((__v2di *)__X, (__v2di)__M, (__v2di)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sllv_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv8si((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sllv_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv4si((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sllv_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv4di((__v4di)__X, (__v4di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sllv_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv2di((__v2di)__X, (__v2di)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srav_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrav8si((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srav_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrav4si((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srlv_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv8si((__v8si)__X, (__v8si)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srlv_epi32(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv4si((__v4si)__X, (__v4si)__Y);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srlv_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv4di((__v4di)__X, (__v4di)__Y);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srlv_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv2di((__v2di)__X, (__v2di)__Y);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32gather_pd(double const *__base, __m128i __index, const int __scale) {
  __v2df __zero = _mm_setzero_pd();
  __v2df __mask = _mm_cmpeq_pd(__zero, __zero);

  return (__m128d)__builtin_ia32_gathersiv2df(_mm_undefined_pd(), __base,
                                              (__v4si)__index, __mask, __scale);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32gather_pd(__m128d __src, double const *__base, __m128i __index,
                          __m128d __mask, const int __scale) {
  return (__m128d)__builtin_ia32_gathersiv2df(
      (__v2df)__src, __base, (__v4si)__index, (__v2df)__mask, __scale);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_i32gather_pd(double const *__base, __m128i __index, const int __scale) {
  __v4df __zero = _mm256_setzero_pd();
  __v4df __mask = _mm256_cmp_pd(__zero, __zero, 0x00);

  return (__m256d)__builtin_ia32_gathersiv4df(_mm256_undefined_pd(), __base,
                                              (__v4si)__index, __mask, __scale);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32gather_pd(__m256d __src, double const *__base,
                             __m128i __index, __m256d __mask,
                             const int __scale) {
  return (__m256d)__builtin_ia32_gathersiv4df(
      (__v4df)__src, __base, (__v4si)__index, (__v4df)__mask, __scale);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64gather_pd(double const *__base, __m128i __index, const int __scale) {
  __v2df __src = _mm_setzero_pd();
  __v2df __mask = _mm_cmpeq_pd(__src, __src);

  return (__m128d)__builtin_ia32_gatherdiv2df(__src, __base, (__v2di)__index,
                                              __mask, __scale);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64gather_pd(__m128d __src, double const *__base, __m128i __index,
                          __m128d __mask, const int __scale) {
  return (__m128d)__builtin_ia32_gatherdiv2df(
      (__v2df)__src, __base, (__v2di)__index, (__v2df)__mask, __scale);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_i64gather_pd(double const *__base, __m256i __index, const int __scale) {
  __v4df __src = _mm256_setzero_pd();
  __v4df __mask = _mm256_cmp_pd(__src, __src, 0x00);

  return (__m256d)__builtin_ia32_gatherdiv4df(__src, __base, (__v4di)__index,
                                              __mask, __scale);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64gather_pd(__m256d __src, double const *__base,
                             __m256i __index, __m256d __mask,
                             const int __scale) {
  return (__m256d)__builtin_ia32_gatherdiv4df(
      (__v4df)__src, __base, (__v4di)__index, (__v4df)__mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32gather_ps(float const *__base, __m128i __index, const int __scale) {
  __v4sf __src = _mm_setzero_ps();
  __v4sf __mask = _mm_cmpeq_ps(__src, __src);

  return (__m128)__builtin_ia32_gathersiv4sf(__src, __base, (__v4si)__index,
                                             __mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32gather_ps(__m128 __src, float const *__base, __m128i __index,
                          __m128 __mask, const int __scale) {
  return (__m128)__builtin_ia32_gathersiv4sf(
      (__v4sf)__src, __base, (__v4si)__index, (__v4sf)__mask, __scale);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_i32gather_ps(float const *__base, __m256i __index, const int __scale) {
  __v8sf __src = _mm256_setzero_ps();
  __v8sf __mask = _mm256_cmp_ps(__src, __src, 0x00);

  return (__m256)__builtin_ia32_gathersiv8sf(__src, __base, (__v8si)__index,
                                             __mask, __scale);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32gather_ps(__m256 __src, float const *__base, __m256i __index,
                             __m256 __mask, const int __scale) {
  return (__m256)__builtin_ia32_gathersiv8sf(
      (__v8sf)__src, __base, (__v8si)__index, (__v8sf)__mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64gather_ps(float const *__base, __m128i __index, const int __scale) {
  __v4sf __src = _mm_setzero_ps();
  __v4sf __mask = _mm_cmpeq_ps(__src, __src);

  return (__m128)__builtin_ia32_gatherdiv4sf(__src, __base, (__v2di)__index,
                                             __mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64gather_ps(__m128 __src, float const *__base, __m128i __index,
                          __m128 __mask, const int __scale) {
  return (__m128)__builtin_ia32_gatherdiv4sf(
      (__v4sf)__src, __base, (__v2di)__index, (__v4sf)__mask, __scale);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_i64gather_ps(float const *__base, __m256i __index, const int __scale) {
  __v4sf __src = _mm_setzero_ps();
  __v4sf __mask = _mm_cmpeq_ps(__src, __src);

  return (__m128)__builtin_ia32_gatherdiv4sf256(__src, __base, (__v4di)__index,
                                                __mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64gather_ps(__m128 __src, float const *__base, __m256i __index,
                             __m128 __mask, const int __scale) {
  return (__m128)__builtin_ia32_gatherdiv4sf256(
      (__v4sf)__src, __base, (__v4di)__index, (__v4sf)__mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32gather_epi64(long long int const *__base, __m128i __index,
                        const int __scale) {
  __v2di __src = __extension__(__v2di){0, 0};
  __v2di __mask = __extension__(__v2di){~0, ~0};

  return (__m128i)__builtin_ia32_gathersiv2di(__src, __base, (__v4si)__index,
                                              __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32gather_epi64(__m128i __src, long long int const *__base,
                             __m128i __index, __m128i __mask,
                             const int __scale) {
  return (__m128i)__builtin_ia32_gathersiv2di(
      (__v2di)__src, __base, (__v4si)__index, (__v2di)__mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i32gather_epi64(long long int const *__base, __m128i __index,
                           const int __scale) {
  __v4di __src = __extension__(__v4di){0, 0, 0, 0};
  __v4di __mask = __extension__(__v4di){~0, ~0, ~0, ~0};

  return (__m256i)__builtin_ia32_gathersiv4di(__src, __base, (__v4si)__index,
                                              __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32gather_epi64(__m256i __src, long long int const *__base,
                                __m128i __index, __m256i __mask,
                                const int __scale) {
  return (__m256i)__builtin_ia32_gathersiv4di(
      (__v4di)__src, __base, (__v4si)__index, (__v4di)__mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64gather_epi64(long long int const *__base, __m128i __index,
                        const int __scale) {
  __v2di __src = __extension__(__v2di){0, 0};
  __v2di __mask = __extension__(__v2di){~0, ~0};

  return (__m128i)__builtin_ia32_gatherdiv2di(__src, __base, (__v2di)__index,
                                              __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64gather_epi64(__m128i __src, long long int const *__base,
                             __m128i __index, __m128i __mask,
                             const int __scale) {
  return (__m128i)__builtin_ia32_gatherdiv2di(
      (__v2di)__src, __base, (__v2di)__index, (__v2di)__mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i64gather_epi64(long long int const *__base, __m256i __index,
                           const int __scale) {
  __v4di __src = __extension__(__v4di){0, 0, 0, 0};
  __v4di __mask = __extension__(__v4di){~0, ~0, ~0, ~0};

  return (__m256i)__builtin_ia32_gatherdiv4di(__src, __base, (__v4di)__index,
                                              __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64gather_epi64(__m256i __src, long long int const *__base,
                                __m256i __index, __m256i __mask,
                                const int __scale) {
  return (__m256i)__builtin_ia32_gatherdiv4di(
      (__v4di)__src, __base, (__v4di)__index, (__v4di)__mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32gather_epi32(int const *__base, __m128i __index, const int __scale) {
  __v4si __src = __extension__(__v4si){0, 0, 0, 0};
  __v4si __mask = __extension__(__v4si){~0, ~0, ~0, ~0};

  return (__m128i)__builtin_ia32_gathersiv4si(__src, __base, (__v4si)__index,
                                              __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32gather_epi32(__m128i __src, int const *__base, __m128i __index,
                             __m128i __mask, const int __scale) {
  return (__m128i)__builtin_ia32_gathersiv4si(
      (__v4si)__src, __base, (__v4si)__index, (__v4si)__mask, __scale);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_i32gather_epi32(int const *__base, __m256i __index, const int __scale) {
  __v8si __src = __extension__(__v8si){0, 0, 0, 0, 0, 0, 0, 0};
  __v8si __mask = __extension__(__v8si){~0, ~0, ~0, ~0, ~0, ~0, ~0, ~0};

  return (__m256i)__builtin_ia32_gathersiv8si(__src, __base, (__v8si)__index,
                                              __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32gather_epi32(__m256i __src, int const *__base,
                                __m256i __index, __m256i __mask,
                                const int __scale) {
  return (__m256i)__builtin_ia32_gathersiv8si(
      (__v8si)__src, __base, (__v8si)__index, (__v8si)__mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64gather_epi32(int const *__base, __m128i __index, const int __scale) {
  __v4si __src = __extension__(__v4si){0, 0, 0, 0};
  __v4si __mask = __extension__(__v4si){~0, ~0, ~0, ~0};

  return (__m128i)__builtin_ia32_gatherdiv4si(__src, __base, (__v2di)__index,
                                              __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64gather_epi32(__m128i __src, int const *__base, __m128i __index,
                             __m128i __mask, const int __scale) {
  return (__m128i)__builtin_ia32_gatherdiv4si(
      (__v4si)__src, __base, (__v2di)__index, (__v4si)__mask, __scale);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_i64gather_epi32(int const *__base, __m256i __index, const int __scale) {
  __v4si __src = __extension__(__v4si){0, 0, 0, 0};
  __v4si __mask = __extension__(__v4si){~0, ~0, ~0, ~0};

  return (__m128i)__builtin_ia32_gatherdiv4si256(__src, __base, (__v4di)__index,
                                                 __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64gather_epi32(__m128i __src, int const *__base,
                                __m256i __index, __m128i __mask,
                                const int __scale) {
  return (__m128i)__builtin_ia32_gatherdiv4si256(
      (__v4si)__src, __base, (__v4di)__index, (__v4si)__mask, __scale);
}

typedef double __v8df __attribute__((__vector_size__(64)));
typedef float __v16sf __attribute__((__vector_size__(64)));
typedef long long __v8di __attribute__((__vector_size__(64)));
typedef unsigned long long __v8du __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));
typedef unsigned int __v16su __attribute__((__vector_size__(64)));
typedef short __v32hi __attribute__((__vector_size__(64)));
typedef unsigned short __v32hu __attribute__((__vector_size__(64)));
typedef char __v64qi __attribute__((__vector_size__(64)));
typedef unsigned char __v64qu __attribute__((__vector_size__(64)));

typedef float __m512 __attribute__((__vector_size__(64), __may_alias__));
typedef long long __m512i __attribute__((__vector_size__(64), __may_alias__));
typedef double __m512d __attribute__((__vector_size__(64), __may_alias__));

typedef float __m512_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));
typedef long long __m512i_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));
typedef double __m512d_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_int2mask(int __M) {
  return (__mmask16)__M;
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2int(__mmask16 __M) {
  return (int)__M;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi64(long long __A, long long __B, long long __C, long long __D,
                     long long __E, long long __F, long long __G,
                     long long __H) {
  return __extension__(__m512i)(__v8di){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi32(int __A, int __B, int __C, int __D, int __E, int __F,
                     int __G, int __H, int __I, int __J, int __K, int __L,
                     int __M, int __N, int __O, int __P) {
  return __extension__(__m512i)(__v16si){__P, __O, __N, __M, __L, __K,
                                         __J, __I, __H, __G, __F, __E,
                                         __D, __C, __B, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi16(short __q31, short __q30, short __q29, short __q28,
                     short __q27, short __q26, short __q25, short __q24,
                     short __q23, short __q22, short __q21, short __q20,
                     short __q19, short __q18, short __q17, short __q16,
                     short __q15, short __q14, short __q13, short __q12,
                     short __q11, short __q10, short __q09, short __q08,
                     short __q07, short __q06, short __q05, short __q04,
                     short __q03, short __q02, short __q01, short __q00) {
  return __extension__(__m512i)(__v32hi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07,
      __q08, __q09, __q10, __q11, __q12, __q13, __q14, __q15,
      __q16, __q17, __q18, __q19, __q20, __q21, __q22, __q23,
      __q24, __q25, __q26, __q27, __q28, __q29, __q30, __q31};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_epi8(char __q63, char __q62, char __q61, char __q60, char __q59,
                    char __q58, char __q57, char __q56, char __q55, char __q54,
                    char __q53, char __q52, char __q51, char __q50, char __q49,
                    char __q48, char __q47, char __q46, char __q45, char __q44,
                    char __q43, char __q42, char __q41, char __q40, char __q39,
                    char __q38, char __q37, char __q36, char __q35, char __q34,
                    char __q33, char __q32, char __q31, char __q30, char __q29,
                    char __q28, char __q27, char __q26, char __q25, char __q24,
                    char __q23, char __q22, char __q21, char __q20, char __q19,
                    char __q18, char __q17, char __q16, char __q15, char __q14,
                    char __q13, char __q12, char __q11, char __q10, char __q09,
                    char __q08, char __q07, char __q06, char __q05, char __q04,
                    char __q03, char __q02, char __q01, char __q00) {
  return __extension__(__m512i)(__v64qi){
      __q00, __q01, __q02, __q03, __q04, __q05, __q06, __q07, __q08, __q09,
      __q10, __q11, __q12, __q13, __q14, __q15, __q16, __q17, __q18, __q19,
      __q20, __q21, __q22, __q23, __q24, __q25, __q26, __q27, __q28, __q29,
      __q30, __q31, __q32, __q33, __q34, __q35, __q36, __q37, __q38, __q39,
      __q40, __q41, __q42, __q43, __q44, __q45, __q46, __q47, __q48, __q49,
      __q50, __q51, __q52, __q53, __q54, __q55, __q56, __q57, __q58, __q59,
      __q60, __q61, __q62, __q63};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_pd(double __A, double __B, double __C, double __D, double __E,
                  double __F, double __G, double __H) {
  return __extension__(__m512d){__H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set_ps(float __A, float __B, float __C, float __D, float __E,
                  float __F, float __G, float __H, float __I, float __J,
                  float __K, float __L, float __M, float __N, float __O,
                  float __P) {
  return __extension__(__m512){__P, __O, __N, __M, __L, __K, __J, __I,
                               __H, __G, __F, __E, __D, __C, __B, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_ps(void) {
  __m512 __Y = __Y;
  return __Y;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_pd(void) {
  __m512d __Y = __Y;
  return __Y;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_undefined_epi32(void) {
  __m512i __Y = __Y;
  return __Y;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi8(char __A) {
  return __extension__(__m512i)(__v64qi){
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi16(short __A) {
  return __extension__(__m512i)(__v32hi){
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A, __A,
      __A, __A, __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_pd(double __A) {
  return __extension__(__m512d)(__v8df){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_ps(float __A) {
  return __extension__(__m512)(__v16sf){__A, __A, __A, __A, __A, __A, __A, __A,
                                        __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set4_epi32(int __A, int __B, int __C, int __D) {
  return __extension__(__m512i)(__v16si){__D, __C, __B, __A, __D, __C,
                                         __B, __A, __D, __C, __B, __A,
                                         __D, __C, __B, __A};
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_set4_epi64(long long __A, long long __B, long long __C, long long __D) {
  return __extension__(__m512i)(__v8di){__D, __C, __B, __A, __D, __C, __B, __A};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set4_pd(double __A, double __B, double __C, double __D) {
  return __extension__(__m512d){__D, __C, __B, __A, __D, __C, __B, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set4_ps(float __A, float __B, float __C, float __D) {
  return __extension__(__m512){__D, __C, __B, __A, __D, __C, __B, __A,
                               __D, __C, __B, __A, __D, __C, __B, __A};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_ps(void) {
  return __extension__(__m512){0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                               0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero(void) {
  return _mm512_setzero_ps();
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_pd(void) {
  return __extension__(__m512d){0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_epi32(void) {
  return __extension__(__m512i)(__v8di){0, 0, 0, 0, 0, 0, 0, 0};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_setzero_si512(void) {
  return __extension__(__m512i)(__v8di){0, 0, 0, 0, 0, 0, 0, 0};
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movapd512_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movapd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movaps512_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movaps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_pd(void const *__P) {
  return *(__m512d *)__P;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_pd(__m512d __W, __mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadapd512_mask((const __v8df *)__P,
                                                 (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_pd(__mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadapd512_mask(
      (const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_pd(void *__P, __m512d __A) {
  *(__m512d *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_pd(void *__P, __mmask8 __U, __m512d __A) {
  __builtin_ia32_storeapd512_mask((__v8df *)__P, (__v8df)__A, (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_ps(void const *__P) {
  return *(__m512 *)__P;
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_ps(__m512 __W, __mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadaps512_mask((const __v16sf *)__P,
                                                (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_ps(__mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadaps512_mask(
      (const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_ps(void *__P, __m512 __A) {
  *(__m512 *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_ps(void *__P, __mmask16 __U, __m512 __A) {
  __builtin_ia32_storeaps512_mask((__v16sf *)__P, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa64_512_mask((__v8di)__A, (__v8di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa64_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_epi64(void const *__P) {
  return *(__m512i *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_epi64(__m512i __W, __mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa64load512_mask(
      (const __v8di *)__P, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_epi64(__mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa64load512_mask(
      (const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_epi64(void *__P, __m512i __A) {
  *(__m512i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_epi64(void *__P, __mmask8 __U, __m512i __A) {
  __builtin_ia32_movdqa64store512_mask((__v8di *)__P, (__v8di)__A,
                                       (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa32_512_mask((__v16si)__A, (__v16si)__W,
                                                   (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdqa32_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_si512(void const *__P) {
  return *(__m512i *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_load_epi32(void const *__P) {
  return *(__m512i *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_load_epi32(__m512i __W, __mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa32load512_mask(
      (const __v16si *)__P, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_load_epi32(__mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_movdqa32load512_mask(
      (const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_si512(void *__P, __m512i __A) {
  *(__m512i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_store_epi32(void *__P, __m512i __A) {
  *(__m512i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_store_epi32(void *__P, __mmask16 __U, __m512i __A) {
  __builtin_ia32_movdqa32store512_mask((__v16si *)__P, (__v16si)__A,
                                       (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullo_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A * (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mullo_epi32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulld512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullo_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulld512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullox_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A * (__v8du)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullox_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return _mm512_mask_mov_epi64(__W, __M, _mm512_mullox_epi64(__A, __B));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sllv_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv16si_mask(
      (__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sllv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sllv_epi32(__mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srav_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav16si_mask(
      (__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srav_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srav_epi32(__mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srlv_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv16si_mask(
      (__v16si)__X, (__v16si)__Y, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srlv_epi32(__m512i __W, __mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srlv_epi32(__mmask16 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv16si_mask((__v16si)__X, (__v16si)__Y,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A + (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A - (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sllv_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sllv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv8di_mask((__v8di)__X, (__v8di)__Y,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sllv_epi64(__mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psllv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srav_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srav_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav8di_mask((__v8di)__X, (__v8di)__Y,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srav_epi64(__mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrav8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srlv_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srlv_epi64(__m512i __W, __mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv8di_mask((__v8di)__X, (__v8di)__Y,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srlv_epi64(__mmask8 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_psrlv8di_mask(
      (__v8di)__X, (__v8di)__Y, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A + (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_add_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuldq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_epi32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuldq512_mask((__v16si)__X, (__v16si)__Y,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_epi32(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuldq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A - (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sub_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_epu32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuludq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_epu32(__m512i __W, __mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuludq512_mask((__v16si)__X, (__v16si)__Y,
                                                 (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_epu32(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmuludq512_mask(
      (__v16si)__X, (__v16si)__Y, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_slli_epi64(__m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psllqi512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_slli_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                           unsigned int __B) {
  return (__m512i)__builtin_ia32_psllqi512_mask((__v8di)__A, __B, (__v8di)__W,
                                                (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_slli_epi64(__mmask8 __U, __m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psllqi512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sll_epi64(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sll_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllq512_mask((__v8di)__A, (__v2di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sll_epi64(__mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srli_epi64(__m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psrlqi512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srli_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                           unsigned int __B) {
  return (__m512i)__builtin_ia32_psrlqi512_mask((__v8di)__A, __B, (__v8di)__W,
                                                (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srli_epi64(__mmask8 __U, __m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psrlqi512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srl_epi64(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srl_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlq512_mask((__v8di)__A, (__v2di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srl_epi64(__mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srai_epi64(__m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psraqi512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srai_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                           unsigned int __B) {
  return (__m512i)__builtin_ia32_psraqi512_mask((__v8di)__A, __B, (__v8di)__W,
                                                (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srai_epi64(__mmask8 __U, __m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psraqi512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sra_epi64(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sra_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraq512_mask((__v8di)__A, (__v2di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sra_epi64(__mmask8 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraq512_mask(
      (__v8di)__A, (__v2di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_slli_epi32(__m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_pslldi512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_slli_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                           unsigned int __B) {
  return (__m512i)__builtin_ia32_pslldi512_mask((__v16si)__A, __B, (__v16si)__W,
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_slli_epi32(__mmask16 __U, __m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_pslldi512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sll_epi32(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_pslld512_mask(
      (__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sll_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sll_epi32(__mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_pslld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srli_epi32(__m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psrldi512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srli_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                           unsigned int __B) {
  return (__m512i)__builtin_ia32_psrldi512_mask((__v16si)__A, __B, (__v16si)__W,
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srli_epi32(__mmask16 __U, __m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psrldi512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srl_epi32(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrld512_mask(
      (__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srl_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srl_epi32(__mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrld512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srai_epi32(__m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psradi512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srai_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                           unsigned int __B) {
  return (__m512i)__builtin_ia32_psradi512_mask((__v16si)__A, __B, (__v16si)__W,
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srai_epi32(__mmask16 __U, __m512i __A, unsigned int __B) {
  return (__m512i)__builtin_ia32_psradi512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sra_epi32(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrad512_mask(
      (__v16si)__A, (__v4si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sra_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sra_epi32(__mmask16 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrad512_mask((__v16si)__A, (__v4si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_addsd_round((__v2df)__A, (__v2df)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                          const int __R) {
  return (__m128d)__builtin_ia32_addsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_add_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_addsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_add_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_addss_round((__v4sf)__A, (__v4sf)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                          const int __R) {
  return (__m128)__builtin_ia32_addss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_add_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_addss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_subsd_round((__v2df)__A, (__v2df)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                          const int __R) {
  return (__m128d)__builtin_ia32_subsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_sub_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_subsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sub_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_subss_round((__v4sf)__A, (__v4sf)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                          const int __R) {
  return (__m128)__builtin_ia32_subss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_sub_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_subss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ternarylogic_epi64(__m512i __A, __m512i __B, __m512i __C,
                              const int __imm) {
  return (__m512i)__builtin_ia32_pternlogq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)__C, __imm, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ternarylogic_epi64(__m512i __A, __mmask8 __U, __m512i __B,
                                   __m512i __C, const int __imm) {
  return (__m512i)__builtin_ia32_pternlogq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)__C, __imm, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_ternarylogic_epi64(__mmask8 __U, __m512i __A, __m512i __B,
                                    __m512i __C, const int __imm) {
  return (__m512i)__builtin_ia32_pternlogq512_maskz(
      (__v8di)__A, (__v8di)__B, (__v8di)__C, __imm, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ternarylogic_epi32(__m512i __A, __m512i __B, __m512i __C,
                              const int __imm) {
  return (__m512i)__builtin_ia32_pternlogd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)__C, __imm, (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ternarylogic_epi32(__m512i __A, __mmask16 __U, __m512i __B,
                                   __m512i __C, const int __imm) {
  return (__m512i)__builtin_ia32_pternlogd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)__C, __imm, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_ternarylogic_epi32(__mmask16 __U, __m512i __A, __m512i __B,
                                    __m512i __C, const int __imm) {
  return (__m512i)__builtin_ia32_pternlogd512_maskz(
      (__v16si)__A, (__v16si)__B, (__v16si)__C, __imm, (__mmask16)__U);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp14_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rcp14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rcp14_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rcp14pd512_mask((__v8df)__A, (__v8df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp14_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rcp14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp14_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rcp14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rcp14_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rcp14ps512_mask((__v16sf)__A, (__v16sf)__W,
                                                (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp14_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rcp14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rcp14sd((__v2df)__B, (__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rcp14sd_mask((__v2df)__B, (__v2df)__A,
                                              (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rcp14sd_mask(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rcp14ss((__v4sf)__B, (__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rcp14ss_mask((__v4sf)__B, (__v4sf)__A,
                                             (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rcp14ss_mask(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt14_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rsqrt14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rsqrt14_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rsqrt14pd512_mask((__v8df)__A, (__v8df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt14_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rsqrt14pd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt14_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rsqrt14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rsqrt14_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rsqrt14ps512_mask((__v16sf)__A, (__v16sf)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt14_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rsqrt14ps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rsqrt14sd((__v2df)__B, (__v2df)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rsqrt14sd_mask((__v2df)__B, (__v2df)__A,
                                                (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_rsqrt14sd_mask(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rsqrt14ss((__v4sf)__B, (__v4sf)__A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rsqrt14ss_mask((__v4sf)__B, (__v4sf)__A,
                                               (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_rsqrt14ss_mask(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_round_pd(__m512d __A, const int __R) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                              const int __R) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_round_pd(__mmask8 __U, __m512d __A, const int __R) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_round_ps(__m512 __A, const int __R) {
  return (__m512)__builtin_ia32_sqrtps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_round_ps(__m512 __W, __mmask16 __U, __m512 __A,
                              const int __R) {
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_round_ps(__mmask16 __U, __m512 __A, const int __R) {
  return (__m512)__builtin_ia32_sqrtps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_sqrtsd_mask_round(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                           const int __R) {
  return (__m128d)__builtin_ia32_sqrtsd_mask_round(
      (__v2df)__B, (__v2df)__A, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_sqrt_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_sqrtsd_mask_round(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sqrt_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_sqrtss_mask_round(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                           const int __R) {
  return (__m128)__builtin_ia32_sqrtss_mask_round(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_sqrt_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_sqrtss_mask_round(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi8_epi32(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi8_epi32(__m512i __W, __mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbd512_mask((__v16qi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi8_epi32(__mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi8_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi8_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbq512_mask((__v16qi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_epi32(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_epi32(__m512i __W, __mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxwd512_mask((__v16hi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_epi32(__mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxwq512_mask((__v8hi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovsxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_epi64(__m256i __X) {
  return (__m512i)__builtin_ia32_pmovsxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_epi64(__m512i __W, __mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovsxdq512_mask((__v8si)__X, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_epi64(__mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovsxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu8_epi32(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu8_epi32(__m512i __W, __mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbd512_mask((__v16qi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu8_epi32(__mmask16 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbd512_mask(
      (__v16qi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu8_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu8_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbq512_mask((__v16qi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxbq512_mask(
      (__v16qi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu16_epi32(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu16_epi32(__m512i __W, __mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxwd512_mask((__v16hi)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu16_epi32(__mmask16 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxwd512_mask(
      (__v16hi)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu16_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu16_epi64(__m512i __W, __mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxwq512_mask((__v8hi)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) {
  return (__m512i)__builtin_ia32_pmovzxwq512_mask(
      (__v8hi)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_epi64(__m256i __X) {
  return (__m512i)__builtin_ia32_pmovzxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_epi64(__m512i __W, __mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovzxdq512_mask((__v8si)__X, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_epi64(__mmask8 __U, __m256i __X) {
  return (__m512i)__builtin_ia32_pmovzxdq512_mask(
      (__v8si)__X, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_round_pd(__m512d __A, __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                             __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                              const int __R) {
  return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                             const int __R) {
  return (__m512)__builtin_ia32_addps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                              const int __R) {
  return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_round_pd(__m512d __A, __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                             __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                              const int __R) {
  return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                             const int __R) {
  return (__m512)__builtin_ia32_subps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                              const int __R) {
  return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, __R);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_round_pd(__m512d __A, __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                             __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                              const int __R) {
  return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                             const int __R) {
  return (__m512)__builtin_ia32_mulps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                              const int __R) {
  return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_round_pd(__m512d __M, __m512d __V, const int __R) {
  return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_round_pd(__m512d __W, __mmask8 __U, __m512d __M,
                             __m512d __V, const int __R) {
  return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V,
                                               (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_round_pd(__mmask8 __U, __m512d __M, __m512d __V,
                              const int __R) {
  return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                             const int __R) {
  return (__m512)__builtin_ia32_divps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                              const int __R) {
  return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_mulsd_round((__v2df)__A, (__v2df)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                          const int __R) {
  return (__m128d)__builtin_ia32_mulsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_mul_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_mulsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mul_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_mulss_round((__v4sf)__A, (__v4sf)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                          const int __R) {
  return (__m128)__builtin_ia32_mulss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_mul_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_mulss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_divsd_round((__v2df)__A, (__v2df)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                          const int __R) {
  return (__m128d)__builtin_ia32_divsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_div_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_divsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_div_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_divss_round((__v4sf)__A, (__v4sf)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                          const int __R) {
  return (__m128)__builtin_ia32_divss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_div_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_divss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_round_pd(__m512d __A, __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                             __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                              const int __R) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                             const int __R) {
  return (__m512)__builtin_ia32_maxps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                              const int __R) {
  return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_round_pd(__m512d __A, __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                             __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                              const int __R) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_round_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                             const int __R) {
  return (__m512)__builtin_ia32_minps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                              const int __R) {
  return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, __R);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_round_pd(__m512d __A, __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)_mm512_undefined_pd(),
                                                  (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_scalef_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                                __m512d __B, const int __R) {
  return (__m512d)__builtin_ia32_scalefpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                 const int __R) {
  return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)_mm512_setzero_pd(),
                                                  (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_round_ps(__m512 __A, __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_scalef_round_ps(__m512 __W, __mmask16 __U, __m512 __A,
                                __m512 __B, const int __R) {
  return (__m512)__builtin_ia32_scalefps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                 const int __R) {
  return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_setzero_ps(),
                                                 (__mmask16)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_scalefsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)-1, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                             __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_scalefsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_round_sd(__mmask8 __U, __m128d __A, __m128d __B,
                              const int __R) {
  return (__m128d)__builtin_ia32_scalefsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_scalefss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                             const int __R) {
  return (__m128)__builtin_ia32_scalefss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_scalef_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_scalefss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_fmadd_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                               __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmadd_round_pd(__m512d __A, __m512d __B, __m512d __C,
                                __mmask8 __U, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmadd_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                               __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmadd_round_ps(__m512 __A, __m512 __B, __m512 __C,
                                __mmask16 __U, const int __R) {
  return (__m512)__builtin_ia32_vfmaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmadd_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_fmsub_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                               __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsub_round_pd(__m512d __A, __m512d __B, __m512d __C,
                                __mmask8 __U, const int __R) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsub_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsub_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                               __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsub_round_ps(__m512 __A, __m512 __B, __m512 __C,
                                __mmask16 __U, const int __R) {
  return (__m512)__builtin_ia32_vfmsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsub_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_fmaddsub_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmaddsub_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                                  __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmaddsub_round_pd(__m512d __A, __m512d __B, __m512d __C,
                                   __mmask8 __U, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmaddsub_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                   __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_fmaddsub_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmaddsub_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                                  __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmaddsub_round_ps(__m512 __A, __m512 __B, __m512 __C,
                                   __mmask16 __U, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmaddsub_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                   __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_fmsubadd_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsubadd_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                                  __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsubadd_round_pd(__m512d __A, __m512d __B, __m512d __C,
                                   __mmask8 __U, const int __R) {
  return (__m512d)__builtin_ia32_vfmsubaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsubadd_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                   __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_fmsubadd_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsubadd_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                                  __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsubadd_round_ps(__m512 __A, __m512 __B, __m512 __C,
                                   __mmask16 __U, const int __R) {
  return (__m512)__builtin_ia32_vfmsubaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsubadd_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                   __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfmaddsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_fnmadd_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmadd_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                                __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmadd_round_pd(__m512d __A, __m512d __B, __m512d __C,
                                 __mmask8 __U, const int __R) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmadd_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                 __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmadd_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmadd_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                                __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmadd_round_ps(__m512 __A, __m512 __B, __m512 __C,
                                 __mmask16 __U, const int __R) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmadd_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                 __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfnmaddps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_fnmsub_round_pd(__m512d __A, __m512d __B, __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmsub_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                                __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmsub_round_pd(__m512d __A, __m512d __B, __m512d __C,
                                 __mmask8 __U, const int __R) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmsub_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                 __m512d __C, const int __R) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmsub_round_ps(__m512 __A, __m512 __B, __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmsub_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                                __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmsub_round_ps(__m512 __A, __m512 __B, __m512 __C,
                                 __mmask16 __U, const int __R) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmsub_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                 __m512 __C, const int __R) {
  return (__m512)__builtin_ia32_vfnmsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, __R);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsq512_mask(
      (__v8di)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsq512_mask((__v8di)__A, (__v8di)__W,
                                               (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsq512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsd512_mask(
      (__v16si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsd512_mask((__v16si)__A, (__v16si)__W,
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsd512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastss_ps(__m128 __A) {
  return (__m512)__builtin_ia32_broadcastss512(
      (__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastss_ps(__m512 __O, __mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastss512((__v4sf)__A, (__v16sf)__O, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastss_ps(__mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastss512(
      (__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastsd_pd(__m128d __A) {
  return (__m512d)__builtin_ia32_broadcastsd512(
      (__v2df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastsd_pd(__m512d __O, __mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastsd512((__v2df)__A, (__v8df)__O, __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastsd_pd(__mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastsd512(
      (__v2df)__A, (__v8df)_mm512_setzero_pd(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastd_epi32(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512(
      (__v4si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastd_epi32(__m512i __O, __mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512((__v4si)__A, (__v16si)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastd_epi32(__mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512(
      (__v4si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi32(int __A) {
  return (__m512i)(__v16si){__A, __A, __A, __A, __A, __A, __A, __A,
                            __A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi32(__m512i __O, __mmask16 __M, int __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(__A, (__v16si)__O,
                                                         __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi32(__mmask16 __M, int __A) {
  return (__m512i)__builtin_ia32_pbroadcastd512_gpr_mask(
      __A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastq_epi64(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512(
      (__v2di)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastq_epi64(__m512i __O, __mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512((__v2di)__A, (__v8di)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512(
      (__v2di)__A, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_set1_epi64(long long __A) {
  return (__m512i)(__v8di){__A, __A, __A, __A, __A, __A, __A, __A};
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi64(__m512i __O, __mmask8 __M, long long __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(__A, (__v8di)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi64(__mmask8 __M, long long __A) {
  return (__m512i)__builtin_ia32_pbroadcastq512_gpr_mask(
      __A, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f32x4(__m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x4_512(
      (__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f32x4(__m512 __O, __mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x4_512((__v4sf)__A, (__v16sf)__O,
                                                   __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f32x4(__mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x4_512(
      (__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i32x4(__m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x4_512(
      (__v4si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i32x4(__m512i __O, __mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x4_512((__v4si)__A, (__v16si)__O,
                                                    __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i32x4(__mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x4_512(
      (__v4si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f64x4(__m256d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x4_512(
      (__v4df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f64x4(__m512d __O, __mmask8 __M, __m256d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x4_512((__v4df)__A, (__v8df)__O,
                                                    __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f64x4(__mmask8 __M, __m256d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x4_512(
      (__v4df)__A, (__v8df)_mm512_setzero_pd(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i64x4(__m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x4_512(
      (__v4di)__A, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i64x4(__m512i __O, __mmask8 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x4_512((__v4di)__A, (__v8di)__O,
                                                    __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i64x4(__mmask8 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x4_512(
      (__v4di)__A, (__v8di)_mm512_setzero_si512(), __M);
}

typedef enum {
  _MM_PERM_AAAA = 0x00,
  _MM_PERM_AAAB = 0x01,
  _MM_PERM_AAAC = 0x02,
  _MM_PERM_AAAD = 0x03,
  _MM_PERM_AABA = 0x04,
  _MM_PERM_AABB = 0x05,
  _MM_PERM_AABC = 0x06,
  _MM_PERM_AABD = 0x07,
  _MM_PERM_AACA = 0x08,
  _MM_PERM_AACB = 0x09,
  _MM_PERM_AACC = 0x0A,
  _MM_PERM_AACD = 0x0B,
  _MM_PERM_AADA = 0x0C,
  _MM_PERM_AADB = 0x0D,
  _MM_PERM_AADC = 0x0E,
  _MM_PERM_AADD = 0x0F,
  _MM_PERM_ABAA = 0x10,
  _MM_PERM_ABAB = 0x11,
  _MM_PERM_ABAC = 0x12,
  _MM_PERM_ABAD = 0x13,
  _MM_PERM_ABBA = 0x14,
  _MM_PERM_ABBB = 0x15,
  _MM_PERM_ABBC = 0x16,
  _MM_PERM_ABBD = 0x17,
  _MM_PERM_ABCA = 0x18,
  _MM_PERM_ABCB = 0x19,
  _MM_PERM_ABCC = 0x1A,
  _MM_PERM_ABCD = 0x1B,
  _MM_PERM_ABDA = 0x1C,
  _MM_PERM_ABDB = 0x1D,
  _MM_PERM_ABDC = 0x1E,
  _MM_PERM_ABDD = 0x1F,
  _MM_PERM_ACAA = 0x20,
  _MM_PERM_ACAB = 0x21,
  _MM_PERM_ACAC = 0x22,
  _MM_PERM_ACAD = 0x23,
  _MM_PERM_ACBA = 0x24,
  _MM_PERM_ACBB = 0x25,
  _MM_PERM_ACBC = 0x26,
  _MM_PERM_ACBD = 0x27,
  _MM_PERM_ACCA = 0x28,
  _MM_PERM_ACCB = 0x29,
  _MM_PERM_ACCC = 0x2A,
  _MM_PERM_ACCD = 0x2B,
  _MM_PERM_ACDA = 0x2C,
  _MM_PERM_ACDB = 0x2D,
  _MM_PERM_ACDC = 0x2E,
  _MM_PERM_ACDD = 0x2F,
  _MM_PERM_ADAA = 0x30,
  _MM_PERM_ADAB = 0x31,
  _MM_PERM_ADAC = 0x32,
  _MM_PERM_ADAD = 0x33,
  _MM_PERM_ADBA = 0x34,
  _MM_PERM_ADBB = 0x35,
  _MM_PERM_ADBC = 0x36,
  _MM_PERM_ADBD = 0x37,
  _MM_PERM_ADCA = 0x38,
  _MM_PERM_ADCB = 0x39,
  _MM_PERM_ADCC = 0x3A,
  _MM_PERM_ADCD = 0x3B,
  _MM_PERM_ADDA = 0x3C,
  _MM_PERM_ADDB = 0x3D,
  _MM_PERM_ADDC = 0x3E,
  _MM_PERM_ADDD = 0x3F,
  _MM_PERM_BAAA = 0x40,
  _MM_PERM_BAAB = 0x41,
  _MM_PERM_BAAC = 0x42,
  _MM_PERM_BAAD = 0x43,
  _MM_PERM_BABA = 0x44,
  _MM_PERM_BABB = 0x45,
  _MM_PERM_BABC = 0x46,
  _MM_PERM_BABD = 0x47,
  _MM_PERM_BACA = 0x48,
  _MM_PERM_BACB = 0x49,
  _MM_PERM_BACC = 0x4A,
  _MM_PERM_BACD = 0x4B,
  _MM_PERM_BADA = 0x4C,
  _MM_PERM_BADB = 0x4D,
  _MM_PERM_BADC = 0x4E,
  _MM_PERM_BADD = 0x4F,
  _MM_PERM_BBAA = 0x50,
  _MM_PERM_BBAB = 0x51,
  _MM_PERM_BBAC = 0x52,
  _MM_PERM_BBAD = 0x53,
  _MM_PERM_BBBA = 0x54,
  _MM_PERM_BBBB = 0x55,
  _MM_PERM_BBBC = 0x56,
  _MM_PERM_BBBD = 0x57,
  _MM_PERM_BBCA = 0x58,
  _MM_PERM_BBCB = 0x59,
  _MM_PERM_BBCC = 0x5A,
  _MM_PERM_BBCD = 0x5B,
  _MM_PERM_BBDA = 0x5C,
  _MM_PERM_BBDB = 0x5D,
  _MM_PERM_BBDC = 0x5E,
  _MM_PERM_BBDD = 0x5F,
  _MM_PERM_BCAA = 0x60,
  _MM_PERM_BCAB = 0x61,
  _MM_PERM_BCAC = 0x62,
  _MM_PERM_BCAD = 0x63,
  _MM_PERM_BCBA = 0x64,
  _MM_PERM_BCBB = 0x65,
  _MM_PERM_BCBC = 0x66,
  _MM_PERM_BCBD = 0x67,
  _MM_PERM_BCCA = 0x68,
  _MM_PERM_BCCB = 0x69,
  _MM_PERM_BCCC = 0x6A,
  _MM_PERM_BCCD = 0x6B,
  _MM_PERM_BCDA = 0x6C,
  _MM_PERM_BCDB = 0x6D,
  _MM_PERM_BCDC = 0x6E,
  _MM_PERM_BCDD = 0x6F,
  _MM_PERM_BDAA = 0x70,
  _MM_PERM_BDAB = 0x71,
  _MM_PERM_BDAC = 0x72,
  _MM_PERM_BDAD = 0x73,
  _MM_PERM_BDBA = 0x74,
  _MM_PERM_BDBB = 0x75,
  _MM_PERM_BDBC = 0x76,
  _MM_PERM_BDBD = 0x77,
  _MM_PERM_BDCA = 0x78,
  _MM_PERM_BDCB = 0x79,
  _MM_PERM_BDCC = 0x7A,
  _MM_PERM_BDCD = 0x7B,
  _MM_PERM_BDDA = 0x7C,
  _MM_PERM_BDDB = 0x7D,
  _MM_PERM_BDDC = 0x7E,
  _MM_PERM_BDDD = 0x7F,
  _MM_PERM_CAAA = 0x80,
  _MM_PERM_CAAB = 0x81,
  _MM_PERM_CAAC = 0x82,
  _MM_PERM_CAAD = 0x83,
  _MM_PERM_CABA = 0x84,
  _MM_PERM_CABB = 0x85,
  _MM_PERM_CABC = 0x86,
  _MM_PERM_CABD = 0x87,
  _MM_PERM_CACA = 0x88,
  _MM_PERM_CACB = 0x89,
  _MM_PERM_CACC = 0x8A,
  _MM_PERM_CACD = 0x8B,
  _MM_PERM_CADA = 0x8C,
  _MM_PERM_CADB = 0x8D,
  _MM_PERM_CADC = 0x8E,
  _MM_PERM_CADD = 0x8F,
  _MM_PERM_CBAA = 0x90,
  _MM_PERM_CBAB = 0x91,
  _MM_PERM_CBAC = 0x92,
  _MM_PERM_CBAD = 0x93,
  _MM_PERM_CBBA = 0x94,
  _MM_PERM_CBBB = 0x95,
  _MM_PERM_CBBC = 0x96,
  _MM_PERM_CBBD = 0x97,
  _MM_PERM_CBCA = 0x98,
  _MM_PERM_CBCB = 0x99,
  _MM_PERM_CBCC = 0x9A,
  _MM_PERM_CBCD = 0x9B,
  _MM_PERM_CBDA = 0x9C,
  _MM_PERM_CBDB = 0x9D,
  _MM_PERM_CBDC = 0x9E,
  _MM_PERM_CBDD = 0x9F,
  _MM_PERM_CCAA = 0xA0,
  _MM_PERM_CCAB = 0xA1,
  _MM_PERM_CCAC = 0xA2,
  _MM_PERM_CCAD = 0xA3,
  _MM_PERM_CCBA = 0xA4,
  _MM_PERM_CCBB = 0xA5,
  _MM_PERM_CCBC = 0xA6,
  _MM_PERM_CCBD = 0xA7,
  _MM_PERM_CCCA = 0xA8,
  _MM_PERM_CCCB = 0xA9,
  _MM_PERM_CCCC = 0xAA,
  _MM_PERM_CCCD = 0xAB,
  _MM_PERM_CCDA = 0xAC,
  _MM_PERM_CCDB = 0xAD,
  _MM_PERM_CCDC = 0xAE,
  _MM_PERM_CCDD = 0xAF,
  _MM_PERM_CDAA = 0xB0,
  _MM_PERM_CDAB = 0xB1,
  _MM_PERM_CDAC = 0xB2,
  _MM_PERM_CDAD = 0xB3,
  _MM_PERM_CDBA = 0xB4,
  _MM_PERM_CDBB = 0xB5,
  _MM_PERM_CDBC = 0xB6,
  _MM_PERM_CDBD = 0xB7,
  _MM_PERM_CDCA = 0xB8,
  _MM_PERM_CDCB = 0xB9,
  _MM_PERM_CDCC = 0xBA,
  _MM_PERM_CDCD = 0xBB,
  _MM_PERM_CDDA = 0xBC,
  _MM_PERM_CDDB = 0xBD,
  _MM_PERM_CDDC = 0xBE,
  _MM_PERM_CDDD = 0xBF,
  _MM_PERM_DAAA = 0xC0,
  _MM_PERM_DAAB = 0xC1,
  _MM_PERM_DAAC = 0xC2,
  _MM_PERM_DAAD = 0xC3,
  _MM_PERM_DABA = 0xC4,
  _MM_PERM_DABB = 0xC5,
  _MM_PERM_DABC = 0xC6,
  _MM_PERM_DABD = 0xC7,
  _MM_PERM_DACA = 0xC8,
  _MM_PERM_DACB = 0xC9,
  _MM_PERM_DACC = 0xCA,
  _MM_PERM_DACD = 0xCB,
  _MM_PERM_DADA = 0xCC,
  _MM_PERM_DADB = 0xCD,
  _MM_PERM_DADC = 0xCE,
  _MM_PERM_DADD = 0xCF,
  _MM_PERM_DBAA = 0xD0,
  _MM_PERM_DBAB = 0xD1,
  _MM_PERM_DBAC = 0xD2,
  _MM_PERM_DBAD = 0xD3,
  _MM_PERM_DBBA = 0xD4,
  _MM_PERM_DBBB = 0xD5,
  _MM_PERM_DBBC = 0xD6,
  _MM_PERM_DBBD = 0xD7,
  _MM_PERM_DBCA = 0xD8,
  _MM_PERM_DBCB = 0xD9,
  _MM_PERM_DBCC = 0xDA,
  _MM_PERM_DBCD = 0xDB,
  _MM_PERM_DBDA = 0xDC,
  _MM_PERM_DBDB = 0xDD,
  _MM_PERM_DBDC = 0xDE,
  _MM_PERM_DBDD = 0xDF,
  _MM_PERM_DCAA = 0xE0,
  _MM_PERM_DCAB = 0xE1,
  _MM_PERM_DCAC = 0xE2,
  _MM_PERM_DCAD = 0xE3,
  _MM_PERM_DCBA = 0xE4,
  _MM_PERM_DCBB = 0xE5,
  _MM_PERM_DCBC = 0xE6,
  _MM_PERM_DCBD = 0xE7,
  _MM_PERM_DCCA = 0xE8,
  _MM_PERM_DCCB = 0xE9,
  _MM_PERM_DCCC = 0xEA,
  _MM_PERM_DCCD = 0xEB,
  _MM_PERM_DCDA = 0xEC,
  _MM_PERM_DCDB = 0xED,
  _MM_PERM_DCDC = 0xEE,
  _MM_PERM_DCDD = 0xEF,
  _MM_PERM_DDAA = 0xF0,
  _MM_PERM_DDAB = 0xF1,
  _MM_PERM_DDAC = 0xF2,
  _MM_PERM_DDAD = 0xF3,
  _MM_PERM_DDBA = 0xF4,
  _MM_PERM_DDBB = 0xF5,
  _MM_PERM_DDBC = 0xF6,
  _MM_PERM_DDBD = 0xF7,
  _MM_PERM_DDCA = 0xF8,
  _MM_PERM_DDCB = 0xF9,
  _MM_PERM_DDCC = 0xFA,
  _MM_PERM_DDCD = 0xFB,
  _MM_PERM_DDDA = 0xFC,
  _MM_PERM_DDDB = 0xFD,
  _MM_PERM_DDDC = 0xFE,
  _MM_PERM_DDDD = 0xFF
} _MM_PERM_ENUM;

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_epi32(__m512i __A, _MM_PERM_ENUM __mask) {
  return (__m512i)__builtin_ia32_pshufd512_mask(
      (__v16si)__A, __mask, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                              _MM_PERM_ENUM __mask) {
  return (__m512i)__builtin_ia32_pshufd512_mask((__v16si)__A, __mask,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shuffle_epi32(__mmask16 __U, __m512i __A, _MM_PERM_ENUM __mask) {
  return (__m512i)__builtin_ia32_pshufd512_mask(
      (__v16si)__A, __mask, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_i64x2(__m512i __A, __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_i64x2(__m512i __W, __mmask8 __U, __m512i __A,
                              __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)__A, (__v8di)__B, __imm, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_i64x2(__mmask8 __U, __m512i __A, __m512i __B,
                               const int __imm) {
  return (__m512i)__builtin_ia32_shuf_i64x2_mask(
      (__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_setzero_si512(),
      (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_i32x4(__m512i __A, __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_shuf_i32x4_mask(
      (__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_i32x4(__m512i __W, __mmask16 __U, __m512i __A,
                              __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_shuf_i32x4_mask(
      (__v16si)__A, (__v16si)__B, __imm, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_i32x4(__mmask16 __U, __m512i __A, __m512i __B,
                               const int __imm) {
  return (__m512i)__builtin_ia32_shuf_i32x4_mask(
      (__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_f64x2(__m512d __A, __m512d __B, const int __imm) {
  return (__m512d)__builtin_ia32_shuf_f64x2_mask(
      (__v8df)__A, (__v8df)__B, __imm, (__v8df)_mm512_undefined_pd(),
      (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_f64x2(__m512d __W, __mmask8 __U, __m512d __A,
                              __m512d __B, const int __imm) {
  return (__m512d)__builtin_ia32_shuf_f64x2_mask(
      (__v8df)__A, (__v8df)__B, __imm, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_f64x2(__mmask8 __U, __m512d __A, __m512d __B,
                               const int __imm) {
  return (__m512d)__builtin_ia32_shuf_f64x2_mask(
      (__v8df)__A, (__v8df)__B, __imm, (__v8df)_mm512_setzero_pd(),
      (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_f32x4(__m512 __A, __m512 __B, const int __imm) {
  return (__m512)__builtin_ia32_shuf_f32x4_mask(
      (__v16sf)__A, (__v16sf)__B, __imm, (__v16sf)_mm512_undefined_ps(),
      (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_f32x4(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                              const int __imm) {
  return (__m512)__builtin_ia32_shuf_f32x4_mask(
      (__v16sf)__A, (__v16sf)__B, __imm, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_f32x4(__mmask16 __U, __m512 __A, __m512 __B,
                               const int __imm) {
  return (__m512)__builtin_ia32_shuf_f32x4_mask(
      (__v16sf)__A, (__v16sf)__B, __imm, (__v16sf)_mm512_setzero_ps(),
      (__mmask16)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rolv_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rolv_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rolv_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rorv_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rorv_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rorv_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rolv_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rolv_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rolv_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prolvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rorv_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rorv_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rorv_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_prorvq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundpd_epi32(__m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundpd_epi32(__m256i __W, __mmask8 __U, __m512d __A,
                                   const int __R) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundpd_epi32(__mmask8 __U, __m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundpd_epu32(__m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundpd_epu32(__m256i __W, __mmask8 __U, __m512d __A,
                                   const int __R) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)__W,
                                                    (__mmask8)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundpd_epu32(__mmask8 __U, __m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R);
}
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundpd_epi32(__m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundpd_epi32(__m256i __W, __mmask8 __U, __m512d __A,
                                  const int __R) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundpd_epi32(__mmask8 __U, __m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundpd_epu32(__m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundpd_epu32(__m256i __W, __mmask8 __U, __m512d __A,
                                  const int __R) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundpd_epu32(__mmask8 __U, __m512d __A, const int __R) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, __R);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundps_epi32(__m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundps_epi32(__m512i __W, __mmask16 __U, __m512 __A,
                                   const int __R) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)__W,
                                                   (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundps_epi32(__mmask16 __U, __m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundps_epu32(__m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundps_epu32(__m512i __W, __mmask16 __U, __m512 __A,
                                   const int __R) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)__W,
                                                    (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundps_epu32(__mmask16 __U, __m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundps_epi32(__m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundps_epi32(__m512i __W, __mmask16 __U, __m512 __A,
                                  const int __R) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)__W,
                                                  (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundps_epi32(__mmask16 __U, __m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundps_epu32(__m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundps_epu32(__m512i __W, __mmask16 __U, __m512 __A,
                                  const int __R) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)__W,
                                                   (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundps_epu32(__mmask16 __U, __m512 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, __R);
}
extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu32_sd(__m128d __A, unsigned __B) {
  return (__m128d)__builtin_ia32_cvtusi2sd32((__v2df)__A, __B);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundu64_sd(__m128d __A, unsigned long long __B, const int __R) {
  return (__m128d)__builtin_ia32_cvtusi2sd64((__v2df)__A, __B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundi64_sd(__m128d __A, long long __B, const int __R) {
  return (__m128d)__builtin_ia32_cvtsi2sd64((__v2df)__A, __B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsi64_sd(__m128d __A, long long __B, const int __R) {
  return (__m128d)__builtin_ia32_cvtsi2sd64((__v2df)__A, __B, __R);
}
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundu32_ss(__m128 __A, unsigned __B, const int __R) {
  return (__m128)__builtin_ia32_cvtusi2ss32((__v4sf)__A, __B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsi32_ss(__m128 __A, int __B, const int __R) {
  return (__m128)__builtin_ia32_cvtsi2ss32((__v4sf)__A, __B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundi32_ss(__m128 __A, int __B, const int __R) {
  return (__m128)__builtin_ia32_cvtsi2ss32((__v4sf)__A, __B, __R);
}
extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundu64_ss(__m128 __A, unsigned long long __B, const int __R) {
  return (__m128)__builtin_ia32_cvtusi2ss64((__v4sf)__A, __B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsi64_ss(__m128 __A, long long __B, const int __R) {
  return (__m128)__builtin_ia32_cvtsi2ss64((__v4sf)__A, __B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundi64_ss(__m128 __A, long long __B, const int __R) {
  return (__m128)__builtin_ia32_cvtsi2ss64((__v4sf)__A, __B, __R);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovdb512_mask(
      (__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovdb512_mask((__v16si)__A, (__v16qi)__O,
                                                __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_epi8(__mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovdb512_mask(
      (__v16si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi32_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovsdb512_mask(
      (__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovsdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsdb512_mask((__v16si)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi32_epi8(__mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsdb512_mask(
      (__v16si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi32_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovusdb512_mask(
      (__v16si)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_storeu_epi8(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovusdb512mem_mask((__v16qi *)__P, (__v16si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_epi8(__m128i __O, __mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusdb512_mask((__v16si)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi32_epi8(__mmask16 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusdb512_mask(
      (__v16si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_epi16(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovdw512_mask((__v16si)__A, (__v16hi)__O,
                                                __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_epi16(__mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi32_epi16(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovsdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovsdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsdw512_mask((__v16si)__A, (__v16hi)__O,
                                                 __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi32_epi16(__mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi32_epi16(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovusdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_undefined_si256(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_storeu_epi16(void *__P, __mmask16 __M, __m512i __A) {
  __builtin_ia32_pmovusdw512mem_mask((__v16hi *)__P, (__v16si)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi32_epi16(__m256i __O, __mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusdw512_mask((__v16si)__A, (__v16hi)__O,
                                                  __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi32_epi16(__mmask16 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusdw512_mask(
      (__v16si)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_epi32(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovqd512_mask(
      (__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovqd512mem_mask((__v8si *)__P, (__v8di)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovqd512_mask((__v8di)__A, (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_epi32(__mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovqd512_mask(
      (__v8di)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi64_epi32(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovsqd512_mask(
      (__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovsqd512mem_mask((__v8si *)__P, (__v8di)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsqd512_mask((__v8di)__A, (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi64_epi32(__mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovsqd512_mask(
      (__v8di)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi64_epi32(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovusqd512_mask(
      (__v8di)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovusqd512mem_mask((__v8si *)__P, (__v8di)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_epi32(__m256i __O, __mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusqd512_mask((__v8di)__A, (__v8si)__O,
                                                  __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi64_epi32(__mmask8 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovusqd512_mask(
      (__v8di)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_epi16(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovqw512_mask(
      (__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqw512_mask((__v8di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_epi16(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqw512_mask(
      (__v8di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi64_epi16(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqw512_mask(
      (__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovsqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqw512_mask((__v8di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi64_epi16(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqw512_mask(
      (__v8di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi64_epi16(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqw512_mask(
      (__v8di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovusqw512mem_mask((__v8hi *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqw512_mask((__v8di)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi64_epi16(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqw512_mask(
      (__v8di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovqb512_mask(
      (__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovqb512mem_mask((unsigned long long *)__P, (__v8di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqb512_mask((__v8di)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_epi8(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovqb512_mask(
      (__v8di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi64_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqb512_mask(
      (__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovsqb512mem_mask((unsigned long long *)__P, (__v8di)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqb512_mask((__v8di)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi64_epi8(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovsqb512_mask(
      (__v8di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi64_epi8(__m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqb512_mask(
      (__v8di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m512i __A) {
  __builtin_ia32_pmovusqb512mem_mask((unsigned long long *)__P, (__v8di)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqb512_mask((__v8di)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi64_epi8(__mmask8 __M, __m512i __A) {
  return (__m128i)__builtin_ia32_pmovusqb512_mask(
      (__v8di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_pd(__m256i __A) {
  return (__m512d)__builtin_ia32_cvtdq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_pd(__m512d __W, __mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtdq2pd512_mask((__v8si)__A, (__v8df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_pd(__mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtdq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_pd(__m256i __A) {
  return (__m512d)__builtin_ia32_cvtudq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_pd(__m512d __W, __mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtudq2pd512_mask((__v8si)__A, (__v8df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_pd(__mmask8 __U, __m256i __A) {
  return (__m512d)__builtin_ia32_cvtudq2pd512_mask(
      (__v8si)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundepi32_ps(__m512i __A, const int __R) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundepi32_ps(__m512 __W, __mmask16 __U, __m512i __A,
                                  const int __R) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)__W,
                                                 (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundepi32_ps(__mmask16 __U, __m512i __A, const int __R) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundepu32_ps(__m512i __A, const int __R) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundepu32_ps(__m512 __W, __mmask16 __U, __m512i __A,
                                  const int __R) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)__W,
                                                  (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundepu32_ps(__mmask16 __U, __m512i __A, const int __R) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}
extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extractf64x4_pd(__m512d __A, const int __imm) {
  return (__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)__A, __imm, (__v4df)_mm256_undefined_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extractf64x4_pd(__m256d __W, __mmask8 __U, __m512d __A,
                                const int __imm) {
  return (__m256d)__builtin_ia32_extractf64x4_mask((__v8df)__A, __imm,
                                                   (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_extractf64x4_pd(__mmask8 __U, __m512d __A, const int __imm) {
  return (__m256d)__builtin_ia32_extractf64x4_mask(
      (__v8df)__A, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extractf32x4_ps(__m512 __A, const int __imm) {
  return (__m128)__builtin_ia32_extractf32x4_mask(
      (__v16sf)__A, __imm, (__v4sf)_mm_undefined_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extractf32x4_ps(__m128 __W, __mmask8 __U, __m512 __A,
                                const int __imm) {
  return (__m128)__builtin_ia32_extractf32x4_mask((__v16sf)__A, __imm,
                                                  (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_extractf32x4_ps(__mmask8 __U, __m512 __A, const int __imm) {
  return (__m128)__builtin_ia32_extractf32x4_mask(
      (__v16sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extracti64x4_epi64(__m512i __A, const int __imm) {
  return (__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)__A, __imm, (__v4di)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extracti64x4_epi64(__m256i __W, __mmask8 __U, __m512i __A,
                                   const int __imm) {
  return (__m256i)__builtin_ia32_extracti64x4_mask((__v8di)__A, __imm,
                                                   (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_extracti64x4_epi64(__mmask8 __U, __m512i __A, const int __imm) {
  return (__m256i)__builtin_ia32_extracti64x4_mask(
      (__v8di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extracti32x4_epi32(__m512i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti32x4_mask(
      (__v16si)__A, __imm, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extracti32x4_epi32(__m128i __W, __mmask8 __U, __m512i __A,
                                   const int __imm) {
  return (__m128i)__builtin_ia32_extracti32x4_mask((__v16si)__A, __imm,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_extracti32x4_epi32(__mmask8 __U, __m512i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti32x4_mask(
      (__v16si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_inserti32x4(__m512i __A, __m128i __B, const int __imm) {
  return (__m512i)__builtin_ia32_inserti32x4_mask((__v16si)__A, (__v4si)__B,
                                                  __imm, (__v16si)__A, -1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_insertf32x4(__m512 __A, __m128 __B, const int __imm) {
  return (__m512)__builtin_ia32_insertf32x4_mask((__v16sf)__A, (__v4sf)__B,
                                                 __imm, (__v16sf)__A, -1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_inserti64x4(__m512i __A, __m256i __B, const int __imm) {
  return (__m512i)__builtin_ia32_inserti64x4_mask(
      (__v8di)__A, (__v4di)__B, __imm, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_inserti64x4(__m512i __W, __mmask8 __U, __m512i __A, __m256i __B,
                            const int __imm) {
  return (__m512i)__builtin_ia32_inserti64x4_mask(
      (__v8di)__A, (__v4di)__B, __imm, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_inserti64x4(__mmask8 __U, __m512i __A, __m256i __B,
                             const int __imm) {
  return (__m512i)__builtin_ia32_inserti64x4_mask(
      (__v8di)__A, (__v4di)__B, __imm, (__v8di)_mm512_setzero_si512(),
      (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_insertf64x4(__m512d __A, __m256d __B, const int __imm) {
  return (__m512d)__builtin_ia32_insertf64x4_mask(
      (__v8df)__A, (__v4df)__B, __imm, (__v8df)_mm512_undefined_pd(),
      (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_insertf64x4(__m512d __W, __mmask8 __U, __m512d __A, __m256d __B,
                            const int __imm) {
  return (__m512d)__builtin_ia32_insertf64x4_mask(
      (__v8df)__A, (__v4df)__B, __imm, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_insertf64x4(__mmask8 __U, __m512d __A, __m256d __B,
                             const int __imm) {
  return (__m512d)__builtin_ia32_insertf64x4_mask(
      (__v8df)__A, (__v4df)__B, __imm, (__v8df)_mm512_setzero_pd(),
      (__mmask8)__U);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_pd(void const *__P) {
  return *(__m512d_u *)__P;
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_pd(__m512d __W, __mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadupd512_mask((const double *)__P,
                                                 (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_pd(__mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_loadupd512_mask(
      (const double *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_pd(void *__P, __m512d __A) {
  *(__m512d_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_pd(void *__P, __mmask8 __U, __m512d __A) {
  __builtin_ia32_storeupd512_mask((double *)__P, (__v8df)__A, (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_ps(void const *__P) {
  return *(__m512_u *)__P;
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_ps(__m512 __W, __mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadups512_mask((const float *)__P,
                                                (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_ps(__mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_loadups512_mask(
      (const float *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_ps(void *__P, __m512 __A) {
  *(__m512_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_ps(void *__P, __mmask16 __U, __m512 __A) {
  __builtin_ia32_storeups512_mask((float *)__P, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_ss(__m128 __W, __mmask8 __U, const float *__P) {
  return (__m128)__builtin_ia32_loadss_mask(__P, (__v4sf)__W, __U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_ss(__mmask8 __U, const float *__P) {
  return (__m128)__builtin_ia32_loadss_mask(__P, (__v4sf)_mm_setzero_ps(), __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_sd(__m128d __W, __mmask8 __U, const double *__P) {
  return (__m128d)__builtin_ia32_loadsd_mask(__P, (__v2df)__W, __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_sd(__mmask8 __U, const double *__P) {
  return (__m128d)__builtin_ia32_loadsd_mask(__P, (__v2df)_mm_setzero_pd(),
                                             __U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_move_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movess_mask((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)__W, __U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_move_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_movess_mask((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)_mm_setzero_ps(), __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_move_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movesd_mask((__v2df)__A, (__v2df)__B,
                                             (__v2df)__W, __U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_move_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_movesd_mask((__v2df)__A, (__v2df)__B,
                                             (__v2df)_mm_setzero_pd(), __U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_ss(float *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_storess_mask(__P, (__v4sf)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_sd(double *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_storesd_mask(__P, (__v2df)__A, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi64(void const *__P) {
  return *(__m512i_u *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi64(__m512i __W, __mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqudi512_mask((const long long *)__P,
                                                   (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi64(__mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqudi512_mask(
      (const long long *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi64(void *__P, __m512i __A) {
  *(__m512i_u *)__P = (__m512i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi64(void *__P, __mmask8 __U, __m512i __A) {
  __builtin_ia32_storedqudi512_mask((long long *)__P, (__v8di)__A,
                                    (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_si512(void const *__P) {
  return *(__m512i_u *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi32(void const *__P) {
  return *(__m512i_u *)__P;
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi32(__m512i __W, __mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqusi512_mask(
      (const int *)__P, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi32(__mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddqusi512_mask(
      (const int *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_si512(void *__P, __m512i __A) {
  *(__m512i_u *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi32(void *__P, __m512i __A) {
  *(__m512i_u *)__P = (__m512i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi32(void *__P, __mmask16 __U, __m512i __A) {
  __builtin_ia32_storedqusi512_mask((int *)__P, (__v16si)__A, (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutevar_pd(__m512d __A, __m512i __C) {
  return (__m512d)__builtin_ia32_vpermilvarpd512_mask(
      (__v8df)__A, (__v8di)__C, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_permutevar_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512i __C) {
  return (__m512d)__builtin_ia32_vpermilvarpd512_mask(
      (__v8df)__A, (__v8di)__C, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutevar_pd(__mmask8 __U, __m512d __A, __m512i __C) {
  return (__m512d)__builtin_ia32_vpermilvarpd512_mask(
      (__v8df)__A, (__v8di)__C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutevar_ps(__m512 __A, __m512i __C) {
  return (__m512)__builtin_ia32_vpermilvarps512_mask(
      (__v16sf)__A, (__v16si)__C, (__v16sf)_mm512_undefined_ps(),
      (__mmask16)-1);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_permutevar_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512i __C) {
  return (__m512)__builtin_ia32_vpermilvarps512_mask(
      (__v16sf)__A, (__v16si)__C, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutevar_ps(__mmask16 __U, __m512 __A, __m512i __C) {
  return (__m512)__builtin_ia32_vpermilvarps512_mask(
      (__v16sf)__A, (__v16si)__C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi64(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varq512_mask((__v8di)__I, (__v8di)__A,
                                                     (__v8di)__B, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi64(__m512i __A, __mmask8 __U, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varq512_mask(
      (__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi64(__m512i __A, __m512i __I, __mmask8 __U,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2varq512_mask(
      (__v8di)__A, (__v8di)__I, (__v8di)__B, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi64(__mmask8 __U, __m512i __A, __m512i __I,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varq512_maskz(
      (__v8di)__I, (__v8di)__A, (__v8di)__B, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi32(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2vard512_mask(
      (__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi32(__m512i __A, __mmask16 __U, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2vard512_mask(
      (__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi32(__m512i __A, __m512i __I, __mmask16 __U,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2vard512_mask(
      (__v16si)__A, (__v16si)__I, (__v16si)__B, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi32(__mmask16 __U, __m512i __A, __m512i __I,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2vard512_maskz(
      (__v16si)__I, (__v16si)__A, (__v16si)__B, (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_pd(__m512d __A, __m512i __I, __m512d __B) {
  return (__m512d)__builtin_ia32_vpermt2varpd512_mask(
      (__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_pd(__m512d __A, __mmask8 __U, __m512i __I,
                                __m512d __B) {
  return (__m512d)__builtin_ia32_vpermt2varpd512_mask(
      (__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_pd(__m512d __A, __m512i __I, __mmask8 __U,
                                 __m512d __B) {
  return (__m512d)__builtin_ia32_vpermi2varpd512_mask(
      (__v8df)__A, (__v8di)__I, (__v8df)__B, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_pd(__mmask8 __U, __m512d __A, __m512i __I,
                                 __m512d __B) {
  return (__m512d)__builtin_ia32_vpermt2varpd512_maskz(
      (__v8di)__I, (__v8df)__A, (__v8df)__B, (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_ps(__m512 __A, __m512i __I, __m512 __B) {
  return (__m512)__builtin_ia32_vpermt2varps512_mask(
      (__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_ps(__m512 __A, __mmask16 __U, __m512i __I,
                                __m512 __B) {
  return (__m512)__builtin_ia32_vpermt2varps512_mask(
      (__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_ps(__m512 __A, __m512i __I, __mmask16 __U,
                                 __m512 __B) {
  return (__m512)__builtin_ia32_vpermi2varps512_mask(
      (__v16sf)__A, (__v16si)__I, (__v16sf)__B, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_ps(__mmask16 __U, __m512 __A, __m512i __I,
                                 __m512 __B) {
  return (__m512)__builtin_ia32_vpermt2varps512_maskz(
      (__v16si)__I, (__v16sf)__A, (__v16sf)__B, (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permute_pd(__m512d __X, const int __C) {
  return (__m512d)__builtin_ia32_vpermilpd512_mask(
      (__v8df)__X, __C, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_permute_pd(__m512d __W, __mmask8 __U, __m512d __X, const int __C) {
  return (__m512d)__builtin_ia32_vpermilpd512_mask((__v8df)__X, __C,
                                                   (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permute_pd(__mmask8 __U, __m512d __X, const int __C) {
  return (__m512d)__builtin_ia32_vpermilpd512_mask(
      (__v8df)__X, __C, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permute_ps(__m512 __X, const int __C) {
  return (__m512)__builtin_ia32_vpermilps512_mask(
      (__v16sf)__X, __C, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_permute_ps(__m512 __W, __mmask16 __U, __m512 __X, const int __C) {
  return (__m512)__builtin_ia32_vpermilps512_mask((__v16sf)__X, __C,
                                                  (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permute_ps(__mmask16 __U, __m512 __X, const int __C) {
  return (__m512)__builtin_ia32_vpermilps512_mask(
      (__v16sf)__X, __C, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex_epi64(__m512i __X, const int __I) {
  return (__m512i)__builtin_ia32_permdi512_mask(
      (__v8di)__X, __I, (__v8di)_mm512_undefined_epi32(), (__mmask8)(-1));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex_epi64(__m512i __W, __mmask8 __M, __m512i __X,
                               const int __I) {
  return (__m512i)__builtin_ia32_permdi512_mask((__v8di)__X, __I, (__v8di)__W,
                                                (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex_epi64(__mmask8 __M, __m512i __X, const int __I) {
  return (__m512i)__builtin_ia32_permdi512_mask(
      (__v8di)__X, __I, (__v8di)_mm512_setzero_si512(), (__mmask8)__M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex_pd(__m512d __X, const int __M) {
  return (__m512d)__builtin_ia32_permdf512_mask(
      (__v8df)__X, __M, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_permutex_pd(__m512d __W, __mmask8 __U, __m512d __X, const int __M) {
  return (__m512d)__builtin_ia32_permdf512_mask((__v8df)__X, __M, (__v8df)__W,
                                                (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex_pd(__mmask8 __U, __m512d __X, const int __M) {
  return (__m512d)__builtin_ia32_permdf512_mask(
      (__v8df)__X, __M, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi64(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvardi512_mask(
      (__v8di)__Y, (__v8di)__X, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi64(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvardi512_mask(
      (__v8di)__Y, (__v8di)__X, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi64(__m512i __W, __mmask8 __M, __m512i __X,
                                  __m512i __Y) {
  return (__m512i)__builtin_ia32_permvardi512_mask((__v8di)__Y, (__v8di)__X,
                                                   (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi32(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvarsi512_mask(
      (__v16si)__Y, (__v16si)__X, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi32(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_permvarsi512_mask(
      (__v16si)__Y, (__v16si)__X, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi32(__m512i __W, __mmask16 __M, __m512i __X,
                                  __m512i __Y) {
  return (__m512i)__builtin_ia32_permvarsi512_mask((__v16si)__Y, (__v16si)__X,
                                                   (__v16si)__W, __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_pd(__m512i __X, __m512d __Y) {
  return (__m512d)__builtin_ia32_permvardf512_mask(
      (__v8df)__Y, (__v8di)__X, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_pd(__m512d __W, __mmask8 __U, __m512i __X,
                               __m512d __Y) {
  return (__m512d)__builtin_ia32_permvardf512_mask((__v8df)__Y, (__v8di)__X,
                                                   (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_pd(__mmask8 __U, __m512i __X, __m512d __Y) {
  return (__m512d)__builtin_ia32_permvardf512_mask(
      (__v8df)__Y, (__v8di)__X, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_ps(__m512i __X, __m512 __Y) {
  return (__m512)__builtin_ia32_permvarsf512_mask(
      (__v16sf)__Y, (__v16si)__X, (__v16sf)_mm512_undefined_ps(),
      (__mmask16)-1);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_permutexvar_ps(__m512 __W, __mmask16 __U, __m512i __X, __m512 __Y) {
  return (__m512)__builtin_ia32_permvarsf512_mask((__v16sf)__Y, (__v16si)__X,
                                                  (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_ps(__mmask16 __U, __m512i __X, __m512 __Y) {
  return (__m512)__builtin_ia32_permvarsf512_mask(
      (__v16sf)__Y, (__v16si)__X, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_ps(__m512 __M, __m512 __V, const int __imm) {
  return (__m512)__builtin_ia32_shufps512_mask(
      (__v16sf)__M, (__v16sf)__V, __imm, (__v16sf)_mm512_undefined_ps(),
      (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_ps(__m512 __W, __mmask16 __U, __m512 __M, __m512 __V,
                           const int __imm) {
  return (__m512)__builtin_ia32_shufps512_mask(
      (__v16sf)__M, (__v16sf)__V, __imm, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_ps(__mmask16 __U, __m512 __M, __m512 __V,
                            const int __imm) {
  return (__m512)__builtin_ia32_shufps512_mask(
      (__v16sf)__M, (__v16sf)__V, __imm, (__v16sf)_mm512_setzero_ps(),
      (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_pd(__m512d __M, __m512d __V, const int __imm) {
  return (__m512d)__builtin_ia32_shufpd512_mask((__v8df)__M, (__v8df)__V, __imm,
                                                (__v8df)_mm512_undefined_pd(),
                                                (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shuffle_pd(__m512d __W, __mmask8 __U, __m512d __M, __m512d __V,
                           const int __imm) {
  return (__m512d)__builtin_ia32_shufpd512_mask((__v8df)__M, (__v8df)__V, __imm,
                                                (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_pd(__mmask8 __U, __m512d __M, __m512d __V,
                            const int __imm) {
  return (__m512d)__builtin_ia32_shufpd512_mask((__v8df)__M, (__v8df)__V, __imm,
                                                (__v8df)_mm512_setzero_pd(),
                                                (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fixupimm_round_pd(__m512d __A, __m512d __B, __m512i __C,
                             const int __imm, const int __R) {
  return (__m512d)__builtin_ia32_fixupimmpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fixupimm_round_pd(__m512d __A, __mmask8 __U, __m512d __B,
                                  __m512i __C, const int __imm, const int __R) {
  return (__m512d)__builtin_ia32_fixupimmpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fixupimm_round_pd(__mmask8 __U, __m512d __A, __m512d __B,
                                   __m512i __C, const int __imm,
                                   const int __R) {
  return (__m512d)__builtin_ia32_fixupimmpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fixupimm_round_ps(__m512 __A, __m512 __B, __m512i __C,
                             const int __imm, const int __R) {
  return (__m512)__builtin_ia32_fixupimmps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fixupimm_round_ps(__m512 __A, __mmask16 __U, __m512 __B,
                                  __m512i __C, const int __imm, const int __R) {
  return (__m512)__builtin_ia32_fixupimmps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fixupimm_round_ps(__mmask16 __U, __m512 __A, __m512 __B,
                                   __m512i __C, const int __imm,
                                   const int __R) {
  return (__m512)__builtin_ia32_fixupimmps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fixupimm_round_sd(__m128d __A, __m128d __B, __m128i __C,
                          const int __imm, const int __R) {
  return (__m128d)__builtin_ia32_fixupimmsd_mask(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)-1, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fixupimm_round_sd(__m128d __A, __mmask8 __U, __m128d __B,
                               __m128i __C, const int __imm, const int __R) {
  return (__m128d)__builtin_ia32_fixupimmsd_mask(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fixupimm_round_sd(__mmask8 __U, __m128d __A, __m128d __B,
                                __m128i __C, const int __imm, const int __R) {
  return (__m128d)__builtin_ia32_fixupimmsd_maskz(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fixupimm_round_ss(__m128 __A, __m128 __B, __m128i __C, const int __imm,
                          const int __R) {
  return (__m128)__builtin_ia32_fixupimmss_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)-1, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fixupimm_round_ss(__m128 __A, __mmask8 __U, __m128 __B,
                               __m128i __C, const int __imm, const int __R) {
  return (__m128)__builtin_ia32_fixupimmss_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fixupimm_round_ss(__mmask8 __U, __m128 __A, __m128 __B,
                                __m128i __C, const int __imm, const int __R) {
  return (__m128)__builtin_ia32_fixupimmss_maskz(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, __R);
}
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movehdup_ps(__m512 __A) {
  return (__m512)__builtin_ia32_movshdup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_movehdup_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movshdup512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_movehdup_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movshdup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_moveldup_ps(__m512 __A) {
  return (__m512)__builtin_ia32_movsldup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_moveldup_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movsldup512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_moveldup_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_movsldup512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_si512(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A | (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A | (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pord512_mask((__v16si)__A, (__v16si)__B,
                                              (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pord512_mask((__v16si)__A, (__v16si)__B,
                                              (__v16si)_mm512_setzero_si512(),
                                              (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A | (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_porq512_mask((__v8di)__A, (__v8di)__B,
                                              (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_porq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_si512(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A ^ (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A ^ (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_xor_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxord512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxord512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A ^ (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_xor_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxorq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pxorq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rol_epi32(__m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_prold512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rol_epi32(__m512i __W, __mmask16 __U, __m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_prold512_mask((__v16si)__A, __B, (__v16si)__W,
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rol_epi32(__mmask16 __U, __m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_prold512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ror_epi32(__m512i __A, int __B) {
  return (__m512i)__builtin_ia32_prord512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ror_epi32(__m512i __W, __mmask16 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_prord512_mask((__v16si)__A, __B, (__v16si)__W,
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_ror_epi32(__mmask16 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_prord512_mask(
      (__v16si)__A, __B, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rol_epi64(__m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_prolq512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rol_epi64(__m512i __W, __mmask8 __U, __m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_prolq512_mask((__v8di)__A, __B, (__v8di)__W,
                                               (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rol_epi64(__mmask8 __U, __m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_prolq512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ror_epi64(__m512i __A, int __B) {
  return (__m512i)__builtin_ia32_prorq512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ror_epi64(__m512i __W, __mmask8 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_prorq512_mask((__v8di)__A, __B, (__v8di)__W,
                                               (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_ror_epi64(__mmask8 __U, __m512i __A, int __B) {
  return (__m512i)__builtin_ia32_prorq512_mask(
      (__v8di)__A, __B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_si512(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A & (__v16su)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_epi32(__m512i __A, __m512i __B) {
  return (__m512i)((__v16su)__A & (__v16su)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_and_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandd512_mask((__v16si)__A, (__v16si)__B,
                                               (__v16si)_mm512_setzero_si512(),
                                               (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A & (__v8du)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_and_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandq512_mask((__v8di)__A, (__v8di)__B,
                                               (__v8di)__W, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_pd(), __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_si512(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_andnot_epi32(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)_mm512_setzero_si512(),
                                                (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_andnot_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pandnq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_pd(), __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestmd512((__v16si)__A, (__v16si)__B,
                                              (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestmd512((__v16si)__A, (__v16si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestmq512((__v8di)__A, (__v8di)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestmq512((__v8di)__A, (__v8di)__B, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestnmd512((__v16si)__A, (__v16si)__B,
                                               (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ptestnmd512((__v16si)__A, (__v16si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq512((__v8di)__A, (__v8di)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq512((__v8di)__A, (__v8di)__B, __U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_ps(__m512 __A) {
  return (__m512)_mm512_and_epi32((__m512i)__A, _mm512_set1_epi32(0x7fffffff));
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)_mm512_mask_and_epi32((__m512i)__W, __U, (__m512i)__A,
                                       _mm512_set1_epi32(0x7fffffff));
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_pd(__m512d __A) {
  return (__m512d)_mm512_and_epi64((__m512i)__A,
                                   _mm512_set1_epi64(0x7fffffffffffffffLL));
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)_mm512_mask_and_epi64(
      (__m512i)__W, __U, (__m512i)__A, _mm512_set1_epi64(0x7fffffffffffffffLL));
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhdq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhdq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhdq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhqdq512_mask((__v8di)__A, (__v8di)__B,
                                                    (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckldq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckldq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi32(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckldq512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklqdq512_mask((__v8di)__A, (__v8di)__B,
                                                    (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklqdq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_u64(__m128 __A, const int __R) {
  return (unsigned long long)__builtin_ia32_vcvtss2usi64((__v4sf)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_si64(__m128 __A, const int __R) {
  return (long long)__builtin_ia32_vcvtss2si64((__v4sf)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_i64(__m128 __A, const int __R) {
  return (long long)__builtin_ia32_vcvtss2si64((__v4sf)__A, __R);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundss_u64(__m128 __A, const int __R) {
  return (unsigned long long)__builtin_ia32_vcvttss2usi64((__v4sf)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundss_i64(__m128 __A, const int __R) {
  return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundss_si64(__m128 __A, const int __R) {
  return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, __R);
}
extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_u32(__m128 __A, const int __R) {
  return (unsigned)__builtin_ia32_vcvtss2usi32((__v4sf)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_si32(__m128 __A, const int __R) {
  return (int)__builtin_ia32_vcvtss2si32((__v4sf)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_i32(__m128 __A, const int __R) {
  return (int)__builtin_ia32_vcvtss2si32((__v4sf)__A, __R);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundss_u32(__m128 __A, const int __R) {
  return (unsigned)__builtin_ia32_vcvttss2usi32((__v4sf)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundss_i32(__m128 __A, const int __R) {
  return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundss_si32(__m128 __A, const int __R) {
  return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, __R);
}
extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_u64(__m128d __A, const int __R) {
  return (unsigned long long)__builtin_ia32_vcvtsd2usi64((__v2df)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_si64(__m128d __A, const int __R) {
  return (long long)__builtin_ia32_vcvtsd2si64((__v2df)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_i64(__m128d __A, const int __R) {
  return (long long)__builtin_ia32_vcvtsd2si64((__v2df)__A, __R);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundsd_u64(__m128d __A, const int __R) {
  return (unsigned long long)__builtin_ia32_vcvttsd2usi64((__v2df)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundsd_si64(__m128d __A, const int __R) {
  return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, __R);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundsd_i64(__m128d __A, const int __R) {
  return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, __R);
}
extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_u32(__m128d __A, const int __R) {
  return (unsigned)__builtin_ia32_vcvtsd2usi32((__v2df)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_si32(__m128d __A, const int __R) {
  return (int)__builtin_ia32_vcvtsd2si32((__v2df)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_i32(__m128d __A, const int __R) {
  return (int)__builtin_ia32_vcvtsd2si32((__v2df)__A, __R);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundsd_u32(__m128d __A, const int __R) {
  return (unsigned)__builtin_ia32_vcvttsd2usi32((__v2df)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundsd_i32(__m128d __A, const int __R) {
  return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtt_roundsd_si32(__m128d __A, const int __R) {
  return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, __R);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movedup_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_movddup512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_movedup_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movddup512_mask((__v8df)__A, (__v8df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_movedup_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_movddup512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpcklpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_unpacklo_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpcklpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpcklpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpckhpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_unpackhi_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpckhpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_unpckhpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpckhps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpckhps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundps_pd(__m256 __A, const int __R) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask(
      (__v8sf)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundps_pd(__m512d __W, __mmask8 __U, __m256 __A,
                               const int __R) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundps_pd(__mmask8 __U, __m256 __A, const int __R) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask(
      (__v8sf)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundph_ps(__m256i __A, const int __R) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask(
      (__v16hi)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundph_ps(__m512 __W, __mmask16 __U, __m256i __A,
                               const int __R) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)__W,
                                                  (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundph_ps(__mmask16 __U, __m256i __A, const int __R) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask(
      (__v16hi)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundps_ph(__m512 __A, const int __I) {
  return (__m256i)__builtin_ia32_vcvtps2ph512_mask(
      (__v16sf)__A, __I, (__v16hi)_mm256_undefined_si256(), -1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_ph(__m512 __A, const int __I) {
  return (__m256i)__builtin_ia32_vcvtps2ph512_mask(
      (__v16sf)__A, __I, (__v16hi)_mm256_undefined_si256(), -1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundps_ph(__m256i __U, __mmask16 __W, __m512 __A,
                               const int __I) {
  return (__m256i)__builtin_ia32_vcvtps2ph512_mask(
      (__v16sf)__A, __I, (__v16hi)__U, (__mmask16)__W);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_cvtps_ph(__m256i __U, __mmask16 __W, __m512 __A, const int __I) {
  return (__m256i)__builtin_ia32_vcvtps2ph512_mask(
      (__v16sf)__A, __I, (__v16hi)__U, (__mmask16)__W);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundps_ph(__mmask16 __W, __m512 __A, const int __I) {
  return (__m256i)__builtin_ia32_vcvtps2ph512_mask(
      (__v16sf)__A, __I, (__v16hi)_mm256_setzero_si256(), (__mmask16)__W);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_ph(__mmask16 __W, __m512 __A, const int __I) {
  return (__m256i)__builtin_ia32_vcvtps2ph512_mask(
      (__v16sf)__A, __I, (__v16hi)_mm256_setzero_si256(), (__mmask16)__W);
}
extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundpd_ps(__m512d __A, const int __R) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask(
      (__v8df)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)-1, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundpd_ps(__m256 __W, __mmask8 __U, __m512d __A,
                               const int __R) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)__W,
                                                 (__mmask8)__U, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundpd_ps(__mmask8 __U, __m512d __A, const int __R) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask(
      (__v8df)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundsd_ss(__m128 __A, __m128d __B, const int __R) {
  return (__m128)__builtin_ia32_cvtsd2ss_round((__v4sf)__A, (__v2df)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvt_roundsd_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128d __B,
                            const int __R) {
  return (__m128)__builtin_ia32_cvtsd2ss_mask_round((__v4sf)__A, (__v2df)__B,
                                                    (__v4sf)__W, __U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_cvt_roundsd_ss(__mmask8 __U, __m128 __A, __m128d __B, const int __R) {
  return (__m128)__builtin_ia32_cvtsd2ss_mask_round((__v4sf)__A, (__v2df)__B,
                                                    _mm_setzero_ps(), __U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvt_roundss_sd(__m128d __A, __m128 __B, const int __R) {
  return (__m128d)__builtin_ia32_cvtss2sd_round((__v2df)__A, (__v4sf)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvt_roundss_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128 __B,
                            const int __R) {
  return (__m128d)__builtin_ia32_cvtss2sd_mask_round((__v2df)__A, (__v4sf)__B,
                                                     (__v2df)__W, __U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_cvt_roundss_sd(__mmask8 __U, __m128d __A, __m128 __B, const int __R) {
  return (__m128d)__builtin_ia32_cvtss2sd_mask_round(
      (__v2df)__A, (__v4sf)__B, _mm_setzero_pd(), __U, __R);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_si512(__m512i *__P, __m512i __A) {
  __builtin_ia32_movntdq512((__v8di *)__P, (__v8di)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_ps(float *__P, __m512 __A) {
  __builtin_ia32_movntps512(__P, (__v16sf)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_pd(double *__P, __m512d __A) {
  __builtin_ia32_movntpd512(__P, (__v8df)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_stream_load_si512(void *__P) {
  return __builtin_ia32_movntdqa512((__v8di *)__P);
}

typedef enum {
  _MM_MANT_NORM_1_2,
  _MM_MANT_NORM_p5_2,
  _MM_MANT_NORM_p5_1,
  _MM_MANT_NORM_p75_1p5
} _MM_MANTISSA_NORM_ENUM;

typedef enum {
  _MM_MANT_SIGN_src,
  _MM_MANT_SIGN_zero,
  _MM_MANT_SIGN_nan
} _MM_MANTISSA_SIGN_ENUM;

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_getexpss128_round((__v4sf)__A, (__v4sf)__B,
                                                  __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                             const int __R) {
  return (__m128)__builtin_ia32_getexpss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_getexp_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_getexpss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_getexpsd128_round((__v2df)__A, (__v2df)__B,
                                                   __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                             __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_getexpsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_round_sd(__mmask8 __U, __m128d __A, __m128d __B,
                              const int __R) {
  return (__m128d)__builtin_ia32_getexpsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getexp_round_ps(__m512 __A, const int __R) {
  return (__m512)__builtin_ia32_getexpps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getexp_round_ps(__m512 __W, __mmask16 __U, __m512 __A,
                                const int __R) {
  return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getexp_round_ps(__mmask16 __U, __m512 __A, const int __R) {
  return (__m512)__builtin_ia32_getexpps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getexp_round_pd(__m512d __A, const int __R) {
  return (__m512d)__builtin_ia32_getexppd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getexp_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                                const int __R) {
  return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getexp_round_pd(__mmask8 __U, __m512d __A, const int __R) {
  return (__m512d)__builtin_ia32_getexppd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getmant_round_pd(__m512d __A, _MM_MANTISSA_NORM_ENUM __B,
                            _MM_MANTISSA_SIGN_ENUM __C, const int __R) {
  return (__m512d)__builtin_ia32_getmantpd512_mask(
      (__v8df)__A, (__C << 2) | __B, _mm512_undefined_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getmant_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                                 _MM_MANTISSA_NORM_ENUM __B,
                                 _MM_MANTISSA_SIGN_ENUM __C, const int __R) {
  return (__m512d)__builtin_ia32_getmantpd512_mask(
      (__v8df)__A, (__C << 2) | __B, (__v8df)__W, __U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getmant_round_pd(__mmask8 __U, __m512d __A,
                                  _MM_MANTISSA_NORM_ENUM __B,
                                  _MM_MANTISSA_SIGN_ENUM __C, const int __R) {
  return (__m512d)__builtin_ia32_getmantpd512_mask(
      (__v8df)__A, (__C << 2) | __B, (__v8df)_mm512_setzero_pd(), __U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getmant_round_ps(__m512 __A, _MM_MANTISSA_NORM_ENUM __B,
                            _MM_MANTISSA_SIGN_ENUM __C, const int __R) {
  return (__m512)__builtin_ia32_getmantps512_mask(
      (__v16sf)__A, (__C << 2) | __B, _mm512_undefined_ps(), (__mmask16)-1,
      __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getmant_round_ps(__m512 __W, __mmask16 __U, __m512 __A,
                                 _MM_MANTISSA_NORM_ENUM __B,
                                 _MM_MANTISSA_SIGN_ENUM __C, const int __R) {
  return (__m512)__builtin_ia32_getmantps512_mask(
      (__v16sf)__A, (__C << 2) | __B, (__v16sf)__W, __U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getmant_round_ps(__mmask16 __U, __m512 __A,
                                  _MM_MANTISSA_NORM_ENUM __B,
                                  _MM_MANTISSA_SIGN_ENUM __C, const int __R) {
  return (__m512)__builtin_ia32_getmantps512_mask(
      (__v16sf)__A, (__C << 2) | __B, (__v16sf)_mm512_setzero_ps(), __U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getmant_round_sd(__m128d __A, __m128d __B, _MM_MANTISSA_NORM_ENUM __C,
                         _MM_MANTISSA_SIGN_ENUM __D, const int __R) {
  return (__m128d)__builtin_ia32_getmantsd_round((__v2df)__A, (__v2df)__B,
                                                 (__D << 2) | __C, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getmant_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                              __m128d __B, _MM_MANTISSA_NORM_ENUM __C,
                              _MM_MANTISSA_SIGN_ENUM __D, const int __R) {
  return (__m128d)__builtin_ia32_getmantsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__D << 2) | __C, (__v2df)__W, __U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getmant_round_sd(__mmask8 __U, __m128d __A, __m128d __B,
                               _MM_MANTISSA_NORM_ENUM __C,
                               _MM_MANTISSA_SIGN_ENUM __D, const int __R) {
  return (__m128d)__builtin_ia32_getmantsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__D << 2) | __C, (__v2df)_mm_setzero_pd(), __U,
      __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getmant_round_ss(__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C,
                         _MM_MANTISSA_SIGN_ENUM __D, const int __R) {
  return (__m128)__builtin_ia32_getmantss_round((__v4sf)__A, (__v4sf)__B,
                                                (__D << 2) | __C, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getmant_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                              _MM_MANTISSA_NORM_ENUM __C,
                              _MM_MANTISSA_SIGN_ENUM __D, const int __R) {
  return (__m128)__builtin_ia32_getmantss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__D << 2) | __C, (__v4sf)__W, __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getmant_round_ss(__mmask8 __U, __m128 __A, __m128 __B,
                               _MM_MANTISSA_NORM_ENUM __C,
                               _MM_MANTISSA_SIGN_ENUM __D, const int __R) {
  return (__m128)__builtin_ia32_getmantss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__D << 2) | __C, (__v4sf)_mm_setzero_ps(), __U,
      __R);
}
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_roundscale_round_ps(__m512 __A, const int __imm, const int __R) {
  return (__m512)__builtin_ia32_rndscaleps_mask(
      (__v16sf)__A, __imm, (__v16sf)_mm512_undefined_ps(), -1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_roundscale_round_ps(__m512 __A, __mmask16 __B, __m512 __C,
                                    const int __imm, const int __R) {
  return (__m512)__builtin_ia32_rndscaleps_mask(
      (__v16sf)__C, __imm, (__v16sf)__A, (__mmask16)__B, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_roundscale_round_ps(__mmask16 __A, __m512 __B, const int __imm,
                                     const int __R) {
  return (__m512)__builtin_ia32_rndscaleps_mask(
      (__v16sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__A, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_roundscale_round_pd(__m512d __A, const int __imm, const int __R) {
  return (__m512d)__builtin_ia32_rndscalepd_mask(
      (__v8df)__A, __imm, (__v8df)_mm512_undefined_pd(), -1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_roundscale_round_pd(__m512d __A, __mmask8 __B, __m512d __C,
                                    const int __imm, const int __R) {
  return (__m512d)__builtin_ia32_rndscalepd_mask(
      (__v8df)__C, __imm, (__v8df)__A, (__mmask8)__B, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_roundscale_round_pd(__mmask8 __A, __m512d __B, const int __imm,
                                     const int __R) {
  return (__m512d)__builtin_ia32_rndscalepd_mask(
      (__v8df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__A, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_roundscale_round_ss(__m128 __A, __m128 __B, const int __imm,
                            const int __R) {
  return (__m128)__builtin_ia32_rndscaless_mask_round(
      (__v4sf)__A, (__v4sf)__B, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)-1,
      __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_roundscale_round_ss(__m128 __A, __mmask8 __B, __m128 __C,
                                 __m128 __D, const int __imm, const int __R) {
  return (__m128)__builtin_ia32_rndscaless_mask_round(
      (__v4sf)__C, (__v4sf)__D, __imm, (__v4sf)__A, (__mmask8)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_roundscale_round_ss(__mmask8 __A, __m128 __B, __m128 __C,
                                  const int __imm, const int __R) {
  return (__m128)__builtin_ia32_rndscaless_mask_round(
      (__v4sf)__B, (__v4sf)__C, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__A,
      __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_roundscale_round_sd(__m128d __A, __m128d __B, const int __imm,
                            const int __R) {
  return (__m128d)__builtin_ia32_rndscalesd_mask_round(
      (__v2df)__A, (__v2df)__B, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)-1,
      __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_roundscale_round_sd(__m128d __A, __mmask8 __B, __m128d __C,
                                 __m128d __D, const int __imm, const int __R) {
  return (__m128d)__builtin_ia32_rndscalesd_mask_round(
      (__v2df)__C, (__v2df)__D, __imm, (__v2df)__A, (__mmask8)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_roundscale_round_sd(__mmask8 __A, __m128d __B, __m128d __C,
                                  const int __imm, const int __R) {
  return (__m128d)__builtin_ia32_rndscalesd_mask_round(
      (__v2df)__B, (__v2df)__C, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__A,
      __R);
}
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_floor_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x01 | 0x00),
                                                (__v16sf)__A, -1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_floor_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x01 | 0x00),
                                                 (__v8df)__A, -1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ceil_ps(__m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x02 | 0x00),
                                                (__v16sf)__A, -1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_ceil_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x02 | 0x00),
                                                 (__v8df)__A, -1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_floor_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x01 | 0x00),
                                                (__v16sf)__W, __U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_floor_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x01 | 0x00),
                                                 (__v8df)__W, __U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ceil_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_rndscaleps_mask((__v16sf)__A, (0x02 | 0x00),
                                                (__v16sf)__W, __U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_ceil_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_rndscalepd_mask((__v8df)__A, (0x02 | 0x00),
                                                 (__v8df)__W, __U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_alignr_epi32(__m512i __A, __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_alignd512_mask(
      (__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_alignr_epi32(__m512i __W, __mmask16 __U, __m512i __A,
                             __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_alignd512_mask(
      (__v16si)__A, (__v16si)__B, __imm, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_alignr_epi32(__mmask16 __U, __m512i __A, __m512i __B,
                              const int __imm) {
  return (__m512i)__builtin_ia32_alignd512_mask(
      (__v16si)__A, (__v16si)__B, __imm, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_alignr_epi64(__m512i __A, __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_alignq512_mask(
      (__v8di)__A, (__v8di)__B, __imm, (__v8di)_mm512_undefined_epi32(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_alignr_epi64(__m512i __W, __mmask8 __U, __m512i __A,
                             __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_alignq512_mask((__v8di)__A, (__v8di)__B, __imm,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_alignr_epi64(__mmask8 __U, __m512i __A, __m512i __B,
                              const int __imm) {
  return (__m512i)__builtin_ia32_alignq512_mask((__v8di)__A, (__v8di)__B, __imm,
                                                (__v8di)_mm512_setzero_si512(),
                                                (__mmask8)__U);
}
extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__A, (__v16si)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqd512_mask((__v16si)__A, (__v16si)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__A, (__v8di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq512_mask((__v8di)__A, (__v8di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__A, (__v16si)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtd512_mask((__v16si)__A, (__v16si)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__A, (__v8di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq512_mask((__v8di)__A, (__v8di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 5,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 2,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 1,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu32_mask(__mmask16 __M, __m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu32_mask(__m512i __X, __m512i __Y) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y, 4,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu64_mask(__mmask8 __M, __m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu64_mask(__m512i __X, __m512i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftli_mask16(__mmask16 __A, unsigned int __B) {
  return (__mmask16)__builtin_ia32_kshiftlihi((__mmask16)__A, (__mmask8)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftri_mask16(__mmask16 __A, unsigned int __B) {
  return (__mmask16)__builtin_ia32_kshiftrihi((__mmask16)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epi64_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, __P,
                                               (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epi32_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, __P,
                                                (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epu64_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epu32_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y,
                                                 __P, (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_round_pd_mask(__m512d __X, __m512d __Y, const int __P,
                             const int __R) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P,
                                                (__mmask8)-1, __R);
}

extern __inline __mmask16 __attribute__((__gnu_inline__, __always_inline__,
                                         __artificial__))
_mm512_cmp_round_ps_mask(__m512 __X, __m512 __Y, const int __P, const int __R) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 __P, (__mmask16)-1, __R);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epi64_mask(__mmask8 __U, __m512i __X, __m512i __Y,
                               const int __P) {
  return (__mmask8)__builtin_ia32_cmpq512_mask((__v8di)__X, (__v8di)__Y, __P,
                                               (__mmask8)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epi32_mask(__mmask16 __U, __m512i __X, __m512i __Y,
                               const int __P) {
  return (__mmask16)__builtin_ia32_cmpd512_mask((__v16si)__X, (__v16si)__Y, __P,
                                                (__mmask16)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epu64_mask(__mmask8 __U, __m512i __X, __m512i __Y,
                               const int __P) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__X, (__v8di)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epu32_mask(__mmask16 __U, __m512i __X, __m512i __Y,
                               const int __P) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__X, (__v16si)__Y,
                                                 __P, (__mmask16)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_round_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y,
                                  const int __P, const int __R) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P,
                                                (__mmask8)__U, __R);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_round_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y,
                                  const int __P, const int __R) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 __P, (__mmask16)__U, __R);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_cmp_round_sd_mask(__m128d __X, __m128d __Y, const int __P, const int __R) {
  return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P,
                                             (__mmask8)-1, __R);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmp_round_sd_mask(__mmask8 __M, __m128d __X, __m128d __Y,
                               const int __P, const int __R) {
  return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P,
                                             (__mmask8)__M, __R);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_cmp_round_ss_mask(__m128 __X, __m128 __Y, const int __P, const int __R) {
  return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P,
                                             (__mmask8)-1, __R);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmp_round_ss_mask(__mmask8 __M, __m128 __X, __m128 __Y,
                               const int __P, const int __R) {
  return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P,
                                             (__mmask8)__M, __R);
}
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i32gather_ps(__m512i __index, void const *__addr, int __scale) {
  __m512 __v1_old = _mm512_undefined_ps();
  __mmask16 __mask = 0xFFFF;

  return (__m512)__builtin_ia32_gathersiv16sf(
      (__v16sf)__v1_old, __addr, (__v16si)__index, __mask, __scale);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32gather_ps(__m512 __v1_old, __mmask16 __mask, __m512i __index,
                             void const *__addr, int __scale) {
  return (__m512)__builtin_ia32_gathersiv16sf(
      (__v16sf)__v1_old, __addr, (__v16si)__index, __mask, __scale);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i32gather_pd(__m256i __index, void const *__addr, int __scale) {
  __m512d __v1_old = _mm512_undefined_pd();
  __mmask8 __mask = 0xFF;

  return (__m512d)__builtin_ia32_gathersiv8df((__v8df)__v1_old, __addr,
                                              (__v8si)__index, __mask, __scale);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32gather_pd(__m512d __v1_old, __mmask8 __mask, __m256i __index,
                             void const *__addr, int __scale) {
  return (__m512d)__builtin_ia32_gathersiv8df((__v8df)__v1_old, __addr,
                                              (__v8si)__index, __mask, __scale);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i64gather_ps(__m512i __index, void const *__addr, int __scale) {
  __m256 __v1_old = _mm256_undefined_ps();
  __mmask8 __mask = 0xFF;

  return (__m256)__builtin_ia32_gatherdiv16sf((__v8sf)__v1_old, __addr,
                                              (__v8di)__index, __mask, __scale);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64gather_ps(__m256 __v1_old, __mmask8 __mask, __m512i __index,
                             void const *__addr, int __scale) {
  return (__m256)__builtin_ia32_gatherdiv16sf((__v8sf)__v1_old, __addr,
                                              (__v8di)__index, __mask, __scale);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i64gather_pd(__m512i __index, void const *__addr, int __scale) {
  __m512d __v1_old = _mm512_undefined_pd();
  __mmask8 __mask = 0xFF;

  return (__m512d)__builtin_ia32_gatherdiv8df((__v8df)__v1_old, __addr,
                                              (__v8di)__index, __mask, __scale);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64gather_pd(__m512d __v1_old, __mmask8 __mask, __m512i __index,
                             void const *__addr, int __scale) {
  return (__m512d)__builtin_ia32_gatherdiv8df((__v8df)__v1_old, __addr,
                                              (__v8di)__index, __mask, __scale);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i32gather_epi32(__m512i __index, void const *__addr, int __scale) {
  __m512i __v1_old = _mm512_undefined_epi32();
  __mmask16 __mask = 0xFFFF;

  return (__m512i)__builtin_ia32_gathersiv16si(
      (__v16si)__v1_old, __addr, (__v16si)__index, __mask, __scale);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32gather_epi32(__m512i __v1_old, __mmask16 __mask,
                                __m512i __index, void const *__addr,
                                int __scale) {
  return (__m512i)__builtin_ia32_gathersiv16si(
      (__v16si)__v1_old, __addr, (__v16si)__index, __mask, __scale);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i32gather_epi64(__m256i __index, void const *__addr, int __scale) {
  __m512i __v1_old = _mm512_undefined_epi32();
  __mmask8 __mask = 0xFF;

  return (__m512i)__builtin_ia32_gathersiv8di((__v8di)__v1_old, __addr,
                                              (__v8si)__index, __mask, __scale);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32gather_epi64(__m512i __v1_old, __mmask8 __mask,
                                __m256i __index, void const *__addr,
                                int __scale) {
  return (__m512i)__builtin_ia32_gathersiv8di((__v8di)__v1_old, __addr,
                                              (__v8si)__index, __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i64gather_epi32(__m512i __index, void const *__addr, int __scale) {
  __m256i __v1_old = _mm256_undefined_si256();
  __mmask8 __mask = 0xFF;

  return (__m256i)__builtin_ia32_gatherdiv16si(
      (__v8si)__v1_old, __addr, (__v8di)__index, __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64gather_epi32(__m256i __v1_old, __mmask8 __mask,
                                __m512i __index, void const *__addr,
                                int __scale) {
  return (__m256i)__builtin_ia32_gatherdiv16si(
      (__v8si)__v1_old, __addr, (__v8di)__index, __mask, __scale);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i64gather_epi64(__m512i __index, void const *__addr, int __scale) {
  __m512i __v1_old = _mm512_undefined_epi32();
  __mmask8 __mask = 0xFF;

  return (__m512i)__builtin_ia32_gatherdiv8di((__v8di)__v1_old, __addr,
                                              (__v8di)__index, __mask, __scale);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64gather_epi64(__m512i __v1_old, __mmask8 __mask,
                                __m512i __index, void const *__addr,
                                int __scale) {
  return (__m512i)__builtin_ia32_gatherdiv8di((__v8di)__v1_old, __addr,
                                              (__v8di)__index, __mask, __scale);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm512_i32scatter_ps(void *__addr, __m512i __index, __m512 __v1, int __scale) {
  __builtin_ia32_scattersiv16sf(__addr, (__mmask16)0xFFFF, (__v16si)__index,
                                (__v16sf)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32scatter_ps(void *__addr, __mmask16 __mask, __m512i __index,
                              __m512 __v1, int __scale) {
  __builtin_ia32_scattersiv16sf(__addr, __mask, (__v16si)__index, (__v16sf)__v1,
                                __scale);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm512_i32scatter_pd(void *__addr, __m256i __index, __m512d __v1, int __scale) {
  __builtin_ia32_scattersiv8df(__addr, (__mmask8)0xFF, (__v8si)__index,
                               (__v8df)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32scatter_pd(void *__addr, __mmask8 __mask, __m256i __index,
                              __m512d __v1, int __scale) {
  __builtin_ia32_scattersiv8df(__addr, __mask, (__v8si)__index, (__v8df)__v1,
                               __scale);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm512_i64scatter_ps(void *__addr, __m512i __index, __m256 __v1, int __scale) {
  __builtin_ia32_scatterdiv16sf(__addr, (__mmask8)0xFF, (__v8di)__index,
                                (__v8sf)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64scatter_ps(void *__addr, __mmask8 __mask, __m512i __index,
                              __m256 __v1, int __scale) {
  __builtin_ia32_scatterdiv16sf(__addr, __mask, (__v8di)__index, (__v8sf)__v1,
                                __scale);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm512_i64scatter_pd(void *__addr, __m512i __index, __m512d __v1, int __scale) {
  __builtin_ia32_scatterdiv8df(__addr, (__mmask8)0xFF, (__v8di)__index,
                               (__v8df)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64scatter_pd(void *__addr, __mmask8 __mask, __m512i __index,
                              __m512d __v1, int __scale) {
  __builtin_ia32_scatterdiv8df(__addr, __mask, (__v8di)__index, (__v8df)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i32scatter_epi32(void *__addr, __m512i __index, __m512i __v1,
                            int __scale) {
  __builtin_ia32_scattersiv16si(__addr, (__mmask16)0xFFFF, (__v16si)__index,
                                (__v16si)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32scatter_epi32(void *__addr, __mmask16 __mask,
                                 __m512i __index, __m512i __v1, int __scale) {
  __builtin_ia32_scattersiv16si(__addr, __mask, (__v16si)__index, (__v16si)__v1,
                                __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i32scatter_epi64(void *__addr, __m256i __index, __m512i __v1,
                            int __scale) {
  __builtin_ia32_scattersiv8di(__addr, (__mmask8)0xFF, (__v8si)__index,
                               (__v8di)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i32scatter_epi64(void *__addr, __mmask8 __mask, __m256i __index,
                                 __m512i __v1, int __scale) {
  __builtin_ia32_scattersiv8di(__addr, __mask, (__v8si)__index, (__v8di)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i64scatter_epi32(void *__addr, __m512i __index, __m256i __v1,
                            int __scale) {
  __builtin_ia32_scatterdiv16si(__addr, (__mmask8)0xFF, (__v8di)__index,
                                (__v8si)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64scatter_epi32(void *__addr, __mmask8 __mask, __m512i __index,
                                 __m256i __v1, int __scale) {
  __builtin_ia32_scatterdiv16si(__addr, __mask, (__v8di)__index, (__v8si)__v1,
                                __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_i64scatter_epi64(void *__addr, __m512i __index, __m512i __v1,
                            int __scale) {
  __builtin_ia32_scatterdiv8di(__addr, (__mmask8)0xFF, (__v8di)__index,
                               (__v8di)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_i64scatter_epi64(void *__addr, __mmask8 __mask, __m512i __index,
                                 __m512i __v1, int __scale) {
  __builtin_ia32_scatterdiv8di(__addr, __mask, (__v8di)__index, (__v8di)__v1,
                               __scale);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_compressdf512_mask((__v8df)__A, (__v8df)__W,
                                                    (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_compressdf512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m512d __A) {
  __builtin_ia32_compressstoredf512_mask((__v8df *)__P, (__v8df)__A,
                                         (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_compresssf512_mask((__v16sf)__A, (__v16sf)__W,
                                                   (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_compresssf512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_ps(void *__P, __mmask16 __U, __m512 __A) {
  __builtin_ia32_compressstoresf512_mask((__v16sf *)__P, (__v16sf)__A,
                                         (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compressdi512_mask((__v8di)__A, (__v8di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compressdi512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m512i __A) {
  __builtin_ia32_compressstoredi512_mask((__v8di *)__P, (__v8di)__A,
                                         (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compresssi512_mask((__v16si)__A, (__v16si)__W,
                                                    (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_compresssi512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi32(void *__P, __mmask16 __U, __m512i __A) {
  __builtin_ia32_compressstoresi512_mask((__v16si *)__P, (__v16si)__A,
                                         (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_expanddf512_mask((__v8df)__A, (__v8df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_expanddf512_maskz(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_pd(__m512d __W, __mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_expandloaddf512_mask(
      (const __v8df *)__P, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_pd(__mmask8 __U, void const *__P) {
  return (__m512d)__builtin_ia32_expandloaddf512_maskz(
      (const __v8df *)__P, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_expandsf512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_expandsf512_maskz(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_ps(__m512 __W, __mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_expandloadsf512_mask(
      (const __v16sf *)__P, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_ps(__mmask16 __U, void const *__P) {
  return (__m512)__builtin_ia32_expandloadsf512_maskz(
      (const __v16sf *)__P, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expanddi512_mask((__v8di)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expanddi512_maskz(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi64(__m512i __W, __mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloaddi512_mask(
      (const __v8di *)__P, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi64(__mmask8 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloaddi512_maskz(
      (const __v8di *)__P, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expandsi512_mask((__v16si)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_expandsi512_maskz(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi32(__m512i __W, __mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloadsi512_mask(
      (const __v16si *)__P, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi32(__mmask16 __U, void const *__P) {
  return (__m512i)__builtin_ia32_expandloadsi512_maskz(
      (const __v16si *)__P, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask16_u8(__mmask16 __A, __mmask16 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestchi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzhi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_kortestzhi((__mmask16)__A,
                                                  (__mmask16)__B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_kortestchi((__mmask16)__A,
                                                  (__mmask16)__B);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask16_u32(__mmask16 __A) {
  return (unsigned int)__builtin_ia32_kmovw((__mmask16)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu32_mask16(unsigned int __A) {
  return (__mmask16)__builtin_ia32_kmovw((__mmask16)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask16(__mmask16 *__A) {
  return (__mmask16)__builtin_ia32_kmovw(*(__mmask16 *)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask16(__mmask16 *__A, __mmask16 __B) {
  *(__mmask16 *)__A = __builtin_ia32_kmovw(__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kand(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kandhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kandn(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kandnhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kor(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_korhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kortestz(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kortestzhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kortestc(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kortestchi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kxnor(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kxnorhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kxor(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kxorhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_knot(__mmask16 __A) {
  return (__mmask16)__builtin_ia32_knothi((__mmask16)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kunpackb(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kunpckhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kunpackb_mask16(__mmask8 __A, __mmask8 __B) {
  return (__mmask16)__builtin_ia32_kunpckhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_inserti32x4(__mmask16 __B, __m512i __C, __m128i __D,
                             const int __imm) {
  return (__m512i)__builtin_ia32_inserti32x4_mask(
      (__v16si)__C, (__v4si)__D, __imm, (__v16si)_mm512_setzero_si512(), __B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_insertf32x4(__mmask16 __B, __m512 __C, __m128 __D,
                             const int __imm) {
  return (__m512)__builtin_ia32_insertf32x4_mask(
      (__v16sf)__C, (__v4sf)__D, __imm, (__v16sf)_mm512_setzero_ps(), __B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_inserti32x4(__m512i __A, __mmask16 __B, __m512i __C,
                            __m128i __D, const int __imm) {
  return (__m512i)__builtin_ia32_inserti32x4_mask((__v16si)__C, (__v4si)__D,
                                                  __imm, (__v16si)__A, __B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_insertf32x4(__m512 __A, __mmask16 __B, __m512 __C, __m128 __D,
                            const int __imm) {
  return (__m512)__builtin_ia32_insertf32x4_mask((__v16sf)__C, (__v4sf)__D,
                                                 __imm, (__v16sf)__A, __B);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epi64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epu64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu64(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epu64(__m512i __W, __mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu64(__mmask8 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsd512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epi32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsd512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epu32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxud512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_undefined_epi32(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu32(__mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminud512_mask(
      (__v16si)__A, (__v16si)__B, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epu32(__m512i __W, __mmask16 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminud512_mask((__v16si)__A, (__v16si)__B,
                                                (__v16si)__W, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpcklps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_unpcklps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_maxsd_round((__v2df)__A, (__v2df)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                          const int __R) {
  return (__m128d)__builtin_ia32_maxsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_max_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_maxsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_maxss_round((__v4sf)__A, (__v4sf)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                          const int __R) {
  return (__m128)__builtin_ia32_maxss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_max_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_maxss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_round_sd(__m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_minsd_round((__v2df)__A, (__v2df)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                          const int __R) {
  return (__m128d)__builtin_ia32_minsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_min_round_sd(__mmask8 __U, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_minsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_round_ss(__m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_minss_round((__v4sf)__A, (__v4sf)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                          const int __R) {
  return (__m128)__builtin_ia32_minss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_min_round_ss(__mmask8 __U, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_minss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, __R);
}
extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_pd(__mmask8 __U, __m512d __A, __m512d __W) {
  return (__m512d)__builtin_ia32_blendmpd_512_mask((__v8df)__A, (__v8df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_ps(__mmask16 __U, __m512 __A, __m512 __W) {
  return (__m512)__builtin_ia32_blendmps_512_mask((__v16sf)__A, (__v16sf)__W,
                                                  (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_epi64(__mmask8 __U, __m512i __A, __m512i __W) {
  return (__m512i)__builtin_ia32_blendmq_512_mask((__v8di)__A, (__v8di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_epi32(__mmask16 __U, __m512i __A, __m512i __W) {
  return (__m512i)__builtin_ia32_blendmd_512_mask((__v16si)__A, (__v16si)__W,
                                                  (__mmask16)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, (__v2df)__A,
                                                 (__v2df)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, (__v4sf)__A,
                                                (__v4sf)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, (__v2df)__A,
                                                 -(__v2df)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, (__v4sf)__A,
                                                -(__v4sf)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, -(__v2df)__A,
                                                 (__v2df)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, -(__v4sf)__A,
                                                (__v4sf)__B, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_round_sd(__m128d __W, __m128d __A, __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_round((__v2df)__W, -(__v2df)__A,
                                                 -(__v2df)__B, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_round_ss(__m128 __W, __m128 __A, __m128 __B, const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_round((__v4sf)__W, -(__v4sf)__A,
                                                -(__v4sf)__B, __R);
}
extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask3(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddss3_mask3(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, (__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, (__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubsd3_mask3(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubss3_mask3(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, (__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, (__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask3(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddss3_mask3(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, -(__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, -(__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_sd(__m128d __W, __m128d __A, __m128d __B, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubsd3_mask3(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubss3_mask3(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_sd(__mmask8 __U, __m128d __W, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, -(__v2df)__A, -(__v2df)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, -(__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                            const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                            const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_mask((__v4sf)__W, (__v4sf)__A,
                                               (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_round_sd(__m128d __W, __m128d __A, __m128d __B,
                             __mmask8 __U, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask3(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_round_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,
                             const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_mask3(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_round_sd(__mmask8 __U, __m128d __W, __m128d __A,
                             __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_round_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,
                             const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                            const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, (__v2df)__A, -(__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                            const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, (__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_round_sd(__m128d __W, __m128d __A, __m128d __B,
                             __mmask8 __U, const int __R) {
  return (__m128d)__builtin_ia32_vfmsubsd3_mask3(
      (__v2df)__W, (__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_round_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,
                             const int __R) {
  return (__m128)__builtin_ia32_vfmsubss3_mask3(
      (__v4sf)__W, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_round_sd(__mmask8 __U, __m128d __W, __m128d __A,
                             __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, (__v2df)__A, -(__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_round_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,
                             const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, (__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                             __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                             const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_mask((__v4sf)__W, -(__v4sf)__A,
                                               (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_round_sd(__m128d __W, __m128d __A, __m128d __B,
                              __mmask8 __U, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask3(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_round_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,
                              const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_mask3(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_round_sd(__mmask8 __U, __m128d __W, __m128d __A,
                              __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_round_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,
                              const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                             __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_mask(
      (__v2df)__W, -(__v2df)__A, -(__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                             const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_mask(
      (__v4sf)__W, -(__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_round_sd(__m128d __W, __m128d __A, __m128d __B,
                              __mmask8 __U, const int __R) {
  return (__m128d)__builtin_ia32_vfmsubsd3_mask3(
      (__v2df)__W, -(__v2df)__A, (__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_round_ss(__m128 __W, __m128 __A, __m128 __B, __mmask8 __U,
                              const int __R) {
  return (__m128)__builtin_ia32_vfmsubss3_mask3(
      (__v4sf)__W, -(__v4sf)__A, (__v4sf)__B, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_round_sd(__mmask8 __U, __m128d __W, __m128d __A,
                              __m128d __B, const int __R) {
  return (__m128d)__builtin_ia32_vfmaddsd3_maskz(
      (__v2df)__W, -(__v2df)__A, -(__v2df)__B, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_round_ss(__mmask8 __U, __m128 __W, __m128 __A, __m128 __B,
                              const int __R) {
  return (__m128)__builtin_ia32_vfmaddss3_maskz(
      (__v4sf)__W, -(__v4sf)__A, -(__v4sf)__B, (__mmask8)__U, __R);
}
extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comi_round_ss(__m128 __A, __m128 __B, const int __P, const int __R) {
  return __builtin_ia32_vcomiss((__v4sf)__A, (__v4sf)__B, __P, __R);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_comi_round_sd(__m128d __A, __m128d __B, const int __P, const int __R) {
  return __builtin_ia32_vcomisd((__v2df)__A, (__v2df)__B, __P, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_sqrtpd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sqrt_ps(__m512 __A) {
  return (__m512)__builtin_ia32_sqrtps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sqrt_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_sqrtps512_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sqrt_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_sqrtps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8df)__A + (__v8df)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_addpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_addpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A + (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_addps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_addps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8df)__A - (__v8df)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_subpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_subpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A - (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_subps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_subps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_pd(__m512d __A, __m512d __B) {
  return (__m512d)((__v8df)__A * (__v8df)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_mulpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_mulpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mul_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A * (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mul_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_mulps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mul_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_mulps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_pd(__m512d __M, __m512d __V) {
  return (__m512d)((__v8df)__M / (__v8df)__V);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_pd(__m512d __W, __mmask8 __U, __m512d __M, __m512d __V) {
  return (__m512d)__builtin_ia32_divpd512_mask(
      (__v8df)__M, (__v8df)__V, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_pd(__mmask8 __U, __m512d __M, __m512d __V) {
  return (__m512d)__builtin_ia32_divpd512_mask((__v8df)__M, (__v8df)__V,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_div_ps(__m512 __A, __m512 __B) {
  return (__m512)((__v16sf)__A / (__v16sf)__B);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_div_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_divps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_div_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_divps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_maxpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_maxpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_maxps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_maxps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_undefined_pd(),
                                               (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_minpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_minpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)_mm512_setzero_pd(),
                                               (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_undefined_ps(),
                                              (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_minps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_minps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)_mm512_setzero_ps(),
                                              (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)_mm512_undefined_pd(),
                                                  (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_scalef_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_scalefpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_scalefpd512_mask((__v8df)__A, (__v8df)__B,
                                                  (__v8df)_mm512_setzero_pd(),
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_scalef_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_undefined_ps(),
                                                 (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_scalef_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_scalefps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_scalef_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_scalefps512_mask((__v16sf)__A, (__v16sf)__B,
                                                 (__v16sf)_mm512_setzero_ps(),
                                                 (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmadd_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsub_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsub_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmaddsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmaddsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmaddsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmaddsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask3_fmaddsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_maskz_fmaddsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_fmsubadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_mask(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fmsubadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfmsubaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fmsubadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfmaddsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, -(__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fmsubadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask3_fmsubadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfmsubaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_maskz_fmsubadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfmaddsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, -(__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmadd_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fnmadd_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fnmadd_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmaddpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfnmaddps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmaddps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmsub_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask3_fnmsub_pd(__m512d __A, __m512d __B, __m512d __C, __mmask8 __U) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_mask3(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_fnmsub_pd(__mmask8 __U, __m512d __A, __m512d __B, __m512d __C) {
  return (__m512d)__builtin_ia32_vfnmsubpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8df)__C, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fnmsub_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask3_fnmsub_ps(__m512 __A, __m512 __B, __m512 __C, __mmask16 __U) {
  return (__m512)__builtin_ia32_vfnmsubps512_mask3(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fnmsub_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C) {
  return (__m512)__builtin_ia32_vfnmsubps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)__C, (__mmask16)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epi32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epi32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask((__v8df)__A, (__v8si)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epi32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epu32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epu32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask((__v8df)__A, (__v8si)__W,
                                                    (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epu32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvttpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epi32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epi32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask((__v8df)__A, (__v8si)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epi32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2dq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epu32(__m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epu32(__m256i __W, __mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask((__v8df)__A, (__v8si)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epu32(__mmask8 __U, __m512d __A) {
  return (__m256i)__builtin_ia32_cvtpd2udq512_mask(
      (__v8df)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epi32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epi32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask((__v16sf)__A, (__v16si)__W,
                                                   (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epi32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epu32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epu32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask((__v16sf)__A, (__v16si)__W,
                                                    (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epu32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvttps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epi32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epi32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask((__v16sf)__A, (__v16si)__W,
                                                  (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epi32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2dq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epu32(__m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epu32(__m512i __W, __mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask((__v16sf)__A, (__v16si)__W,
                                                   (__mmask16)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epu32(__mmask16 __U, __m512 __A) {
  return (__m512i)__builtin_ia32_cvtps2udq512_mask(
      (__v16sf)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U, 0x04);
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsd_f64(__m512d __A) {
  return __A[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtss_f32(__m512 __A) {
  return __A[0];
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu64_ss(__m128 __A, unsigned long long __B) {
  return (__m128)__builtin_ia32_cvtusi2ss64((__v4sf)__A, __B, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu64_sd(__m128d __A, unsigned long long __B) {
  return (__m128d)__builtin_ia32_cvtusi2sd64((__v2df)__A, __B, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtu32_ss(__m128 __A, unsigned __B) {
  return (__m128)__builtin_ia32_cvtusi2ss32((__v4sf)__A, __B, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi32_ps(__m512i __A) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi32_ps(__m512 __W, __mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask((__v16si)__A, (__v16sf)__W,
                                                 (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi32_ps(__mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtdq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu32_ps(__m512i __A) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu32_ps(__m512 __W, __mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask((__v16si)__A, (__v16sf)__W,
                                                  (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu32_ps(__mmask16 __U, __m512i __A) {
  return (__m512)__builtin_ia32_cvtudq2ps512_mask(
      (__v16si)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fixupimm_pd(__m512d __A, __m512d __B, __m512i __C, const int __imm) {
  return (__m512d)__builtin_ia32_fixupimmpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fixupimm_pd(__m512d __A, __mmask8 __U, __m512d __B, __m512i __C,
                            const int __imm) {
  return (__m512d)__builtin_ia32_fixupimmpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fixupimm_pd(__mmask8 __U, __m512d __A, __m512d __B,
                             __m512i __C, const int __imm) {
  return (__m512d)__builtin_ia32_fixupimmpd512_maskz(
      (__v8df)__A, (__v8df)__B, (__v8di)__C, __imm, (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fixupimm_ps(__m512 __A, __m512 __B, __m512i __C, const int __imm) {
  return (__m512)__builtin_ia32_fixupimmps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fixupimm_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512i __C,
                            const int __imm) {
  return (__m512)__builtin_ia32_fixupimmps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_fixupimm_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512i __C,
                             const int __imm) {
  return (__m512)__builtin_ia32_fixupimmps512_maskz(
      (__v16sf)__A, (__v16sf)__B, (__v16si)__C, __imm, (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fixupimm_sd(__m128d __A, __m128d __B, __m128i __C, const int __imm) {
  return (__m128d)__builtin_ia32_fixupimmsd_mask(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)-1, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fixupimm_sd(__m128d __A, __mmask8 __U, __m128d __B, __m128i __C,
                         const int __imm) {
  return (__m128d)__builtin_ia32_fixupimmsd_mask(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fixupimm_sd(__mmask8 __U, __m128d __A, __m128d __B, __m128i __C,
                          const int __imm) {
  return (__m128d)__builtin_ia32_fixupimmsd_maskz(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fixupimm_ss(__m128 __A, __m128 __B, __m128i __C, const int __imm) {
  return (__m128)__builtin_ia32_fixupimmss_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)-1, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fixupimm_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128i __C,
                         const int __imm) {
  return (__m128)__builtin_ia32_fixupimmss_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fixupimm_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128i __C,
                          const int __imm) {
  return (__m128)__builtin_ia32_fixupimmss_maskz(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U, 0x04);
}
extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_u64(__m128 __A) {
  return (unsigned long long)__builtin_ia32_vcvtss2usi64((__v4sf)__A, 0x04);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_u64(__m128 __A) {
  return (unsigned long long)__builtin_ia32_vcvttss2usi64((__v4sf)__A, 0x04);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_i64(__m128 __A) {
  return (long long)__builtin_ia32_vcvttss2si64((__v4sf)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsi512_si32(__m512i __A) {
  __v16si __B = (__v16si)__A;
  return __B[0];
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_u32(__m128 __A) {
  return (unsigned)__builtin_ia32_vcvtss2usi32((__v4sf)__A, 0x04);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_u32(__m128 __A) {
  return (unsigned)__builtin_ia32_vcvttss2usi32((__v4sf)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttss_i32(__m128 __A) {
  return (int)__builtin_ia32_vcvttss2si32((__v4sf)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_i32(__m128d __A) {
  return (int)__builtin_ia32_cvtsd2si((__v2df)__A);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_i32(__m128 __A) {
  return (int)__builtin_ia32_cvtss2si((__v4sf)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti32_sd(__m128d __A, int __B) {
  return (__m128d)__builtin_ia32_cvtsi2sd((__v2df)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti32_ss(__m128 __A, int __B) {
  return (__m128)__builtin_ia32_cvtsi2ss((__v4sf)__A, __B);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_u64(__m128d __A) {
  return (unsigned long long)__builtin_ia32_vcvtsd2usi64((__v2df)__A, 0x04);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_u64(__m128d __A) {
  return (unsigned long long)__builtin_ia32_vcvttsd2usi64((__v2df)__A, 0x04);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_i64(__m128d __A) {
  return (long long)__builtin_ia32_vcvttsd2si64((__v2df)__A, 0x04);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_i64(__m128d __A) {
  return (long long)__builtin_ia32_cvtsd2si64((__v2df)__A);
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtss_i64(__m128 __A) {
  return (long long)__builtin_ia32_cvtss2si64((__v4sf)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti64_sd(__m128d __A, long long __B) {
  return (__m128d)__builtin_ia32_cvtsi642sd((__v2df)__A, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvti64_ss(__m128 __A, long long __B) {
  return (__m128)__builtin_ia32_cvtsi642ss((__v4sf)__A, __B);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsd_u32(__m128d __A) {
  return (unsigned)__builtin_ia32_vcvtsd2usi32((__v2df)__A, 0x04);
}

extern __inline unsigned
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_u32(__m128d __A) {
  return (unsigned)__builtin_ia32_vcvttsd2usi32((__v2df)__A, 0x04);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttsd_i32(__m128d __A) {
  return (int)__builtin_ia32_vcvttsd2si32((__v2df)__A, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_pd(__m256 __A) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask(
      (__v8sf)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_pd(__m512d __W, __mmask8 __U, __m256 __A) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask((__v8sf)__A, (__v8df)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_pd(__mmask8 __U, __m256 __A) {
  return (__m512d)__builtin_ia32_cvtps2pd512_mask(
      (__v8sf)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtph_ps(__m256i __A) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask(
      (__v16hi)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtph_ps(__m512 __W, __mmask16 __U, __m256i __A) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask((__v16hi)__A, (__v16sf)__W,
                                                  (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtph_ps(__mmask16 __U, __m256i __A) {
  return (__m512)__builtin_ia32_vcvtph2ps512_mask(
      (__v16hi)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_ps(__m512d __A) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask(
      (__v8df)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_ps(__m256 __W, __mmask8 __U, __m512d __A) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask((__v8df)__A, (__v8sf)__W,
                                                 (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_ps(__mmask8 __U, __m512d __A) {
  return (__m256)__builtin_ia32_cvtpd2ps512_mask(
      (__v8df)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getexp_ps(__m512 __A) {
  return (__m512)__builtin_ia32_getexpps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getexp_ps(__m512 __W, __mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_getexpps512_mask((__v16sf)__A, (__v16sf)__W,
                                                 (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getexp_ps(__mmask16 __U, __m512 __A) {
  return (__m512)__builtin_ia32_getexpps512_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getexp_pd(__m512d __A) {
  return (__m512d)__builtin_ia32_getexppd512_mask(
      (__v8df)__A, (__v8df)_mm512_undefined_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getexp_pd(__m512d __W, __mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_getexppd512_mask((__v8df)__A, (__v8df)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getexp_pd(__mmask8 __U, __m512d __A) {
  return (__m512d)__builtin_ia32_getexppd512_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_ss(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_getexpss128_round((__v4sf)__A, (__v4sf)__B,
                                                  0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_getexpss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_ss(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_getexpss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_sd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_getexpsd128_round((__v2df)__A, (__v2df)__B,
                                                   0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_getexpsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_sd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_getexpsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getmant_pd(__m512d __A, _MM_MANTISSA_NORM_ENUM __B,
                      _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m512d)__builtin_ia32_getmantpd512_mask(
      (__v8df)__A, (__C << 2) | __B, _mm512_undefined_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getmant_pd(__m512d __W, __mmask8 __U, __m512d __A,
                           _MM_MANTISSA_NORM_ENUM __B,
                           _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m512d)__builtin_ia32_getmantpd512_mask(
      (__v8df)__A, (__C << 2) | __B, (__v8df)__W, __U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getmant_pd(__mmask8 __U, __m512d __A,
                            _MM_MANTISSA_NORM_ENUM __B,
                            _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m512d)__builtin_ia32_getmantpd512_mask(
      (__v8df)__A, (__C << 2) | __B, (__v8df)_mm512_setzero_pd(), __U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_getmant_ps(__m512 __A, _MM_MANTISSA_NORM_ENUM __B,
                      _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m512)__builtin_ia32_getmantps512_mask(
      (__v16sf)__A, (__C << 2) | __B, _mm512_undefined_ps(), (__mmask16)-1,
      0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_getmant_ps(__m512 __W, __mmask16 __U, __m512 __A,
                           _MM_MANTISSA_NORM_ENUM __B,
                           _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m512)__builtin_ia32_getmantps512_mask(
      (__v16sf)__A, (__C << 2) | __B, (__v16sf)__W, __U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_getmant_ps(__mmask16 __U, __m512 __A,
                            _MM_MANTISSA_NORM_ENUM __B,
                            _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m512)__builtin_ia32_getmantps512_mask(
      (__v16sf)__A, (__C << 2) | __B, (__v16sf)_mm512_setzero_ps(), __U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getmant_sd(__m128d __A, __m128d __B, _MM_MANTISSA_NORM_ENUM __C,
                   _MM_MANTISSA_SIGN_ENUM __D) {
  return (__m128d)__builtin_ia32_getmantsd_round((__v2df)__A, (__v2df)__B,
                                                 (__D << 2) | __C, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getmant_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                        _MM_MANTISSA_NORM_ENUM __C,
                        _MM_MANTISSA_SIGN_ENUM __D) {
  return (__m128d)__builtin_ia32_getmantsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__D << 2) | __C, (__v2df)__W, __U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getmant_sd(__mmask8 __U, __m128d __A, __m128d __B,
                         _MM_MANTISSA_NORM_ENUM __C,
                         _MM_MANTISSA_SIGN_ENUM __D) {
  return (__m128d)__builtin_ia32_getmantsd_mask_round(
      (__v2df)__A, (__v2df)__B, (__D << 2) | __C, (__v2df)_mm_setzero_pd(), __U,
      0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getmant_ss(__m128 __A, __m128 __B, _MM_MANTISSA_NORM_ENUM __C,
                   _MM_MANTISSA_SIGN_ENUM __D) {
  return (__m128)__builtin_ia32_getmantss_round((__v4sf)__A, (__v4sf)__B,
                                                (__D << 2) | __C, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getmant_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                        _MM_MANTISSA_NORM_ENUM __C,
                        _MM_MANTISSA_SIGN_ENUM __D) {
  return (__m128)__builtin_ia32_getmantss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__D << 2) | __C, (__v4sf)__W, __U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getmant_ss(__mmask8 __U, __m128 __A, __m128 __B,
                         _MM_MANTISSA_NORM_ENUM __C,
                         _MM_MANTISSA_SIGN_ENUM __D) {
  return (__m128)__builtin_ia32_getmantss_mask_round(
      (__v4sf)__A, (__v4sf)__B, (__D << 2) | __C, (__v4sf)_mm_setzero_ps(), __U,
      0x04);
}
extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_roundscale_ps(__m512 __A, const int __imm) {
  return (__m512)__builtin_ia32_rndscaleps_mask(
      (__v16sf)__A, __imm, (__v16sf)_mm512_undefined_ps(), -1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_roundscale_ps(__m512 __A, __mmask16 __B, __m512 __C,
                              const int __imm) {
  return (__m512)__builtin_ia32_rndscaleps_mask(
      (__v16sf)__C, __imm, (__v16sf)__A, (__mmask16)__B, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_roundscale_ps(__mmask16 __A, __m512 __B, const int __imm) {
  return (__m512)__builtin_ia32_rndscaleps_mask(
      (__v16sf)__B, __imm, (__v16sf)_mm512_setzero_ps(), (__mmask16)__A, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_roundscale_pd(__m512d __A, const int __imm) {
  return (__m512d)__builtin_ia32_rndscalepd_mask(
      (__v8df)__A, __imm, (__v8df)_mm512_undefined_pd(), -1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_roundscale_pd(__m512d __A, __mmask8 __B, __m512d __C,
                              const int __imm) {
  return (__m512d)__builtin_ia32_rndscalepd_mask(
      (__v8df)__C, __imm, (__v8df)__A, (__mmask8)__B, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_roundscale_pd(__mmask8 __A, __m512d __B, const int __imm) {
  return (__m512d)__builtin_ia32_rndscalepd_mask(
      (__v8df)__B, __imm, (__v8df)_mm512_setzero_pd(), (__mmask8)__A, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_roundscale_ss(__m128 __A, __m128 __B, const int __imm) {
  return (__m128)__builtin_ia32_rndscaless_mask_round(
      (__v4sf)__A, (__v4sf)__B, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)-1,
      0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_roundscale_ss(__m128 __A, __mmask8 __B, __m128 __C, __m128 __D,
                           const int __imm) {
  return (__m128)__builtin_ia32_rndscaless_mask_round(
      (__v4sf)__C, (__v4sf)__D, __imm, (__v4sf)__A, (__mmask8)__B, 0x04);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_roundscale_ss(__mmask8 __A, __m128 __B, __m128 __C, const int __imm) {
  return (__m128)__builtin_ia32_rndscaless_mask_round(
      (__v4sf)__B, (__v4sf)__C, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__A,
      0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_roundscale_sd(__m128d __A, __m128d __B, const int __imm) {
  return (__m128d)__builtin_ia32_rndscalesd_mask_round(
      (__v2df)__A, (__v2df)__B, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)-1,
      0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_roundscale_sd(__m128d __A, __mmask8 __B, __m128d __C, __m128d __D,
                           const int __imm) {
  return (__m128d)__builtin_ia32_rndscalesd_mask_round(
      (__v2df)__C, (__v2df)__D, __imm, (__v2df)__A, (__mmask8)__B, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_roundscale_sd(__mmask8 __A, __m128d __B, __m128d __C,
                            const int __imm) {
  return (__m128d)__builtin_ia32_rndscalesd_mask_round(
      (__v2df)__B, (__v2df)__C, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__A,
      0x04);
}
extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_pd_mask(__m512d __X, __m512d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_ps_mask(__m512 __X, __m512 __Y, const int __P) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 __P, (__mmask16)-1, 0x04);
}

extern __inline __mmask16 __attribute__((__gnu_inline__, __always_inline__,
                                         __artificial__))
_mm512_mask_cmp_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y, const int __P) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 __P, (__mmask16)__U, 0x04);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm512_mask_cmp_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, __P,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_sd_mask(__m128d __X, __m128d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P,
                                             (__mmask8)-1, 0x04);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_sd_mask(__mmask8 __M, __m128d __X, __m128d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpsd_mask((__v2df)__X, (__v2df)__Y, __P,
                                             (__mmask8)__M, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_ss_mask(__m128 __X, __m128 __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P,
                                             (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmp_ss_mask(__mmask8 __M, __m128 __X, __m128 __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpss_mask((__v4sf)__X, (__v4sf)__Y, __P,
                                             (__mmask8)__M, 0x04);
}
extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x00,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x00,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x01,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x01,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x02,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x02,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpunord_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x03,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpunord_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x03,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x04,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x04,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnlt_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x05,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnlt_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x05,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnle_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x06,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnle_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x06,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpord_pd_mask(__m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x07,
                                                (__mmask8)-1, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpord_pd_mask(__mmask8 __U, __m512d __X, __m512d __Y) {
  return (__mmask8)__builtin_ia32_cmppd512_mask((__v8df)__X, (__v8df)__Y, 0x07,
                                                (__mmask8)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x00, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x00, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x01, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x01, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x02, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x02, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpunord_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x03, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpunord_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x03, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x04, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x04, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnlt_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x05, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnlt_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x05, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpnle_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x06, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpnle_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x06, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpord_ps_mask(__m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x07, (__mmask16)-1, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpord_ps_mask(__mmask16 __U, __m512 __X, __m512 __Y) {
  return (__mmask16)__builtin_ia32_cmpps512_mask((__v16sf)__X, (__v16sf)__Y,
                                                 0x07, (__mmask16)__U, 0x04);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kmov(__mmask16 __A) {
  return __builtin_ia32_kmovw(__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd_ps(__m512d __A) {
  return (__m512)(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd_si512(__m512d __A) {
  return (__m512i)(__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps_pd(__m512 __A) {
  return (__m512d)(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps_si512(__m512 __A) {
  return (__m512i)(__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_ps(__m512i __A) {
  return (__m512)(__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_pd(__m512i __A) {
  return (__m512d)(__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd512_pd128(__m512d __A) {
  return (__m128d)_mm512_extractf32x4_ps((__m512)__A, 0);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps512_ps128(__m512 __A) {
  return _mm512_extractf32x4_ps(__A, 0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_si128(__m512i __A) {
  return (__m128i)_mm512_extracti32x4_epi32((__m512i)__A, 0);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd512_pd256(__m512d __A) {
  return _mm512_extractf64x4_pd(__A, 0);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps512_ps256(__m512 __A) {
  return (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi512_si256(__m512i __A) {
  return (__m256i)_mm512_extractf64x4_pd((__m512d)__A, 0);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd128_pd512(__m128d __A) {
  return (__m512d)__builtin_ia32_pd512_pd((__m128d)__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps128_ps512(__m128 __A) {
  return (__m512)__builtin_ia32_ps512_ps((__m128)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi128_si512(__m128i __A) {
  return (__m512i)__builtin_ia32_si512_si((__v4si)__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castpd256_pd512(__m256d __A) {
  return __builtin_ia32_pd512_256pd(__A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castps256_ps512(__m256 __A) {
  return __builtin_ia32_ps512_256ps(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_castsi256_si512(__m256i __A) {
  return (__m512i)__builtin_ia32_si512_256si((__v8si)__A);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextpd128_pd512(__m128d __A) {
  return (__m512d)_mm512_insertf32x4(_mm512_setzero_ps(), (__m128)__A, 0);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextps128_ps512(__m128 __A) {
  return _mm512_insertf32x4(_mm512_setzero_ps(), __A, 0);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextsi128_si512(__m128i __A) {
  return _mm512_inserti32x4(_mm512_setzero_si512(), __A, 0);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextpd256_pd512(__m256d __A) {
  return _mm512_insertf64x4(_mm512_setzero_pd(), __A, 0);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextps256_ps512(__m256 __A) {
  return (__m512)_mm512_insertf64x4(_mm512_setzero_pd(), (__m256d)__A, 0);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_zextsi256_si512(__m256i __A) {
  return _mm512_inserti64x4(_mm512_setzero_si512(), __A, 0);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 0,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 0,
                                                 __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu32_mask(__m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 6,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu32_mask(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__mmask16)__builtin_ia32_ucmpd512_mask((__v16si)__A, (__v16si)__B, 6,
                                                 __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu64_mask(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu64_mask(__m512i __A, __m512i __B) {
  return (__mmask8)__builtin_ia32_ucmpq512_mask((__v8di)__A, (__v8di)__B, 6,
                                                (__mmask8)-1);
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 + __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 * __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_and_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 & __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 & __T7;
  return __T8[0] & __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_or_epi32(__m512i __A) {
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 | __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 | __T7;
  return __T8[0] | __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi32(__U, __A);
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 + __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(1), __U, __A);
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 * __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_and_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(~0), __U, __A);
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 & __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 & __T7;
  return __T8[0] & __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_or_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi32(__U, __A);
  __v8si __T1 = (__v8si)_mm512_extracti64x4_epi64(__A, 1);
  __v8si __T2 = (__v8si)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v4si __T4 = (__v4si)_mm256_extracti128_si256(__T3, 1);
  __v4si __T5 = (__v4si)_mm256_extracti128_si256(__T3, 0);
  __v4si __T6 = __T4 | __T5;
  __v4si __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __v4si __T8 = __T6 | __T7;
  return __T8[0] | __T8[1];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epi32(__m512i __A) {
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_min_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_min_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epi32(__m512i __A) {
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_max_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_max_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epu32(__m512i __A) {
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_min_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_min_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epu32(__m512i __A) {
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_max_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_max_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(0x7fffffff), __U, __A);
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_min_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_min_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epi32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(-0x7fffffff - 1), __U, __A);
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_max_epi32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_max_epi32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epi32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epi32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epu32(__mmask16 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi32(_mm512_set1_epi32(~0), __U, __A);
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_min_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_min_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_min_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_min_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epu32(__mmask16 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi32(__U, __A);
  __m256i __T1 = (__m256i)_mm512_extracti64x4_epi64(__A, 1);
  __m256i __T2 = (__m256i)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = _mm256_max_epu32(__T1, __T2);
  __m128i __T4 = (__m128i)_mm256_extracti128_si256(__T3, 1);
  __m128i __T5 = (__m128i)_mm256_extracti128_si256(__T3, 0);
  __m128i __T6 = _mm_max_epu32(__T4, __T5);
  __m128i __T7 = (__m128i)__builtin_shuffle((__v4si)__T6, (__v4si){2, 3, 0, 1});
  __m128i __T8 = _mm_max_epu32(__T6, __T7);
  __m128i __T9 = (__m128i)__builtin_shuffle((__v4si)__T8, (__v4si){1, 0, 1, 0});
  __v4si __T10 = (__v4si)_mm_max_epu32(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_ps(__m512 __A) {
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = __T1 + __T2;
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = __T4 + __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_ps(__m512 __A) {
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = __T1 * __T2;
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = __T4 * __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_maskz_mov_ps(__U, __A);
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = __T1 + __T2;
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = __T4 + __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 + __T7;
  return __T8[0] + __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_mask_mov_ps(_mm512_set1_ps(1.0f), __U, __A);
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = __T1 * __T2;
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = __T4 * __T5;
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = __T6 * __T7;
  return __T8[0] * __T8[1];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_ps(__m512 __A) {
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = _mm256_min_ps(__T1, __T2);
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = _mm_min_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_min_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_min_ps(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_ps(__m512 __A) {
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = _mm256_max_ps(__T1, __T2);
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = _mm_max_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_max_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_max_ps(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_mask_mov_ps(_mm512_set1_ps(__builtin_inff()), __U, __A);
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = _mm256_min_ps(__T1, __T2);
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = _mm_min_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_min_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_min_ps(__T8, __T9);
  return __T10[0];
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_ps(__mmask16 __U, __m512 __A) {
  __A = _mm512_mask_mov_ps(_mm512_set1_ps(-__builtin_inff()), __U, __A);
  __m256 __T1 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 1);
  __m256 __T2 = (__m256)_mm512_extractf64x4_pd((__m512d)__A, 0);
  __m256 __T3 = _mm256_max_ps(__T1, __T2);
  __m128 __T4 = _mm256_extractf128_ps(__T3, 1);
  __m128 __T5 = _mm256_extractf128_ps(__T3, 0);
  __m128 __T6 = _mm_max_ps(__T4, __T5);
  __m128 __T7 = __builtin_shuffle(__T6, (__v4si){2, 3, 0, 1});
  __m128 __T8 = _mm_max_ps(__T6, __T7);
  __m128 __T9 = __builtin_shuffle(__T8, (__v4si){1, 0, 1, 0});
  __m128 __T10 = _mm_max_ps(__T8, __T9);
  return __T10[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_and_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 & __T5;
  return __T6[0] & __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_or_epi64(__m512i __A) {
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 | __T5;
  return __T6[0] | __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi64(__U, __A);
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 + __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(1LL), __U, __A);
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 * __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_and_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(~0LL), __U, __A);
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 & __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 & __T5;
  return __T6[0] & __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_or_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi64(__U, __A);
  __v4di __T1 = (__v4di)_mm512_extracti64x4_epi64(__A, 1);
  __v4di __T2 = (__v4di)_mm512_extracti64x4_epi64(__A, 0);
  __m256i __T3 = (__m256i)(__T1 | __T2);
  __v2di __T4 = (__v2di)_mm256_extracti128_si256(__T3, 1);
  __v2di __T5 = (__v2di)_mm256_extracti128_si256(__T3, 0);
  __v2di __T6 = __T4 | __T5;
  return __T6[0] | __T6[1];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epi64(__m512i __A) {
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_min_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epi64(__m512i __A) {
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_max_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epi64(__mmask8 __U, __m512i __A) {
  __A =
      _mm512_mask_mov_epi64(_mm512_set1_epi64(0x7fffffffffffffffLL), __U, __A);
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_min_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epi64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(-0x7fffffffffffffffLL - 1), __U,
                              __A);
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_max_epi64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epi64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epi64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_epu64(__m512i __A) {
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_min_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_epu64(__m512i __A) {
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_max_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_epu64(__mmask8 __U, __m512i __A) {
  __A = _mm512_mask_mov_epi64(_mm512_set1_epi64(~0LL), __U, __A);
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_min_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_min_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_min_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_epu64(__mmask8 __U, __m512i __A) {
  __A = _mm512_maskz_mov_epi64(__U, __A);
  __m512i __T1 = _mm512_shuffle_i64x2(__A, __A, 0x4e);
  __m512i __T2 = _mm512_max_epu64(__A, __T1);
  __m512i __T3 = (__m512i)__builtin_shuffle((__v8di)__T2,
                                            (__v8di){2, 3, 0, 1, 6, 7, 4, 5});
  __m512i __T4 = _mm512_max_epu64(__T2, __T3);
  __m512i __T5 = (__m512i)__builtin_shuffle((__v8di)__T4,
                                            (__v8di){1, 0, 3, 2, 5, 4, 7, 6});
  __v8di __T6 = (__v8di)_mm512_max_epu64(__T4, __T5);
  return __T6[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_add_pd(__m512d __A) {
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = __T1 + __T2;
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_mul_pd(__m512d __A) {
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = __T1 * __T2;
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_add_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_maskz_mov_pd(__U, __A);
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = __T1 + __T2;
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = __T4 + __T5;
  return __T6[0] + __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_mul_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_mask_mov_pd(_mm512_set1_pd(1.0), __U, __A);
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = __T1 * __T2;
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = __T4 * __T5;
  return __T6[0] * __T6[1];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_min_pd(__m512d __A) {
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = _mm256_min_pd(__T1, __T2);
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = _mm_min_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_min_pd(__T6, __T7);
  return __T8[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_max_pd(__m512d __A) {
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = _mm256_max_pd(__T1, __T2);
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = _mm_max_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_max_pd(__T6, __T7);
  return __T8[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_min_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_mask_mov_pd(_mm512_set1_pd(__builtin_inf()), __U, __A);
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = _mm256_min_pd(__T1, __T2);
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = _mm_min_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_min_pd(__T6, __T7);
  return __T8[0];
}

extern __inline double
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_max_pd(__mmask8 __U, __m512d __A) {
  __A = _mm512_mask_mov_pd(_mm512_set1_pd(-__builtin_inf()), __U, __A);
  __m256d __T1 = (__m256d)_mm512_extractf64x4_pd(__A, 1);
  __m256d __T2 = (__m256d)_mm512_extractf64x4_pd(__A, 0);
  __m256d __T3 = _mm256_max_pd(__T1, __T2);
  __m128d __T4 = _mm256_extractf128_pd(__T3, 1);
  __m128d __T5 = _mm256_extractf128_pd(__T3, 0);
  __m128d __T6 = _mm_max_pd(__T4, __T5);
  __m128d __T7 = (__m128d)__builtin_shuffle(__T6, (__v2di){1, 0});
  __m128d __T8 = _mm_max_pd(__T6, __T7);
  return __T8[0];
}

typedef double __v8df __attribute__((__vector_size__(64)));
typedef float __v16sf __attribute__((__vector_size__(64)));

typedef float __m512 __attribute__((__vector_size__(64), __may_alias__));
typedef double __m512d __attribute__((__vector_size__(64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_exp2a23_round_pd(__m512d __A, int __R) {
  __m512d __W;
  return (__m512d)__builtin_ia32_exp2pd_mask((__v8df)__A, (__v8df)__W,
                                             (__mmask8)-1, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_exp2a23_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __R) {
  return (__m512d)__builtin_ia32_exp2pd_mask((__v8df)__A, (__v8df)__W,
                                             (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_exp2a23_round_pd(__mmask8 __U, __m512d __A, int __R) {
  return (__m512d)__builtin_ia32_exp2pd_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_exp2a23_round_ps(__m512 __A, int __R) {
  __m512 __W;
  return (__m512)__builtin_ia32_exp2ps_mask((__v16sf)__A, (__v16sf)__W,
                                            (__mmask16)-1, __R);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_exp2a23_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __R) {
  return (__m512)__builtin_ia32_exp2ps_mask((__v16sf)__A, (__v16sf)__W,
                                            (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_exp2a23_round_ps(__mmask16 __U, __m512 __A, int __R) {
  return (__m512)__builtin_ia32_exp2ps_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp28_round_pd(__m512d __A, int __R) {
  __m512d __W;
  return (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)__A, (__v8df)__W,
                                              (__mmask8)-1, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rcp28_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __R) {
  return (__m512d)__builtin_ia32_rcp28pd_mask((__v8df)__A, (__v8df)__W,
                                              (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp28_round_pd(__mmask8 __U, __m512d __A, int __R) {
  return (__m512d)__builtin_ia32_rcp28pd_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rcp28_round_ps(__m512 __A, int __R) {
  __m512 __W;
  return (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)__A, (__v16sf)__W,
                                             (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_rcp28_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __R) {
  return (__m512)__builtin_ia32_rcp28ps_mask((__v16sf)__A, (__v16sf)__W,
                                             (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rcp28_round_ps(__mmask16 __U, __m512 __A, int __R) {
  return (__m512)__builtin_ia32_rcp28ps_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp28_round_sd(__m128d __A, __m128d __B, int __R) {
  return (__m128d)__builtin_ia32_rcp28sd_round((__v2df)__B, (__v2df)__A, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp28_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                            int __R) {
  return (__m128d)__builtin_ia32_rcp28sd_mask_round((__v2df)__B, (__v2df)__A,
                                                    (__v2df)__W, __U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp28_round_sd(__mmask8 __U, __m128d __A, __m128d __B, int __R) {
  return (__m128d)__builtin_ia32_rcp28sd_mask_round(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_pd(), __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp28_round_ss(__m128 __A, __m128 __B, int __R) {
  return (__m128)__builtin_ia32_rcp28ss_round((__v4sf)__B, (__v4sf)__A, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp28_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                            int __R) {
  return (__m128)__builtin_ia32_rcp28ss_mask_round((__v4sf)__B, (__v4sf)__A,
                                                   (__v4sf)__W, __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp28_round_ss(__mmask8 __U, __m128 __A, __m128 __B, int __R) {
  return (__m128)__builtin_ia32_rcp28ss_mask_round(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), __U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt28_round_pd(__m512d __A, int __R) {
  __m512d __W;
  return (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)-1, __R);
}

extern __inline __m512d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_rsqrt28_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __R) {
  return (__m512d)__builtin_ia32_rsqrt28pd_mask((__v8df)__A, (__v8df)__W,
                                                (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt28_round_pd(__mmask8 __U, __m512d __A, int __R) {
  return (__m512d)__builtin_ia32_rsqrt28pd_mask(
      (__v8df)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_rsqrt28_round_ps(__m512 __A, int __R) {
  __m512 __W;
  return (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)-1, __R);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_rsqrt28_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __R) {
  return (__m512)__builtin_ia32_rsqrt28ps_mask((__v16sf)__A, (__v16sf)__W,
                                               (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_rsqrt28_round_ps(__mmask16 __U, __m512 __A, int __R) {
  return (__m512)__builtin_ia32_rsqrt28ps_mask(
      (__v16sf)__A, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt28_round_sd(__m128d __A, __m128d __B, int __R) {
  return (__m128d)__builtin_ia32_rsqrt28sd_round((__v2df)__B, (__v2df)__A, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt28_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                              __m128d __B, int __R) {
  return (__m128d)__builtin_ia32_rsqrt28sd_mask_round((__v2df)__B, (__v2df)__A,
                                                      (__v2df)__W, __U, __R);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_rsqrt28_round_sd(__mmask8 __U, __m128d __A, __m128d __B, int __R) {
  return (__m128d)__builtin_ia32_rsqrt28sd_mask_round(
      (__v2df)__B, (__v2df)__A, (__v2df)_mm_setzero_pd(), __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt28_round_ss(__m128 __A, __m128 __B, int __R) {
  return (__m128)__builtin_ia32_rsqrt28ss_round((__v4sf)__B, (__v4sf)__A, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt28_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                              int __R) {
  return (__m128)__builtin_ia32_rsqrt28ss_mask_round((__v4sf)__B, (__v4sf)__A,
                                                     (__v4sf)__W, __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt28_round_ss(__mmask8 __U, __m128 __A, __m128 __B, int __R) {
  return (__m128)__builtin_ia32_rsqrt28ss_mask_round(
      (__v4sf)__B, (__v4sf)__A, (__v4sf)_mm_setzero_ps(), __U, __R);
}

typedef long long __v8di __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));

typedef long long __m512i __attribute__((__vector_size__(64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i32gather_pd(__m256i __index, void const *__addr,
                                 int __scale, int __hint) {
  __builtin_ia32_gatherpfdpd((__mmask8)0xFF, (__v8si)__index, __addr, __scale,
                             __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i32gather_ps(__m512i __index, void const *__addr,
                                 int __scale, int __hint) {
  __builtin_ia32_gatherpfdps((__mmask16)0xFFFF, (__v16si)__index, __addr,
                             __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i32gather_pd(__m256i __index, __mmask8 __mask,
                                      void const *__addr, int __scale,
                                      int __hint) {
  __builtin_ia32_gatherpfdpd(__mask, (__v8si)__index, __addr, __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i32gather_ps(__m512i __index, __mmask16 __mask,
                                      void const *__addr, int __scale,
                                      int __hint) {
  __builtin_ia32_gatherpfdps(__mask, (__v16si)__index, __addr, __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i64gather_pd(__m512i __index, void const *__addr,
                                 int __scale, int __hint) {
  __builtin_ia32_gatherpfqpd((__mmask8)0xFF, (__v8di)__index, __addr, __scale,
                             __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i64gather_ps(__m512i __index, void const *__addr,
                                 int __scale, int __hint) {
  __builtin_ia32_gatherpfqps((__mmask8)0xFF, (__v8di)__index, __addr, __scale,
                             __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i64gather_pd(__m512i __index, __mmask8 __mask,
                                      void const *__addr, int __scale,
                                      int __hint) {
  __builtin_ia32_gatherpfqpd(__mask, (__v8di)__index, __addr, __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i64gather_ps(__m512i __index, __mmask8 __mask,
                                      void const *__addr, int __scale,
                                      int __hint) {
  __builtin_ia32_gatherpfqps(__mask, (__v8di)__index, __addr, __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i32scatter_pd(void *__addr, __m256i __index, int __scale,
                                  int __hint) {
  __builtin_ia32_scatterpfdpd((__mmask8)0xFF, (__v8si)__index, __addr, __scale,
                              __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i32scatter_ps(void *__addr, __m512i __index, int __scale,
                                  int __hint) {
  __builtin_ia32_scatterpfdps((__mmask16)0xFFFF, (__v16si)__index, __addr,
                              __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i32scatter_pd(void *__addr, __mmask8 __mask,
                                       __m256i __index, int __scale,
                                       int __hint) {
  __builtin_ia32_scatterpfdpd(__mask, (__v8si)__index, __addr, __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i32scatter_ps(void *__addr, __mmask16 __mask,
                                       __m512i __index, int __scale,
                                       int __hint) {
  __builtin_ia32_scatterpfdps(__mask, (__v16si)__index, __addr, __scale,
                              __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i64scatter_pd(void *__addr, __m512i __index, int __scale,
                                  int __hint) {
  __builtin_ia32_scatterpfqpd((__mmask8)0xFF, (__v8di)__index, __addr, __scale,
                              __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_prefetch_i64scatter_ps(void *__addr, __m512i __index, int __scale,
                                  int __hint) {
  __builtin_ia32_scatterpfqps((__mmask8)0xFF, (__v8di)__index, __addr, __scale,
                              __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i64scatter_pd(void *__addr, __mmask8 __mask,
                                       __m512i __index, int __scale,
                                       int __hint) {
  __builtin_ia32_scatterpfqpd(__mask, (__v8di)__index, __addr, __scale, __hint);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_prefetch_i64scatter_ps(void *__addr, __mmask8 __mask,
                                       __m512i __index, int __scale,
                                       int __hint) {
  __builtin_ia32_scatterpfqps(__mask, (__v8di)__index, __addr, __scale, __hint);
}

typedef long long __v8di __attribute__((__vector_size__(64)));
typedef int __v16si __attribute__((__vector_size__(64)));

typedef long long __m512i __attribute__((__vector_size__(64), __may_alias__));
typedef double __m512d __attribute__((__vector_size__(64), __may_alias__));

typedef unsigned char __mmask8;
typedef unsigned short __mmask16;

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_conflict_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictsi_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_conflict_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictsi_512_mask(
      (__v16si)__A, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_conflict_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictsi_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_conflict_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictdi_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_conflict_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictdi_512_mask((__v8di)__A, (__v8di)__W,
                                                       (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_conflict_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpconflictdi_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_lzcnt_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntq_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_lzcnt_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntq_512_mask((__v8di)__A, (__v8di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_lzcnt_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntq_512_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_lzcnt_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntd_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_lzcnt_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntd_512_mask((__v16si)__A, (__v16si)__W,
                                                   (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_lzcnt_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vplzcntd_512_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastmb_epi64(__mmask8 __A) {
  return (__m512i)__builtin_ia32_broadcastmb512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastmw_epi32(__mmask16 __A) {
  return (__m512i)__builtin_ia32_broadcastmw512(__A);
}

typedef unsigned int __mmask32;
typedef int __v4si_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef int __v8si_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef long long __v2di_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef long long __v4di_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movapd256_mask((__v4df)__A, (__v4df)__W,
                                                (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movapd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movapd128_mask((__v2df)__A, (__v2df)__W,
                                                (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movapd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_pd(__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadapd256_mask((__v4df *)__P, (__v4df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_pd(__mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadapd256_mask(
      (__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_pd(__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadapd128_mask((__v2df *)__P, (__v2df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_pd(__mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadapd128_mask(
      (__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_pd(void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_storeapd256_mask((__v4df *)__P, (__v4df)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_pd(void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_storeapd128_mask((__v2df *)__P, (__v2df)__A, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movaps256_mask((__v8sf)__A, (__v8sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movaps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movaps128_mask((__v4sf)__A, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movaps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_ps(__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadaps256_mask((__v8sf *)__P, (__v8sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_ps(__mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadaps256_mask(
      (__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_ps(__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadaps128_mask((__v4sf *)__P, (__v4sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_ps(__mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadaps128_mask(
      (__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_ps(void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_storeaps256_mask((__v8sf *)__P, (__v8sf)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_ps(void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_storeaps128_mask((__v4sf *)__P, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa64_256_mask((__v4di)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa64_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa64_128_mask((__v2di)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa64_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_epi64(void const *__P) {
  return (__m256i)(*(__v4di *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_epi64(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa64load256_mask(
      (__v4di *)__P, (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_epi64(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa64load256_mask(
      (__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_epi64(void const *__P) {
  return (__m128i)(*(__v2di *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_epi64(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa64load128_mask(
      (__v2di *)__P, (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_epi64(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa64load128_mask(
      (__v2di *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_epi64(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_movdqa64store256_mask((__v4di *)__P, (__v4di)__A,
                                       (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_epi64(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_movdqa64store128_mask((__v2di *)__P, (__v2di)__A,
                                       (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa32_256_mask((__v8si)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdqa32_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa32_128_mask((__v4si)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdqa32_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_load_epi32(void const *__P) {
  return (__m256i)(*(__v8si *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_load_epi32(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa32load256_mask(
      (__v8si *)__P, (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_load_epi32(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_movdqa32load256_mask(
      (__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_load_epi32(void const *__P) {
  return (__m128i)(*(__v4si *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_load_epi32(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa32load128_mask(
      (__v4si *)__P, (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_load_epi32(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_movdqa32load128_mask(
      (__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_epi32(void *__P, __m256i __A) {
  *(__v8si *)__P = (__v8si)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_store_epi32(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_movdqa32store256_mask((__v8si *)__P, (__v8si)__A,
                                       (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_epi32(void *__P, __m128i __A) {
  *(__v4si *)__P = (__v4si)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_store_epi32(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_movdqa32store128_mask((__v4si *)__P, (__v4si)__A,
                                       (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_addpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_addpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_addpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_addps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_addps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_addps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_subpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_subpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_subpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_subps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_subps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_subps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_store_epi64(void *__P, __m256i __A) {
  *(__m256i *)__P = __A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_store_epi64(void *__P, __m128i __A) {
  *(__m128i *)__P = __A;
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_pd(__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadupd256_mask((const double *)__P,
                                                 (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_pd(__mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_loadupd256_mask(
      (const double *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_pd(__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadupd128_mask((const double *)__P,
                                                 (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_pd(__mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_loadupd128_mask(
      (const double *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_pd(void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_storeupd256_mask((double *)__P, (__v4df)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_pd(void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_storeupd128_mask((double *)__P, (__v2df)__A, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_ps(__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadups256_mask((const float *)__P, (__v8sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_ps(__mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_loadups256_mask(
      (const float *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_ps(__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadups128_mask((const float *)__P, (__v4sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_ps(__mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_loadups128_mask(
      (const float *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_ps(void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_storeups256_mask((float *)__P, (__v8sf)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_ps(void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_storeups128_mask((float *)__P, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi64(void const *__P) {
  return (__m256i)(*(__v4di_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi64(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqudi256_mask((const long long *)__P,
                                                   (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi64(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqudi256_mask(
      (const long long *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi64(void const *__P) {
  return (__m128i)(*(__v2di_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi64(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqudi128_mask((const long long *)__P,
                                                   (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi64(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqudi128_mask(
      (const long long *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi64(void *__P, __m256i __A) {
  *(__m256i_u *)__P = (__m256i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi64(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_storedqudi256_mask((long long *)__P, (__v4di)__A,
                                    (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi64(void *__P, __m128i __A) {
  *(__m128i_u *)__P = (__m128i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi64(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_storedqudi128_mask((long long *)__P, (__v2di)__A,
                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi32(void const *__P) {
  return (__m256i)(*(__v8si_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi32(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqusi256_mask((const int *)__P,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi32(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddqusi256_mask(
      (const int *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi32(void const *__P) {
  return (__m128i)(*(__v4si_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi32(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqusi128_mask((const int *)__P,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi32(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddqusi128_mask(
      (const int *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi32(void *__P, __m256i __A) {
  *(__m256i_u *)__P = (__m256i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi32(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_storedqusi256_mask((int *)__P, (__v8si)__A, (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi32(void *__P, __m128i __A) {
  *(__m128i_u *)__P = (__m128i_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi32(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_storedqusi128_mask((int *)__P, (__v4si)__A, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsd256_mask((__v8si)__A, (__v8si)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsd256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsd128_mask((__v4si)__A, (__v4si)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsd128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_abs_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_pabsq256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsq256_mask((__v4di)__A, (__v4di)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsq256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_abs_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_pabsq128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsq128_mask((__v2di)__A, (__v2di)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsq128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epu32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epu32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq256_mask((__v4df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epu32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epu32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epu32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq128_mask((__v2df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epu32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epi32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2dq256_mask((__v8sf)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epi32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2dq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epi32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2dq128_mask((__v4sf)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epi32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2dq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epu32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epu32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2udq256_mask((__v8sf)__A, (__v8si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epu32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvttps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epu32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epu32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2udq128_mask((__v4sf)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epu32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epi32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq256_mask((__v4df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epi32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epi32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq128_mask((__v2df)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epi32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2dq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epu32(__m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epu32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq256_mask((__v4df)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epu32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epu32(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epu32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq128_mask((__v2df)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epu32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2udq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epi32(__m128i __W, __mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq256_mask((__v4df)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epi32(__mmask8 __U, __m256d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq256_mask(
      (__v4df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epi32(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq128_mask((__v2df)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epi32(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2dq128_mask(
      (__v2df)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_pd(__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtdq2pd256_mask((__v4si)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_pd(__mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtdq2pd256_mask(
      (__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtdq2pd128_mask((__v4si)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtdq2pd128_mask(
      (__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_pd(__m128i __A) {
  return (__m256d)__builtin_ia32_cvtudq2pd256_mask(
      (__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_pd(__m256d __W, __mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtudq2pd256_mask((__v4si)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_pd(__mmask8 __U, __m128i __A) {
  return (__m256d)__builtin_ia32_cvtudq2pd256_mask(
      (__v4si)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtudq2pd128_mask(
      (__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtudq2pd128_mask((__v4si)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtudq2pd128_mask(
      (__v4si)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_ps(__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtdq2ps256_mask((__v8si)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_ps(__mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtdq2ps256_mask(
      (__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtdq2ps128_mask((__v4si)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtdq2ps128_mask(
      (__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu32_ps(__m256i __A) {
  return (__m256)__builtin_ia32_cvtudq2ps256_mask(
      (__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_ps(__m256 __W, __mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtudq2ps256_mask((__v8si)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_ps(__mmask8 __U, __m256i __A) {
  return (__m256)__builtin_ia32_cvtudq2ps256_mask(
      (__v8si)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu32_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtudq2ps128_mask(
      (__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtudq2ps128_mask((__v4si)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtudq2ps128_mask(
      (__v4si)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_pd(__m256d __W, __mmask8 __U, __m128 __A) {
  return (__m256d)__builtin_ia32_cvtps2pd256_mask((__v4sf)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_pd(__mmask8 __U, __m128 __A) {
  return (__m256d)__builtin_ia32_cvtps2pd256_mask(
      (__v4sf)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_pd(__m128d __W, __mmask8 __U, __m128 __A) {
  return (__m128d)__builtin_ia32_cvtps2pd128_mask((__v4sf)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_pd(__mmask8 __U, __m128 __A) {
  return (__m128d)__builtin_ia32_cvtps2pd128_mask(
      (__v4sf)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovdb128_mask(
      (__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovdb128mem_mask((unsigned int *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdb128_mask((__v4si)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdb128_mask(
      (__v4si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovdb256_mask(
      (__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdb256_mask((__v8si)__A, (__v16qi)__O, __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovdb256mem_mask((unsigned long long *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdb256_mask(
      (__v8si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi32_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdb128_mask(
      (__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsdb128mem_mask((unsigned int *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdb128_mask((__v4si)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi32_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdb128_mask(
      (__v4si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi32_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdb256_mask(
      (__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsdb256mem_mask((unsigned long long *)__P, (__v8si)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdb256_mask((__v8si)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi32_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdb256_mask(
      (__v8si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi32_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdb128_mask(
      (__v4si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusdb128mem_mask((unsigned int *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdb128_mask((__v4si)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi32_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdb128_mask(
      (__v4si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi32_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdb256_mask(
      (__v8si)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusdb256mem_mask((unsigned long long *)__P, (__v8si)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdb256_mask((__v8si)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi32_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdb256_mask(
      (__v8si)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi32_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovdw128mem_mask((unsigned long long *)__P, (__v4si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdw128_mask((__v4si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi32_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdw256_mask((__v8si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi32_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsdw128mem_mask((unsigned long long *)__P, (__v4si)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdw128_mask((__v4si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi32_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi32_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdw256_mask(
      (__v8si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdw256_mask((__v8si)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi32_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi32_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdw128_mask(
      (__v4si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusdw128mem_mask((unsigned long long *)__P, (__v4si)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi32_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdw128_mask((__v4si)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi32_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusdw128_mask(
      (__v4si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi32_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdw256_mask(
      (__v8si)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusdw256mem_mask((__v8hi *)__P, (__v8si)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi32_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdw256_mask((__v8si)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi32_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusdw256_mask(
      (__v8si)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovqb128_mask(
      (__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovqb128mem_mask((unsigned short *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqb128_mask((__v2di)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqb128_mask(
      (__v2di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovqb256_mask(
      (__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovqb256mem_mask((unsigned int *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqb256_mask((__v4di)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqb256_mask(
      (__v4di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi64_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqb128_mask(
      (__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsqb128mem_mask((unsigned short *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqb128_mask((__v2di)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi64_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqb128_mask(
      (__v2di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi64_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqb256_mask(
      (__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsqb256mem_mask((unsigned int *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqb256_mask((__v4di)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi64_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqb256_mask(
      (__v4di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi64_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqb128_mask(
      (__v2di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusqb128mem_mask((unsigned short *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqb128_mask((__v2di)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi64_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqb128_mask(
      (__v2di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi64_epi8(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqb256_mask(
      (__v4di)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_storeu_epi8(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusqb256mem_mask((unsigned int *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_epi8(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqb256_mask((__v4di)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi64_epi8(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqb256_mask(
      (__v4di)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovqw128_mask(
      (__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovqw128mem_mask((unsigned int *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqw128_mask((__v2di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqw128_mask(
      (__v2di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovqw256_mask(
      (__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovqw256mem_mask((unsigned long long *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqw256_mask((__v4di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqw256_mask(
      (__v4di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi64_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqw128_mask(
      (__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsqw128mem_mask((unsigned int *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqw128_mask((__v2di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi64_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqw128_mask(
      (__v2di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi64_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqw256_mask(
      (__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsqw256mem_mask((unsigned long long *)__P, (__v4di)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqw256_mask((__v4di)__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi64_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqw256_mask(
      (__v4di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi64_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqw128_mask(
      (__v2di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusqw128mem_mask((unsigned int *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqw128_mask((__v2di)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi64_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqw128_mask(
      (__v2di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi64_epi16(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqw256_mask(
      (__v4di)__A, (__v8hi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_storeu_epi16(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusqw256mem_mask((unsigned long long *)__P, (__v4di)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_epi16(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqw256_mask((__v4di)__A, (__v8hi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi64_epi16(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqw256_mask(
      (__v4di)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovqd128_mask(
      (__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovqd128mem_mask((unsigned long long *)__P, (__v2di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqd128_mask((__v2di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovqd128_mask(
      (__v2di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_epi32(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovqd256_mask(
      (__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovqd256mem_mask((__v4si *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqd256_mask((__v4di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_epi32(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovqd256_mask(
      (__v4di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi64_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqd128_mask(
      (__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovsqd128mem_mask((unsigned long long *)__P, (__v2di)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqd128_mask((__v2di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi64_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsqd128_mask(
      (__v2di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi64_epi32(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqd256_mask(
      (__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovsqd256mem_mask((__v4si *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqd256_mask((__v4di)__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi64_epi32(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovsqd256_mask(
      (__v4di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi64_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqd128_mask(
      (__v2di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovusqd128mem_mask((unsigned long long *)__P, (__v2di)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi64_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqd128_mask((__v2di)__A, (__v4si)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi64_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovusqd128_mask(
      (__v2di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi64_epi32(__m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqd256_mask(
      (__v4di)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_storeu_epi32(void *__P, __mmask8 __M, __m256i __A) {
  __builtin_ia32_pmovusqd256mem_mask((__v4si *)__P, (__v4di)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi64_epi32(__m128i __O, __mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqd256_mask((__v4di)__A, (__v4si)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi64_epi32(__mmask8 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovusqd256_mask(
      (__v4di)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastss_ps(__m256 __O, __mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastss256_mask((__v4sf)__A, (__v8sf)__O,
                                                    __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastss_ps(__mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastss256_mask(
      (__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastss_ps(__m128 __O, __mmask8 __M, __m128 __A) {
  return (__m128)__builtin_ia32_broadcastss128_mask((__v4sf)__A, (__v4sf)__O,
                                                    __M);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastss_ps(__mmask8 __M, __m128 __A) {
  return (__m128)__builtin_ia32_broadcastss128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastsd_pd(__m256d __O, __mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastsd256_mask((__v2df)__A, (__v4df)__O,
                                                     __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastsd_pd(__mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastsd256_mask(
      (__v2df)__A, (__v4df)_mm256_setzero_pd(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastd_epi32(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_mask((__v4si)__A, (__v8si)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastd_epi32(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_mask(
      (__v4si)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi32(__m256i __O, __mmask8 __M, int __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_gpr_mask(__A, (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi32(__mmask8 __M, int __A) {
  return (__m256i)__builtin_ia32_pbroadcastd256_gpr_mask(
      __A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastd_epi32(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_mask((__v4si)__A, (__v4si)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastd_epi32(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi32(__m128i __O, __mmask8 __M, int __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_gpr_mask(__A, (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi32(__mmask8 __M, int __A) {
  return (__m128i)__builtin_ia32_pbroadcastd128_gpr_mask(
      __A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastq_epi64(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_mask((__v2di)__A, (__v4di)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_mask(
      (__v2di)__A, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi64(__m256i __O, __mmask8 __M, long long __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_gpr_mask(__A, (__v4di)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi64(__mmask8 __M, long long __A) {
  return (__m256i)__builtin_ia32_pbroadcastq256_gpr_mask(
      __A, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastq_epi64(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_mask((__v2di)__A, (__v2di)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastq_epi64(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi64(__m128i __O, __mmask8 __M, long long __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_gpr_mask(__A, (__v2di)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi64(__mmask8 __M, long long __A) {
  return (__m128i)__builtin_ia32_pbroadcastq128_gpr_mask(
      __A, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_f32x4(__m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x4_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_undefined_pd(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_f32x4(__m256 __O, __mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x4_256_mask((__v4sf)__A,
                                                        (__v8sf)__O, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_f32x4(__mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x4_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_i32x4(__m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x4_256_mask(
      (__v4si)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_i32x4(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x4_256_mask((__v4si)__A,
                                                         (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_i32x4(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x4_256_mask(
      (__v4si)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi8_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbd256_mask((__v16qi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbd256_mask(
      (__v16qi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi8_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbd128_mask((__v16qi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi8_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbd128_mask(
      (__v16qi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi8_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbq256_mask((__v16qi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbq256_mask(
      (__v16qi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi8_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbq128_mask((__v16qi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi8_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbq128_mask(
      (__v16qi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwd256_mask((__v8hi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwd256_mask(
      (__v8hi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwd128_mask((__v8hi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwd128_mask(
      (__v8hi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwq256_mask((__v8hi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxwq256_mask(
      (__v8hi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwq128_mask((__v8hi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxwq128_mask(
      (__v8hi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi32_epi64(__m256i __W, __mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxdq256_mask((__v4si)__X, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovsxdq256_mask(
      (__v4si)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi32_epi64(__m128i __W, __mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxdq128_mask((__v4si)__X, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi32_epi64(__mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovsxdq128_mask(
      (__v4si)__X, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu8_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbd256_mask((__v16qi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbd256_mask(
      (__v16qi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu8_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbd128_mask((__v16qi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu8_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbd128_mask(
      (__v16qi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu8_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbq256_mask((__v16qi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbq256_mask(
      (__v16qi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu8_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbq128_mask((__v16qi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu8_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbq128_mask(
      (__v16qi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu16_epi32(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwd256_mask((__v8hi)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwd256_mask(
      (__v8hi)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu16_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwd128_mask((__v8hi)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu16_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwd128_mask(
      (__v8hi)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu16_epi64(__m256i __W, __mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwq256_mask((__v8hi)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxwq256_mask(
      (__v8hi)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu16_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwq128_mask((__v8hi)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu16_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxwq128_mask(
      (__v8hi)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu32_epi64(__m256i __W, __mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxdq256_mask((__v4si)__X, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X) {
  return (__m256i)__builtin_ia32_pmovzxdq256_mask(
      (__v4si)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu32_epi64(__m128i __W, __mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxdq128_mask((__v4si)__X, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu32_epi64(__mmask8 __U, __m128i __X) {
  return (__m128i)__builtin_ia32_pmovzxdq128_mask(
      (__v4si)__X, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp14_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_rcp14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rcp14_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rcp14pd256_mask((__v4df)__A, (__v4df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rcp14_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rcp14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_rcp14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rcp14pd128_mask((__v2df)__A, (__v2df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rcp14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rcp14_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rcp14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rcp14_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rcp14ps256_mask((__v8sf)__A, (__v8sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rcp14_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rcp14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rcp14_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rcp14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rcp14_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rcp14ps128_mask((__v4sf)__A, (__v4sf)__W,
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rcp14_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rcp14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt14_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_rsqrt14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rsqrt14_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rsqrt14pd256_mask((__v4df)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rsqrt14_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_rsqrt14pd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_rsqrt14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rsqrt14pd128_mask((__v2df)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_rsqrt14pd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rsqrt14_ps(__m256 __A) {
  return (__m256)__builtin_ia32_rsqrt14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_rsqrt14_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rsqrt14ps256_mask((__v8sf)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rsqrt14_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_rsqrt14ps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rsqrt14_ps(__m128 __A) {
  return (__m128)__builtin_ia32_rsqrt14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rsqrt14_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rsqrt14ps128_mask((__v4sf)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rsqrt14_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_rsqrt14ps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sqrt_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_sqrtpd256_mask((__v4df)__A, (__v4df)__W,
                                                (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sqrt_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_sqrtpd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_sqrtpd128_mask((__v2df)__A, (__v2df)__W,
                                                (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sqrt_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_sqrtpd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sqrt_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_sqrtps256_mask((__v8sf)__A, (__v8sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sqrt_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_sqrtps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sqrt_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_sqrtps128_mask((__v4sf)__A, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sqrt_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_sqrtps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddd256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubd256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddd128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubd128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getexp_ps(__m256 __A) {
  return (__m256)__builtin_ia32_getexpps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getexp_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_getexpps256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getexp_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_getexpps256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getexp_pd(__m256d __A) {
  return (__m256d)__builtin_ia32_getexppd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getexp_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_getexppd256_mask((__v4df)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getexp_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_getexppd256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_ps(__m128 __A) {
  return (__m128)__builtin_ia32_getexpps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_getexpps128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_getexpps128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getexp_pd(__m128d __A) {
  return (__m128d)__builtin_ia32_getexppd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getexp_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_getexppd128_mask((__v2df)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getexp_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_getexppd128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srl_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrld256_mask((__v8si)__A, (__v4si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srl_epi32(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrld256_mask(
      (__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srl_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrld128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srl_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrld128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srl_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlq256_mask((__v4di)__A, (__v2di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srl_epi64(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srl_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srl_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandd256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_scalef_pd(__m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_scalefpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_scalef_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_scalefpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_scalef_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_scalefpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_scalef_ps(__m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_scalefps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_scalef_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_scalefps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_scalef_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_scalefps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_pd(__m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_scalefpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_scalef_ps(__m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_scalef_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_scalef_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_scalefps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmaddpd256_mask3((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddpd256_maskz((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddpd128_mask3((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddpd128_maskz((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmaddps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmsubpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmsubpd256_mask3((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmsubpd256_maskz((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubpd128_mask3((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubpd128_maskz((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmsubps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmsubps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmsubps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fmaddsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_mask3(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmaddsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_maskz(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmaddsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_mask3(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmaddsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_maskz(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmaddsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_mask((__v8sf)__A, (__v8sf)__B,
                                                    (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmaddsubps256_mask3(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmaddsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_maskz(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmaddsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_mask((__v4sf)__A, (__v4sf)__B,
                                                    (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmaddsubps128_mask3(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmaddsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_maskz(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_fmsubadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_mask(
      (__v4df)__A, (__v4df)__B, -(__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfmsubaddpd256_mask3(
      (__v4df)__A, (__v4df)__B, (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fmsubadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256_maskz(
      (__v4df)__A, (__v4df)__B, -(__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsubadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_mask(
      (__v2df)__A, (__v2df)__B, -(__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfmsubaddpd128_mask3(
      (__v2df)__A, (__v2df)__B, (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsubadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd128_maskz(
      (__v2df)__A, (__v2df)__B, -(__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fmsubadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_mask(
      (__v8sf)__A, (__v8sf)__B, -(__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfmsubaddps256_mask3(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fmsubadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256_maskz(
      (__v8sf)__A, (__v8sf)__B, -(__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fmsubadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_mask(
      (__v4sf)__A, (__v4sf)__B, -(__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfmsubaddps128_mask3(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fmsubadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps128_maskz(
      (__v4sf)__A, (__v4sf)__B, -(__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmadd_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmaddpd256_mask((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfnmaddpd256_mask3((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fnmadd_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmaddpd256_maskz((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddpd128_mask((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfnmaddpd128_mask3((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddpd128_maskz((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmadd_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmaddps256_mask((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfnmaddps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fnmadd_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmaddps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmadd_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddps128_mask((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfnmaddps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmadd_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmsub_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmsubpd256_mask((__v4df)__A, (__v4df)__B,
                                                   (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask3_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C, __mmask8 __U) {
  return (__m256d)__builtin_ia32_vfnmsubpd256_mask3((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_fnmsub_pd(__mmask8 __U, __m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmsubpd256_maskz((__v4df)__A, (__v4df)__B,
                                                    (__v4df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubpd128_mask((__v2df)__A, (__v2df)__B,
                                                   (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C, __mmask8 __U) {
  return (__m128d)__builtin_ia32_vfnmsubpd128_mask3((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubpd128_maskz((__v2df)__A, (__v2df)__B,
                                                    (__v2df)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fnmsub_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmsubps256_mask((__v8sf)__A, (__v8sf)__B,
                                                  (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask3_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C, __mmask8 __U) {
  return (__m256)__builtin_ia32_vfnmsubps256_mask3((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fnmsub_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmsubps256_maskz((__v8sf)__A, (__v8sf)__B,
                                                   (__v8sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fnmsub_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubps128_mask((__v4sf)__A, (__v4sf)__B,
                                                  (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask3_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C, __mmask8 __U) {
  return (__m128)__builtin_ia32_vfnmsubps128_mask3((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fnmsub_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubps128_maskz((__v4sf)__A, (__v4sf)__B,
                                                   (__v4sf)__C, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandd128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_andnot_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pord256_mask((__v8si)__A, (__v8si)__B,
                                              (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pord256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A | (__v8su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pord128_mask((__v4si)__A, (__v4si)__B,
                                              (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pord128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A | (__v4su)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxord256_mask((__v8si)__A, (__v8si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxord256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_epi32(__m256i __A, __m256i __B) {
  return (__m256i)((__v8su)__A ^ (__v8su)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxord128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxord128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_epi32(__m128i __A, __m128i __B) {
  return (__m128i)((__v4su)__A ^ (__v4su)__B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_ps(__m128 __W, __mmask8 __U, __m128d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps_mask((__v2df)__A, (__v4sf)__W,
                                              (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_ps(__mmask8 __U, __m128d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps_mask(
      (__v2df)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_ps(__m128 __W, __mmask8 __U, __m256d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps256_mask((__v4df)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_ps(__mmask8 __U, __m256d __A) {
  return (__m128)__builtin_ia32_cvtpd2ps256_mask(
      (__v4df)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epi32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2dq256_mask((__v8sf)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epi32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2dq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epi32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2dq128_mask((__v4sf)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epi32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2dq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epu32(__m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epu32(__m256i __W, __mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2udq256_mask((__v8sf)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epu32(__mmask8 __U, __m256 __A) {
  return (__m256i)__builtin_ia32_cvtps2udq256_mask(
      (__v8sf)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epu32(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epu32(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2udq128_mask((__v4sf)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epu32(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2udq128_mask(
      (__v4sf)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_movedup_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movddup256_mask((__v4df)__A, (__v4df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_movedup_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_movddup256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_movedup_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movddup128_mask((__v2df)__A, (__v2df)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_movedup_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_movddup128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_movehdup_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movshdup256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_movehdup_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movshdup256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_movehdup_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movshdup128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_movehdup_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movshdup128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_moveldup_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movsldup256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_moveldup_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_movsldup256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_moveldup_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movsldup128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_moveldup_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_movsldup128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhdq128_mask((__v4si)__A, (__v4si)__B,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhdq128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhdq256_mask((__v8si)__A, (__v8si)__B,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhdq256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhqdq128_mask((__v2di)__A, (__v2di)__B,
                                                    (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhqdq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhqdq256_mask((__v4di)__A, (__v4di)__B,
                                                    (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhqdq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckldq128_mask((__v4si)__A, (__v4si)__B,
                                                   (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckldq128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckldq256_mask((__v8si)__A, (__v8si)__B,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckldq256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklqdq128_mask((__v2di)__A, (__v2di)__B,
                                                    (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklqdq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklqdq256_mask((__v4di)__A, (__v4di)__B,
                                                    (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklqdq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__A, (__v4si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd128_mask((__v4si)__A, (__v4si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__A, (__v8si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqd256_mask((__v8si)__A, (__v8si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__A, (__v2di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq128_mask((__v2di)__A, (__v2di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__A, (__v4di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqq256_mask((__v4di)__A, (__v4di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__A, (__v4si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__A, (__v4si)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd128_mask((__v4si)__A, (__v4si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__A, (__v8si)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__A, (__v8si)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtd256_mask((__v8si)__A, (__v8si)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__A, (__v2di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__A, (__v2di)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq128_mask((__v2di)__A, (__v2di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__A, (__v4di)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__A, (__v4di)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtq256_mask((__v4di)__A, (__v4di)__B,
                                                  __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmd128((__v4si)__A, (__v4si)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmd128((__v4si)__A, (__v4si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmd256((__v8si)__A, (__v8si)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmd256((__v8si)__A, (__v8si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmq128((__v2di)__A, (__v2di)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmq128((__v2di)__A, (__v2di)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmq256((__v4di)__A, (__v4di)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestmq256((__v4di)__A, (__v4di)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi32_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd128((__v4si)__A, (__v4si)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi32_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd128((__v4si)__A, (__v4si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi32_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd256((__v8si)__A, (__v8si)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi32_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmd256((__v8si)__A, (__v8si)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq128((__v2di)__A, (__v2di)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi64_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq128((__v2di)__A, (__v2di)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq256((__v4di)__A, (__v4di)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi64_mask(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__mmask8)__builtin_ia32_ptestnmq256((__v4di)__A, (__v4di)__B, __U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_compressdf256_mask((__v4df)__A, (__v4df)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_compressdf256_mask(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m256d __A) {
  __builtin_ia32_compressstoredf256_mask((__v4df *)__P, (__v4df)__A,
                                         (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_compressdf128_mask((__v2df)__A, (__v2df)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_compressdf128_mask(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_pd(void *__P, __mmask8 __U, __m128d __A) {
  __builtin_ia32_compressstoredf128_mask((__v2df *)__P, (__v2df)__A,
                                         (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_compresssf256_mask((__v8sf)__A, (__v8sf)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_compresssf256_mask(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_ps(void *__P, __mmask8 __U, __m256 __A) {
  __builtin_ia32_compressstoresf256_mask((__v8sf *)__P, (__v8sf)__A,
                                         (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_compresssf128_mask((__v4sf)__A, (__v4sf)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_compresssf128_mask(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_ps(void *__P, __mmask8 __U, __m128 __A) {
  __builtin_ia32_compressstoresf128_mask((__v4sf *)__P, (__v4sf)__A,
                                         (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compressdi256_mask((__v4di)__A, (__v4di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compressdi256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoredi256_mask((__v4di *)__P, (__v4di)__A,
                                         (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compressdi128_mask((__v2di)__A, (__v2di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compressdi128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi64(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoredi128_mask((__v2di *)__P, (__v2di)__A,
                                         (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compresssi256_mask((__v8si)__A, (__v8si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_compresssi256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi32(void *__P, __mmask8 __U, __m256i __A) {
  __builtin_ia32_compressstoresi256_mask((__v8si *)__P, (__v8si)__A,
                                         (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compresssi128_mask((__v4si)__A, (__v4si)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_compresssi128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi32(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_compressstoresi128_mask((__v4si *)__P, (__v4si)__A,
                                         (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_pd(__m256d __W, __mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_expanddf256_mask((__v4df)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_pd(__mmask8 __U, __m256d __A) {
  return (__m256d)__builtin_ia32_expanddf256_maskz(
      (__v4df)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_pd(__m256d __W, __mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_expandloaddf256_mask(
      (__v4df *)__P, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_pd(__mmask8 __U, void const *__P) {
  return (__m256d)__builtin_ia32_expandloaddf256_maskz(
      (__v4df *)__P, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_pd(__m128d __W, __mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_expanddf128_mask((__v2df)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_pd(__mmask8 __U, __m128d __A) {
  return (__m128d)__builtin_ia32_expanddf128_maskz(
      (__v2df)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_pd(__m128d __W, __mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_expandloaddf128_mask(
      (__v2df *)__P, (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_pd(__mmask8 __U, void const *__P) {
  return (__m128d)__builtin_ia32_expandloaddf128_maskz(
      (__v2df *)__P, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_ps(__m256 __W, __mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_expandsf256_mask((__v8sf)__A, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_ps(__mmask8 __U, __m256 __A) {
  return (__m256)__builtin_ia32_expandsf256_maskz(
      (__v8sf)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_ps(__m256 __W, __mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_expandloadsf256_mask((__v8sf *)__P, (__v8sf)__W,
                                                     (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_ps(__mmask8 __U, void const *__P) {
  return (__m256)__builtin_ia32_expandloadsf256_maskz(
      (__v8sf *)__P, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_ps(__m128 __W, __mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_expandsf128_mask((__v4sf)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_ps(__mmask8 __U, __m128 __A) {
  return (__m128)__builtin_ia32_expandsf128_maskz(
      (__v4sf)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_ps(__m128 __W, __mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_expandloadsf128_mask((__v4sf *)__P, (__v4sf)__W,
                                                     (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_ps(__mmask8 __U, void const *__P) {
  return (__m128)__builtin_ia32_expandloadsf128_maskz(
      (__v4sf *)__P, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expanddi256_mask((__v4di)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expanddi256_maskz(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi64(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloaddi256_mask(
      (__v4di *)__P, (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi64(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloaddi256_maskz(
      (__v4di *)__P, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expanddi128_mask((__v2di)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expanddi128_maskz(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi64(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloaddi128_mask(
      (__v2di *)__P, (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi64(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloaddi128_maskz(
      (__v2di *)__P, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expandsi256_mask((__v8si)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_expandsi256_maskz(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi32(__m256i __W, __mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloadsi256_mask(
      (__v8si *)__P, (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi32(__mmask8 __U, void const *__P) {
  return (__m256i)__builtin_ia32_expandloadsi256_maskz(
      (__v8si *)__P, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expandsi128_mask((__v4si)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_expandsi128_maskz(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi32(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloadsi128_mask(
      (__v4si *)__P, (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi32(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_expandloadsi128_maskz(
      (__v4si *)__P, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_pd(__m256d __A, __m256i __I, __m256d __B) {
  return (__m256d)__builtin_ia32_vpermt2varpd256_mask(
      (__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_pd(__m256d __A, __mmask8 __U, __m256i __I,
                                __m256d __B) {
  return (__m256d)__builtin_ia32_vpermt2varpd256_mask(
      (__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_pd(__m256d __A, __m256i __I, __mmask8 __U,
                                 __m256d __B) {
  return (__m256d)__builtin_ia32_vpermi2varpd256_mask(
      (__v4df)__A, (__v4di)__I, (__v4df)__B, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_pd(__mmask8 __U, __m256d __A, __m256i __I,
                                 __m256d __B) {
  return (__m256d)__builtin_ia32_vpermt2varpd256_maskz(
      (__v4di)__I, (__v4df)__A, (__v4df)__B, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_ps(__m256 __A, __m256i __I, __m256 __B) {
  return (__m256)__builtin_ia32_vpermt2varps256_mask((__v8si)__I, (__v8sf)__A,
                                                     (__v8sf)__B, (__mmask8)-1);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permutex2var_ps(__m256 __A, __mmask8 __U, __m256i __I, __m256 __B) {
  return (__m256)__builtin_ia32_vpermt2varps256_mask(
      (__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_ps(__m256 __A, __m256i __I, __mmask8 __U,
                                 __m256 __B) {
  return (__m256)__builtin_ia32_vpermi2varps256_mask(
      (__v8sf)__A, (__v8si)__I, (__v8sf)__B, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_ps(__mmask8 __U, __m256 __A, __m256i __I,
                                 __m256 __B) {
  return (__m256)__builtin_ia32_vpermt2varps256_maskz(
      (__v8si)__I, (__v8sf)__A, (__v8sf)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi64(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varq128_mask((__v2di)__I, (__v2di)__A,
                                                     (__v2di)__B, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi64(__m128i __A, __mmask8 __U, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varq128_mask(
      (__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi64(__m128i __A, __m128i __I, __mmask8 __U,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2varq128_mask(
      (__v2di)__A, (__v2di)__I, (__v2di)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi64(__mmask8 __U, __m128i __A, __m128i __I,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varq128_maskz(
      (__v2di)__I, (__v2di)__A, (__v2di)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi32(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2vard128_mask((__v4si)__I, (__v4si)__A,
                                                     (__v4si)__B, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi32(__m128i __A, __mmask8 __U, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2vard128_mask(
      (__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi32(__m128i __A, __m128i __I, __mmask8 __U,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2vard128_mask(
      (__v4si)__A, (__v4si)__I, (__v4si)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi32(__mmask8 __U, __m128i __A, __m128i __I,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2vard128_maskz(
      (__v4si)__I, (__v4si)__A, (__v4si)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi64(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varq256_mask((__v4di)__I, (__v4di)__A,
                                                     (__v4di)__B, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi64(__m256i __A, __mmask8 __U, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varq256_mask(
      (__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi64(__m256i __A, __m256i __I, __mmask8 __U,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2varq256_mask(
      (__v4di)__A, (__v4di)__I, (__v4di)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi64(__mmask8 __U, __m256i __A, __m256i __I,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varq256_maskz(
      (__v4di)__I, (__v4di)__A, (__v4di)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi32(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2vard256_mask((__v8si)__I, (__v8si)__A,
                                                     (__v8si)__B, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi32(__m256i __A, __mmask8 __U, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2vard256_mask(
      (__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi32(__m256i __A, __m256i __I, __mmask8 __U,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2vard256_mask(
      (__v8si)__A, (__v8si)__I, (__v8si)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi32(__mmask8 __U, __m256i __A, __m256i __I,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2vard256_maskz(
      (__v8si)__I, (__v8si)__A, (__v8si)__B, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_pd(__m128d __A, __m128i __I, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermt2varpd128_mask(
      (__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)-1);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_permutex2var_pd(__m128d __A, __mmask8 __U, __m128i __I, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermt2varpd128_mask(
      (__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask2_permutex2var_pd(__m128d __A, __m128i __I, __mmask8 __U, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermi2varpd128_mask(
      (__v2df)__A, (__v2di)__I, (__v2df)__B, (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_permutex2var_pd(__mmask8 __U, __m128d __A, __m128i __I, __m128d __B) {
  return (__m128d)__builtin_ia32_vpermt2varpd128_maskz(
      (__v2di)__I, (__v2df)__A, (__v2df)__B, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_ps(__m128 __A, __m128i __I, __m128 __B) {
  return (__m128)__builtin_ia32_vpermt2varps128_mask((__v4si)__I, (__v4sf)__A,
                                                     (__v4sf)__B, (__mmask8)-1);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask_permutex2var_ps(__m128 __A, __mmask8 __U, __m128i __I, __m128 __B) {
  return (__m128)__builtin_ia32_vpermt2varps128_mask(
      (__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask2_permutex2var_ps(__m128 __A, __m128i __I, __mmask8 __U, __m128 __B) {
  return (__m128)__builtin_ia32_vpermi2varps128_mask(
      (__v4sf)__A, (__v4si)__I, (__v4sf)__B, (__mmask8)__U);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_permutex2var_ps(__mmask8 __U, __m128 __A, __m128i __I, __m128 __B) {
  return (__m128)__builtin_ia32_vpermt2varps128_maskz(
      (__v4si)__I, (__v4sf)__A, (__v4sf)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srav_epi64(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psravq128_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srav_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psravq128_mask((__v2di)__X, (__v2di)__Y,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srav_epi64(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psravq128_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sllv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv8si_mask((__v8si)__X, (__v8si)__Y,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sllv_epi32(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv8si_mask(
      (__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sllv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv4si_mask((__v4si)__X, (__v4si)__Y,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sllv_epi32(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv4si_mask(
      (__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sllv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv4di_mask((__v4di)__X, (__v4di)__Y,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sllv_epi64(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psllv4di_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sllv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv2di_mask((__v2di)__X, (__v2di)__Y,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sllv_epi64(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psllv2di_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srav_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrav8si_mask((__v8si)__X, (__v8si)__Y,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srav_epi32(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrav8si_mask(
      (__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srav_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrav4si_mask((__v4si)__X, (__v4si)__Y,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srav_epi32(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrav4si_mask(
      (__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srlv_epi32(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv8si_mask((__v8si)__X, (__v8si)__Y,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srlv_epi32(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv8si_mask(
      (__v8si)__X, (__v8si)__Y, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srlv_epi32(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv4si_mask((__v4si)__X, (__v4si)__Y,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srlv_epi32(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv4si_mask(
      (__v4si)__X, (__v4si)__Y, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srlv_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv4di_mask((__v4di)__X, (__v4di)__Y,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srlv_epi64(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psrlv4di_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srlv_epi64(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv2di_mask((__v2di)__X, (__v2di)__Y,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srlv_epi64(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_psrlv2di_mask(
      (__v2di)__X, (__v2di)__Y, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rolv_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rolv_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rolv_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rolv_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rolv_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rolv_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rorv_epi32(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rorv_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rorv_epi32(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rorv_epi32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rorv_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rorv_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rolv_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rolv_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rolv_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prolvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rolv_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rolv_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rolv_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prolvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rorv_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rorv_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rorv_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_prorvq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rorv_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rorv_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rorv_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_prorvq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srav_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psravq256_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srav_epi64(__m256i __W, __mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psravq256_mask((__v4di)__X, (__v4di)__Y,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srav_epi64(__mmask8 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_psravq256_mask(
      (__v4di)__X, (__v4di)__Y, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_pd(), __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)_mm_setzero_pd(), __U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_andnot_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pandnq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_pd(), __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pandnq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)_mm_setzero_pd(), __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_porq256_mask((__v4di)__A, (__v4di)__B,
                                              (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_porq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_or_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A | (__v4du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_porq128_mask((__v2di)__A, (__v2di)__B,
                                              (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_porq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_or_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A | (__v2du)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxorq256_mask((__v4di)__A, (__v4di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pxorq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_xor_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A ^ (__v4du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxorq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pxorq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_xor_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A ^ (__v2du)__B);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_maxpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_maxpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_maxps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_maxps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_divps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_div_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_div_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_divpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_minpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_div_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_divpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_minpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_minps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_div_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_divpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_div_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_divps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_minps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_div_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_divps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_minps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_mulps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxps_mask((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_maxps_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_minpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_maxpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulpd_mask((__v2df)__A, (__v2df)__B,
                                            (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_mulpd_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_mulps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_mulps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_mulpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_mulpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epi64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epi64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epi64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_max_epu64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epu64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_min_epu64(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epu64(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu64(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsd256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxud256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxud256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminud256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epu32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminud256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_max_epu64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_min_epu64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu64(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu64(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsd128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxud128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxud128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminud128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminud128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastmb_epi64(__mmask8 __A) {
  return (__m128i)__builtin_ia32_broadcastmb128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastmb_epi64(__mmask8 __A) {
  return (__m256i)__builtin_ia32_broadcastmb256(__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcastmw_epi32(__mmask16 __A) {
  return (__m128i)__builtin_ia32_broadcastmw128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcastmw_epi32(__mmask16 __A) {
  return (__m256i)__builtin_ia32_broadcastmw256(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_lzcnt_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntd_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_lzcnt_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntd_256_mask((__v8si)__A, (__v8si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_lzcnt_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntd_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_lzcnt_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntq_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_lzcnt_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntq_256_mask((__v4di)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_lzcnt_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vplzcntq_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_conflict_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictdi_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_conflict_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictdi_256_mask((__v4di)__A, (__v4di)__W,
                                                       (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_conflict_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictdi_256_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_conflict_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictsi_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_conflict_epi32(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictsi_256_mask((__v8si)__A, (__v8si)__W,
                                                       (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_conflict_epi32(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpconflictsi_256_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lzcnt_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntd_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_lzcnt_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntd_128_mask((__v4si)__A, (__v4si)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_lzcnt_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntd_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_lzcnt_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntq_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_lzcnt_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntq_128_mask((__v2di)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_lzcnt_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vplzcntq_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_conflict_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictdi_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_conflict_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictdi_128_mask((__v2di)__A, (__v2di)__W,
                                                       (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_conflict_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictdi_128_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_conflict_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictsi_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_conflict_epi32(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictsi_128_mask((__v4si)__A, (__v4si)__W,
                                                       (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_conflict_epi32(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpconflictsi_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_unpacklo_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpcklpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpcklpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpacklo_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpcklpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpcklpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpcklps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_unpackhi_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpckhpd256_mask((__v4df)__A, (__v4df)__B,
                                                  (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_unpckhpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpackhi_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpckhpd128_mask((__v2df)__A, (__v2df)__B,
                                                  (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_unpckhpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpckhps256_mask((__v8sf)__A, (__v8sf)__B,
                                                 (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpckhps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpackhi_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpckhps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpckhps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtph_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_vcvtph2ps_mask((__v8hi)__A, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtph_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_vcvtph2ps_mask(
      (__v8hi)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_unpcklps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtph_ps(__m256 __W, __mmask8 __U, __m128i __A) {
  return (__m256)__builtin_ia32_vcvtph2ps256_mask((__v8hi)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtph_ps(__mmask8 __U, __m128i __A) {
  return (__m256)__builtin_ia32_vcvtph2ps256_mask(
      (__v8hi)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_unpacklo_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpcklps128_mask((__v4sf)__A, (__v4sf)__B,
                                                 (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_unpcklps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sra_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrad256_mask((__v8si)__A, (__v4si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sra_epi32(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrad256_mask(
      (__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sra_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrad128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sra_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrad128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sra_epi64(__m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sra_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraq256_mask((__v4di)__A, (__v2di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sra_epi64(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sra_epi64(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sra_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sra_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sll_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pslld128_mask((__v4si)__A, (__v4si)__B,
                                               (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sll_epi32(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pslld128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sll_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllq128_mask((__v2di)__A, (__v2di)__B,
                                               (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sll_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sll_epi32(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_pslld256_mask((__v8si)__A, (__v4si)__B,
                                               (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sll_epi32(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_pslld256_mask(
      (__v8si)__A, (__v4si)__B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sll_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllq256_mask((__v4di)__A, (__v2di)__B,
                                               (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sll_epi64(__mmask8 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllq256_mask(
      (__v4di)__A, (__v2di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permutexvar_ps(__m256 __W, __mmask8 __U, __m256i __X, __m256 __Y) {
  return (__m256)__builtin_ia32_permvarsf256_mask((__v8sf)__Y, (__v8si)__X,
                                                  (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_ps(__mmask8 __U, __m256i __X, __m256 __Y) {
  return (__m256)__builtin_ia32_permvarsf256_mask(
      (__v8sf)__Y, (__v8si)__X, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_pd(__m256i __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_permvardf256_mask(
      (__v4df)__Y, (__v4di)__X, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_pd(__m256d __W, __mmask8 __U, __m256i __X,
                               __m256d __Y) {
  return (__m256d)__builtin_ia32_permvardf256_mask((__v4df)__Y, (__v4di)__X,
                                                   (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_pd(__mmask8 __U, __m256i __X, __m256d __Y) {
  return (__m256d)__builtin_ia32_permvardf256_mask(
      (__v4df)__Y, (__v4di)__X, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_permutevar_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256i __C) {
  return (__m256d)__builtin_ia32_vpermilvarpd256_mask(
      (__v4df)__A, (__v4di)__C, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutevar_pd(__mmask8 __U, __m256d __A, __m256i __C) {
  return (__m256d)__builtin_ia32_vpermilvarpd256_mask(
      (__v4df)__A, (__v4di)__C, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permutevar_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256i __C) {
  return (__m256)__builtin_ia32_vpermilvarps256_mask(
      (__v8sf)__A, (__v8si)__C, (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutevar_ps(__mmask8 __U, __m256 __A, __m256i __C) {
  return (__m256)__builtin_ia32_vpermilvarps256_mask(
      (__v8sf)__A, (__v8si)__C, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_permutevar_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128i __C) {
  return (__m128d)__builtin_ia32_vpermilvarpd_mask((__v2df)__A, (__v2di)__C,
                                                   (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutevar_pd(__mmask8 __U, __m128d __A, __m128i __C) {
  return (__m128d)__builtin_ia32_vpermilvarpd_mask(
      (__v2df)__A, (__v2di)__C, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutevar_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128i __C) {
  return (__m128)__builtin_ia32_vpermilvarps_mask((__v4sf)__A, (__v4si)__C,
                                                  (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutevar_ps(__mmask8 __U, __m128 __A, __m128i __C) {
  return (__m128)__builtin_ia32_vpermilvarps_mask(
      (__v4sf)__A, (__v4si)__C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mullo_epi32(__mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulld256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi64(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvardi256_mask(
      (__v4di)__Y, (__v4di)__X, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mullo_epi32(__m256i __W, __mmask8 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulld256_mask((__v8si)__A, (__v8si)__B,
                                                (__v8si)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mullo_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulld128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mullo_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulld128_mask((__v4si)__A, (__v4si)__B,
                                                (__v4si)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_epi32(__m256i __W, __mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuldq256_mask((__v8si)__X, (__v8si)__Y,
                                                (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_epi32(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuldq256_mask(
      (__v8si)__X, (__v8si)__Y, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_epi32(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuldq128_mask((__v4si)__X, (__v4si)__Y,
                                                (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_epi32(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuldq128_mask(
      (__v4si)__X, (__v4si)__Y, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi64(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvardi256_mask(
      (__v4di)__Y, (__v4di)__X, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi64(__m256i __W, __mmask8 __M, __m256i __X,
                                  __m256i __Y) {
  return (__m256i)__builtin_ia32_permvardi256_mask((__v4di)__Y, (__v4di)__X,
                                                   (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mul_epu32(__m256i __W, __mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuludq256_mask((__v8si)__X, (__v8si)__Y,
                                                 (__v4di)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi32(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256_mask(
      (__v8si)__Y, (__v8si)__X, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mul_epu32(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmuludq256_mask(
      (__v8si)__X, (__v8si)__Y, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mul_epu32(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuludq128_mask((__v4si)__X, (__v4si)__Y,
                                                 (__v2di)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mul_epu32(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmuludq128_mask(
      (__v4si)__X, (__v4si)__Y, (__v2di)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi32(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256_mask(
      (__v8si)__Y, (__v8si)__X, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi32(__m256i __W, __mmask8 __M, __m256i __X,
                                  __m256i __Y) {
  return (__m256i)__builtin_ia32_permvarsi256_mask((__v8si)__Y, (__v8si)__X,
                                                   (__v8si)__W, __M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi32_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi32_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi64_mask(__mmask8 __M, __m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi64_mask(__m256i __X, __m256i __Y) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi32_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi32_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi64_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi64_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex_epi64(__m256i __X, const int __I) {
  return (__m256i)__builtin_ia32_permdi256_mask(
      (__v4di)__X, __I, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex_epi64(__m256i __W, __mmask8 __M, __m256i __X,
                               const int __I) {
  return (__m256i)__builtin_ia32_permdi256_mask((__v4di)__X, __I, (__v4di)__W,
                                                (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex_epi64(__mmask8 __M, __m256i __X, const int __I) {
  return (__m256i)__builtin_ia32_permdi256_mask(
      (__v4di)__X, __I, (__v4di)_mm256_setzero_si256(), (__mmask8)__M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B,
                           const int __imm) {
  return (__m256d)__builtin_ia32_shufpd256_mask((__v4df)__A, (__v4df)__B, __imm,
                                                (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_pd(__mmask8 __U, __m256d __A, __m256d __B,
                            const int __imm) {
  return (__m256d)__builtin_ia32_shufpd256_mask((__v4df)__A, (__v4df)__B, __imm,
                                                (__v4df)_mm256_setzero_pd(),
                                                (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shuffle_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                        const int __imm) {
  return (__m128d)__builtin_ia32_shufpd128_mask((__v2df)__A, (__v2df)__B, __imm,
                                                (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_shuffle_pd(__mmask8 __U, __m128d __A, __m128d __B, const int __imm) {
  return (__m128d)__builtin_ia32_shufpd128_mask(
      (__v2df)__A, (__v2df)__B, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B,
                           const int __imm) {
  return (__m256)__builtin_ia32_shufps256_mask((__v8sf)__A, (__v8sf)__B, __imm,
                                               (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_maskz_shuffle_ps(__mmask8 __U, __m256 __A, __m256 __B, const int __imm) {
  return (__m256)__builtin_ia32_shufps256_mask((__v8sf)__A, (__v8sf)__B, __imm,
                                               (__v8sf)_mm256_setzero_ps(),
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shuffle_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                        const int __imm) {
  return (__m128)__builtin_ia32_shufps128_mask((__v4sf)__A, (__v4sf)__B, __imm,
                                               (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_maskz_shuffle_ps(__mmask8 __U, __m128 __A, __m128 __B, const int __imm) {
  return (__m128)__builtin_ia32_shufps128_mask(
      (__v4sf)__A, (__v4sf)__B, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_inserti32x4(__m256i __A, __m128i __B, const int __imm) {
  return (__m256i)__builtin_ia32_inserti32x4_256_mask(
      (__v8si)__A, (__v4si)__B, __imm, (__v8si)_mm256_setzero_si256(),
      (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_inserti32x4(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B,
                            const int __imm) {
  return (__m256i)__builtin_ia32_inserti32x4_256_mask(
      (__v8si)__A, (__v4si)__B, __imm, (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_inserti32x4(__mmask8 __U, __m256i __A, __m128i __B,
                             const int __imm) {
  return (__m256i)__builtin_ia32_inserti32x4_256_mask(
      (__v8si)__A, (__v4si)__B, __imm, (__v8si)_mm256_setzero_si256(),
      (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insertf32x4(__m256 __A, __m128 __B, const int __imm) {
  return (__m256)__builtin_ia32_insertf32x4_256_mask(
      (__v8sf)__A, (__v4sf)__B, __imm, (__v8sf)_mm256_setzero_ps(),
      (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_insertf32x4(__m256 __W, __mmask8 __U, __m256 __A, __m128 __B,
                            const int __imm) {
  return (__m256)__builtin_ia32_insertf32x4_256_mask(
      (__v8sf)__A, (__v4sf)__B, __imm, (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_insertf32x4(__mmask8 __U, __m256 __A, __m128 __B,
                             const int __imm) {
  return (__m256)__builtin_ia32_insertf32x4_256_mask(
      (__v8sf)__A, (__v4sf)__B, __imm, (__v8sf)_mm256_setzero_ps(),
      (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extracti32x4_epi32(__m256i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti32x4_256_mask(
      (__v8si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_extracti32x4_epi32(__m128i __W, __mmask8 __U, __m256i __A,
                                   const int __imm) {
  return (__m128i)__builtin_ia32_extracti32x4_256_mask(
      (__v8si)__A, __imm, (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_extracti32x4_epi32(__mmask8 __U, __m256i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti32x4_256_mask(
      (__v8si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extractf32x4_ps(__m256 __A, const int __imm) {
  return (__m128)__builtin_ia32_extractf32x4_256_mask(
      (__v8sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_extractf32x4_ps(__m128 __W, __mmask8 __U, __m256 __A,
                                const int __imm) {
  return (__m128)__builtin_ia32_extractf32x4_256_mask(
      (__v8sf)__A, __imm, (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_extractf32x4_ps(__mmask8 __U, __m256 __A, const int __imm) {
  return (__m128)__builtin_ia32_extractf32x4_256_mask(
      (__v8sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_i64x2(__m256i __A, __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_shuf_i64x2_256_mask(
      (__v4di)__A, (__v4di)__B, __imm, (__v4di)_mm256_setzero_si256(),
      (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_i64x2(__m256i __W, __mmask8 __U, __m256i __A,
                              __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_shuf_i64x2_256_mask(
      (__v4di)__A, (__v4di)__B, __imm, (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_i64x2(__mmask8 __U, __m256i __A, __m256i __B,
                               const int __imm) {
  return (__m256i)__builtin_ia32_shuf_i64x2_256_mask(
      (__v4di)__A, (__v4di)__B, __imm, (__v4di)_mm256_setzero_si256(),
      (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_i32x4(__m256i __A, __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_shuf_i32x4_256_mask(
      (__v8si)__A, (__v8si)__B, __imm, (__v8si)_mm256_setzero_si256(),
      (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_i32x4(__m256i __W, __mmask8 __U, __m256i __A,
                              __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_shuf_i32x4_256_mask(
      (__v8si)__A, (__v8si)__B, __imm, (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_i32x4(__mmask8 __U, __m256i __A, __m256i __B,
                               const int __imm) {
  return (__m256i)__builtin_ia32_shuf_i32x4_256_mask(
      (__v8si)__A, (__v8si)__B, __imm, (__v8si)_mm256_setzero_si256(),
      (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_f64x2(__m256d __A, __m256d __B, const int __imm) {
  return (__m256d)__builtin_ia32_shuf_f64x2_256_mask(
      (__v4df)__A, (__v4df)__B, __imm, (__v4df)_mm256_setzero_pd(),
      (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_f64x2(__m256d __W, __mmask8 __U, __m256d __A,
                              __m256d __B, const int __imm) {
  return (__m256d)__builtin_ia32_shuf_f64x2_256_mask(
      (__v4df)__A, (__v4df)__B, __imm, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_f64x2(__mmask8 __U, __m256d __A, __m256d __B,
                               const int __imm) {
  return (__m256d)__builtin_ia32_shuf_f64x2_256_mask(
      (__v4df)__A, (__v4df)__B, __imm, (__v4df)_mm256_setzero_pd(),
      (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shuffle_f32x4(__m256 __A, __m256 __B, const int __imm) {
  return (__m256)__builtin_ia32_shuf_f32x4_256_mask(
      (__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)_mm256_setzero_ps(),
      (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_f32x4(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B,
                              const int __imm) {
  return (__m256)__builtin_ia32_shuf_f32x4_256_mask(
      (__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_f32x4(__mmask8 __U, __m256 __A, __m256 __B,
                               const int __imm) {
  return (__m256)__builtin_ia32_shuf_f32x4_256_mask(
      (__v8sf)__A, (__v8sf)__B, __imm, (__v8sf)_mm256_setzero_ps(),
      (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fixupimm_pd(__m256d __A, __m256d __B, __m256i __C, const int __imm) {
  return (__m256d)__builtin_ia32_fixupimmpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4di)__C, __imm, (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fixupimm_pd(__m256d __A, __mmask8 __U, __m256d __B, __m256i __C,
                            const int __imm) {
  return (__m256d)__builtin_ia32_fixupimmpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4di)__C, __imm, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fixupimm_pd(__mmask8 __U, __m256d __A, __m256d __B,
                             __m256i __C, const int __imm) {
  return (__m256d)__builtin_ia32_fixupimmpd256_maskz(
      (__v4df)__A, (__v4df)__B, (__v4di)__C, __imm, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fixupimm_ps(__m256 __A, __m256 __B, __m256i __C, const int __imm) {
  return (__m256)__builtin_ia32_fixupimmps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8si)__C, __imm, (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fixupimm_ps(__m256 __A, __mmask8 __U, __m256 __B, __m256i __C,
                            const int __imm) {
  return (__m256)__builtin_ia32_fixupimmps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8si)__C, __imm, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_fixupimm_ps(__mmask8 __U, __m256 __A, __m256 __B, __m256i __C,
                             const int __imm) {
  return (__m256)__builtin_ia32_fixupimmps256_maskz(
      (__v8sf)__A, (__v8sf)__B, (__v8si)__C, __imm, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fixupimm_pd(__m128d __A, __m128d __B, __m128i __C, const int __imm) {
  return (__m128d)__builtin_ia32_fixupimmpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fixupimm_pd(__m128d __A, __mmask8 __U, __m128d __B, __m128i __C,
                         const int __imm) {
  return (__m128d)__builtin_ia32_fixupimmpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fixupimm_pd(__mmask8 __U, __m128d __A, __m128d __B, __m128i __C,
                          const int __imm) {
  return (__m128d)__builtin_ia32_fixupimmpd128_maskz(
      (__v2df)__A, (__v2df)__B, (__v2di)__C, __imm, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fixupimm_ps(__m128 __A, __m128 __B, __m128i __C, const int __imm) {
  return (__m128)__builtin_ia32_fixupimmps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fixupimm_ps(__m128 __A, __mmask8 __U, __m128 __B, __m128i __C,
                         const int __imm) {
  return (__m128)__builtin_ia32_fixupimmps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_fixupimm_ps(__mmask8 __U, __m128 __A, __m128 __B, __m128i __C,
                          const int __imm) {
  return (__m128)__builtin_ia32_fixupimmps128_maskz(
      (__v4sf)__A, (__v4sf)__B, (__v4si)__C, __imm, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srli_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                           const int __imm) {
  return (__m256i)__builtin_ia32_psrldi256_mask((__v8si)__A, __imm, (__v8si)__W,
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srli_epi32(__mmask8 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psrldi256_mask(
      (__v8si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_srli_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrldi128_mask((__v4si)__A, __imm, (__v4si)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srli_epi32(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrldi128_mask(
      (__v4si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srli_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                           const int __imm) {
  return (__m256i)__builtin_ia32_psrlqi256_mask((__v4di)__A, __imm, (__v4di)__W,
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srli_epi64(__mmask8 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psrlqi256_mask(
      (__v4di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_srli_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrlqi128_mask((__v2di)__A, __imm, (__v2di)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srli_epi64(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrlqi128_mask(
      (__v2di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_ternarylogic_epi64(__m256i __A, __m256i __B, __m256i __C,
                              const int __imm) {
  return (__m256i)__builtin_ia32_pternlogq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)__C, __imm, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_ternarylogic_epi64(__m256i __A, __mmask8 __U, __m256i __B,
                                   __m256i __C, const int __imm) {
  return (__m256i)__builtin_ia32_pternlogq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)__C, __imm, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_ternarylogic_epi64(__mmask8 __U, __m256i __A, __m256i __B,
                                    __m256i __C, const int __imm) {
  return (__m256i)__builtin_ia32_pternlogq256_maskz(
      (__v4di)__A, (__v4di)__B, (__v4di)__C, __imm, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_ternarylogic_epi32(__m256i __A, __m256i __B, __m256i __C,
                              const int __imm) {
  return (__m256i)__builtin_ia32_pternlogd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)__C, __imm, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_ternarylogic_epi32(__m256i __A, __mmask8 __U, __m256i __B,
                                   __m256i __C, const int __imm) {
  return (__m256i)__builtin_ia32_pternlogd256_mask(
      (__v8si)__A, (__v8si)__B, (__v8si)__C, __imm, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_ternarylogic_epi32(__mmask8 __U, __m256i __A, __m256i __B,
                                    __m256i __C, const int __imm) {
  return (__m256i)__builtin_ia32_pternlogd256_maskz(
      (__v8si)__A, (__v8si)__B, (__v8si)__C, __imm, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_ternarylogic_epi64(__m128i __A, __m128i __B, __m128i __C, const int __imm) {
  return (__m128i)__builtin_ia32_pternlogq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)__C, __imm, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_ternarylogic_epi64(__m128i __A, __mmask8 __U, __m128i __B,
                                __m128i __C, const int __imm) {
  return (__m128i)__builtin_ia32_pternlogq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)__C, __imm, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_ternarylogic_epi64(__mmask8 __U, __m128i __A, __m128i __B,
                                 __m128i __C, const int __imm) {
  return (__m128i)__builtin_ia32_pternlogq128_maskz(
      (__v2di)__A, (__v2di)__B, (__v2di)__C, __imm, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_ternarylogic_epi32(__m128i __A, __m128i __B, __m128i __C, const int __imm) {
  return (__m128i)__builtin_ia32_pternlogd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)__C, __imm, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_ternarylogic_epi32(__m128i __A, __mmask8 __U, __m128i __B,
                                __m128i __C, const int __imm) {
  return (__m128i)__builtin_ia32_pternlogd128_mask(
      (__v4si)__A, (__v4si)__B, (__v4si)__C, __imm, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_ternarylogic_epi32(__mmask8 __U, __m128i __A, __m128i __B,
                                 __m128i __C, const int __imm) {
  return (__m128i)__builtin_ia32_pternlogd128_maskz(
      (__v4si)__A, (__v4si)__B, (__v4si)__C, __imm, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_roundscale_ps(__m256 __A, const int __imm) {
  return (__m256)__builtin_ia32_rndscaleps_256_mask(
      (__v8sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_roundscale_ps(__m256 __W, __mmask8 __U, __m256 __A,
                              const int __imm) {
  return (__m256)__builtin_ia32_rndscaleps_256_mask((__v8sf)__A, __imm,
                                                    (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_roundscale_ps(__mmask8 __U, __m256 __A, const int __imm) {
  return (__m256)__builtin_ia32_rndscaleps_256_mask(
      (__v8sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_roundscale_pd(__m256d __A, const int __imm) {
  return (__m256d)__builtin_ia32_rndscalepd_256_mask(
      (__v4df)__A, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_roundscale_pd(__m256d __W, __mmask8 __U, __m256d __A,
                              const int __imm) {
  return (__m256d)__builtin_ia32_rndscalepd_256_mask(
      (__v4df)__A, __imm, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_roundscale_pd(__mmask8 __U, __m256d __A, const int __imm) {
  return (__m256d)__builtin_ia32_rndscalepd_256_mask(
      (__v4df)__A, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_roundscale_ps(__m128 __A, const int __imm) {
  return (__m128)__builtin_ia32_rndscaleps_128_mask(
      (__v4sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask_roundscale_ps(__m128 __W, __mmask8 __U, __m128 __A, const int __imm) {
  return (__m128)__builtin_ia32_rndscaleps_128_mask((__v4sf)__A, __imm,
                                                    (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_roundscale_ps(__mmask8 __U, __m128 __A, const int __imm) {
  return (__m128)__builtin_ia32_rndscaleps_128_mask(
      (__v4sf)__A, __imm, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_roundscale_pd(__m128d __A, const int __imm) {
  return (__m128d)__builtin_ia32_rndscalepd_128_mask(
      (__v2df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_roundscale_pd(__m128d __W, __mmask8 __U, __m128d __A,
                           const int __imm) {
  return (__m128d)__builtin_ia32_rndscalepd_128_mask(
      (__v2df)__A, __imm, (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_roundscale_pd(__mmask8 __U, __m128d __A, const int __imm) {
  return (__m128d)__builtin_ia32_rndscalepd_128_mask(
      (__v2df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getmant_ps(__m256 __A, _MM_MANTISSA_NORM_ENUM __B,
                      _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m256)__builtin_ia32_getmantps256_mask(
      (__v8sf)__A, (__C << 2) | __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getmant_ps(__m256 __W, __mmask8 __U, __m256 __A,
                           _MM_MANTISSA_NORM_ENUM __B,
                           _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m256)__builtin_ia32_getmantps256_mask((__v8sf)__A, (__C << 2) | __B,
                                                  (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getmant_ps(__mmask8 __U, __m256 __A,
                            _MM_MANTISSA_NORM_ENUM __B,
                            _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m256)__builtin_ia32_getmantps256_mask((__v8sf)__A, (__C << 2) | __B,
                                                  (__v8sf)_mm256_setzero_ps(),
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getmant_ps(__m128 __A, _MM_MANTISSA_NORM_ENUM __B,
                   _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m128)__builtin_ia32_getmantps128_mask(
      (__v4sf)__A, (__C << 2) | __B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getmant_ps(__m128 __W, __mmask8 __U, __m128 __A,
                        _MM_MANTISSA_NORM_ENUM __B,
                        _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m128)__builtin_ia32_getmantps128_mask((__v4sf)__A, (__C << 2) | __B,
                                                  (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getmant_ps(__mmask8 __U, __m128 __A, _MM_MANTISSA_NORM_ENUM __B,
                         _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m128)__builtin_ia32_getmantps128_mask(
      (__v4sf)__A, (__C << 2) | __B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_getmant_pd(__m256d __A, _MM_MANTISSA_NORM_ENUM __B,
                      _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m256d)__builtin_ia32_getmantpd256_mask(
      (__v4df)__A, (__C << 2) | __B, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_getmant_pd(__m256d __W, __mmask8 __U, __m256d __A,
                           _MM_MANTISSA_NORM_ENUM __B,
                           _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m256d)__builtin_ia32_getmantpd256_mask(
      (__v4df)__A, (__C << 2) | __B, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_getmant_pd(__mmask8 __U, __m256d __A,
                            _MM_MANTISSA_NORM_ENUM __B,
                            _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m256d)__builtin_ia32_getmantpd256_mask(
      (__v4df)__A, (__C << 2) | __B, (__v4df)_mm256_setzero_pd(),
      (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_getmant_pd(__m128d __A, _MM_MANTISSA_NORM_ENUM __B,
                   _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m128d)__builtin_ia32_getmantpd128_mask(
      (__v2df)__A, (__C << 2) | __B, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_getmant_pd(__m128d __W, __mmask8 __U, __m128d __A,
                        _MM_MANTISSA_NORM_ENUM __B,
                        _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m128d)__builtin_ia32_getmantpd128_mask(
      (__v2df)__A, (__C << 2) | __B, (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_getmant_pd(__mmask8 __U, __m128d __A, _MM_MANTISSA_NORM_ENUM __B,
                         _MM_MANTISSA_SIGN_ENUM __C) {
  return (__m128d)__builtin_ia32_getmantpd128_mask(
      (__v2df)__A, (__C << 2) | __B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i32gather_ps(__m256 __v1_old, __mmask8 __mask, __m256i __index,
                              void const *__addr, int __scale) {
  return (__m256)__builtin_ia32_gather3siv8sf((__v8sf)__v1_old, __addr,
                                              (__v8si)__index, __mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i32gather_ps(__m128 __v1_old, __mmask8 __mask, __m128i __index,
                           void const *__addr, int __scale) {
  return (__m128)__builtin_ia32_gather3siv4sf((__v4sf)__v1_old, __addr,
                                              (__v4si)__index, __mask, __scale);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i32gather_pd(__m256d __v1_old, __mmask8 __mask,
                              __m128i __index, void const *__addr,
                              int __scale) {
  return (__m256d)__builtin_ia32_gather3siv4df(
      (__v4df)__v1_old, __addr, (__v4si)__index, __mask, __scale);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i32gather_pd(__m128d __v1_old, __mmask8 __mask, __m128i __index,
                           void const *__addr, int __scale) {
  return (__m128d)__builtin_ia32_gather3siv2df(
      (__v2df)__v1_old, __addr, (__v4si)__index, __mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i64gather_ps(__m128 __v1_old, __mmask8 __mask, __m256i __index,
                              void const *__addr, int __scale) {
  return (__m128)__builtin_ia32_gather3div8sf((__v4sf)__v1_old, __addr,
                                              (__v4di)__index, __mask, __scale);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i64gather_ps(__m128 __v1_old, __mmask8 __mask, __m128i __index,
                           void const *__addr, int __scale) {
  return (__m128)__builtin_ia32_gather3div4sf((__v4sf)__v1_old, __addr,
                                              (__v2di)__index, __mask, __scale);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i64gather_pd(__m256d __v1_old, __mmask8 __mask,
                              __m256i __index, void const *__addr,
                              int __scale) {
  return (__m256d)__builtin_ia32_gather3div4df(
      (__v4df)__v1_old, __addr, (__v4di)__index, __mask, __scale);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i64gather_pd(__m128d __v1_old, __mmask8 __mask, __m128i __index,
                           void const *__addr, int __scale) {
  return (__m128d)__builtin_ia32_gather3div2df(
      (__v2df)__v1_old, __addr, (__v2di)__index, __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i32gather_epi32(__m256i __v1_old, __mmask8 __mask,
                                 __m256i __index, void const *__addr,
                                 int __scale) {
  return (__m256i)__builtin_ia32_gather3siv8si(
      (__v8si)__v1_old, __addr, (__v8si)__index, __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i32gather_epi32(__m128i __v1_old, __mmask8 __mask,
                              __m128i __index, void const *__addr,
                              int __scale) {
  return (__m128i)__builtin_ia32_gather3siv4si(
      (__v4si)__v1_old, __addr, (__v4si)__index, __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i32gather_epi64(__m256i __v1_old, __mmask8 __mask,
                                 __m128i __index, void const *__addr,
                                 int __scale) {
  return (__m256i)__builtin_ia32_gather3siv4di(
      (__v4di)__v1_old, __addr, (__v4si)__index, __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i32gather_epi64(__m128i __v1_old, __mmask8 __mask,
                              __m128i __index, void const *__addr,
                              int __scale) {
  return (__m128i)__builtin_ia32_gather3siv2di(
      (__v2di)__v1_old, __addr, (__v4si)__index, __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i64gather_epi32(__m128i __v1_old, __mmask8 __mask,
                                 __m256i __index, void const *__addr,
                                 int __scale) {
  return (__m128i)__builtin_ia32_gather3div8si(
      (__v4si)__v1_old, __addr, (__v4di)__index, __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i64gather_epi32(__m128i __v1_old, __mmask8 __mask,
                              __m128i __index, void const *__addr,
                              int __scale) {
  return (__m128i)__builtin_ia32_gather3div4si(
      (__v4si)__v1_old, __addr, (__v2di)__index, __mask, __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mmask_i64gather_epi64(__m256i __v1_old, __mmask8 __mask,
                                 __m256i __index, void const *__addr,
                                 int __scale) {
  return (__m256i)__builtin_ia32_gather3div4di(
      (__v4di)__v1_old, __addr, (__v4di)__index, __mask, __scale);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mmask_i64gather_epi64(__m128i __v1_old, __mmask8 __mask,
                              __m128i __index, void const *__addr,
                              int __scale) {
  return (__m128i)__builtin_ia32_gather3div2di(
      (__v2di)__v1_old, __addr, (__v2di)__index, __mask, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i32scatter_ps(void *__addr, __m256i __index, __m256 __v1,
                         const int __scale) {
  __builtin_ia32_scattersiv8sf(__addr, (__mmask8)0xFF, (__v8si)__index,
                               (__v8sf)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32scatter_ps(void *__addr, __mmask8 __mask, __m256i __index,
                              __m256 __v1, const int __scale) {
  __builtin_ia32_scattersiv8sf(__addr, __mask, (__v8si)__index, (__v8sf)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32scatter_ps(void *__addr, __m128i __index, __m128 __v1,
                      const int __scale) {
  __builtin_ia32_scattersiv4sf(__addr, (__mmask8)0xFF, (__v4si)__index,
                               (__v4sf)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32scatter_ps(void *__addr, __mmask8 __mask, __m128i __index,
                           __m128 __v1, const int __scale) {
  __builtin_ia32_scattersiv4sf(__addr, __mask, (__v4si)__index, (__v4sf)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i32scatter_pd(void *__addr, __m128i __index, __m256d __v1,
                         const int __scale) {
  __builtin_ia32_scattersiv4df(__addr, (__mmask8)0xFF, (__v4si)__index,
                               (__v4df)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32scatter_pd(void *__addr, __mmask8 __mask, __m128i __index,
                              __m256d __v1, const int __scale) {
  __builtin_ia32_scattersiv4df(__addr, __mask, (__v4si)__index, (__v4df)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32scatter_pd(void *__addr, __m128i __index, __m128d __v1,
                      const int __scale) {
  __builtin_ia32_scattersiv2df(__addr, (__mmask8)0xFF, (__v4si)__index,
                               (__v2df)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32scatter_pd(void *__addr, __mmask8 __mask, __m128i __index,
                           __m128d __v1, const int __scale) {
  __builtin_ia32_scattersiv2df(__addr, __mask, (__v4si)__index, (__v2df)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i64scatter_ps(void *__addr, __m256i __index, __m128 __v1,
                         const int __scale) {
  __builtin_ia32_scatterdiv8sf(__addr, (__mmask8)0xFF, (__v4di)__index,
                               (__v4sf)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64scatter_ps(void *__addr, __mmask8 __mask, __m256i __index,
                              __m128 __v1, const int __scale) {
  __builtin_ia32_scatterdiv8sf(__addr, __mask, (__v4di)__index, (__v4sf)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64scatter_ps(void *__addr, __m128i __index, __m128 __v1,
                      const int __scale) {
  __builtin_ia32_scatterdiv4sf(__addr, (__mmask8)0xFF, (__v2di)__index,
                               (__v4sf)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64scatter_ps(void *__addr, __mmask8 __mask, __m128i __index,
                           __m128 __v1, const int __scale) {
  __builtin_ia32_scatterdiv4sf(__addr, __mask, (__v2di)__index, (__v4sf)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i64scatter_pd(void *__addr, __m256i __index, __m256d __v1,
                         const int __scale) {
  __builtin_ia32_scatterdiv4df(__addr, (__mmask8)0xFF, (__v4di)__index,
                               (__v4df)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64scatter_pd(void *__addr, __mmask8 __mask, __m256i __index,
                              __m256d __v1, const int __scale) {
  __builtin_ia32_scatterdiv4df(__addr, __mask, (__v4di)__index, (__v4df)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64scatter_pd(void *__addr, __m128i __index, __m128d __v1,
                      const int __scale) {
  __builtin_ia32_scatterdiv2df(__addr, (__mmask8)0xFF, (__v2di)__index,
                               (__v2df)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64scatter_pd(void *__addr, __mmask8 __mask, __m128i __index,
                           __m128d __v1, const int __scale) {
  __builtin_ia32_scatterdiv2df(__addr, __mask, (__v2di)__index, (__v2df)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i32scatter_epi32(void *__addr, __m256i __index, __m256i __v1,
                            const int __scale) {
  __builtin_ia32_scattersiv8si(__addr, (__mmask8)0xFF, (__v8si)__index,
                               (__v8si)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32scatter_epi32(void *__addr, __mmask8 __mask, __m256i __index,
                                 __m256i __v1, const int __scale) {
  __builtin_ia32_scattersiv8si(__addr, __mask, (__v8si)__index, (__v8si)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32scatter_epi32(void *__addr, __m128i __index, __m128i __v1,
                         const int __scale) {
  __builtin_ia32_scattersiv4si(__addr, (__mmask8)0xFF, (__v4si)__index,
                               (__v4si)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32scatter_epi32(void *__addr, __mmask8 __mask, __m128i __index,
                              __m128i __v1, const int __scale) {
  __builtin_ia32_scattersiv4si(__addr, __mask, (__v4si)__index, (__v4si)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i32scatter_epi64(void *__addr, __m128i __index, __m256i __v1,
                            const int __scale) {
  __builtin_ia32_scattersiv4di(__addr, (__mmask8)0xFF, (__v4si)__index,
                               (__v4di)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i32scatter_epi64(void *__addr, __mmask8 __mask, __m128i __index,
                                 __m256i __v1, const int __scale) {
  __builtin_ia32_scattersiv4di(__addr, __mask, (__v4si)__index, (__v4di)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i32scatter_epi64(void *__addr, __m128i __index, __m128i __v1,
                         const int __scale) {
  __builtin_ia32_scattersiv2di(__addr, (__mmask8)0xFF, (__v4si)__index,
                               (__v2di)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i32scatter_epi64(void *__addr, __mmask8 __mask, __m128i __index,
                              __m128i __v1, const int __scale) {
  __builtin_ia32_scattersiv2di(__addr, __mask, (__v4si)__index, (__v2di)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i64scatter_epi32(void *__addr, __m256i __index, __m128i __v1,
                            const int __scale) {
  __builtin_ia32_scatterdiv8si(__addr, (__mmask8)0xFF, (__v4di)__index,
                               (__v4si)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64scatter_epi32(void *__addr, __mmask8 __mask, __m256i __index,
                                 __m128i __v1, const int __scale) {
  __builtin_ia32_scatterdiv8si(__addr, __mask, (__v4di)__index, (__v4si)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64scatter_epi32(void *__addr, __m128i __index, __m128i __v1,
                         const int __scale) {
  __builtin_ia32_scatterdiv4si(__addr, (__mmask8)0xFF, (__v2di)__index,
                               (__v4si)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64scatter_epi32(void *__addr, __mmask8 __mask, __m128i __index,
                              __m128i __v1, const int __scale) {
  __builtin_ia32_scatterdiv4si(__addr, __mask, (__v2di)__index, (__v4si)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_i64scatter_epi64(void *__addr, __m256i __index, __m256i __v1,
                            const int __scale) {
  __builtin_ia32_scatterdiv4di(__addr, (__mmask8)0xFF, (__v4di)__index,
                               (__v4di)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_i64scatter_epi64(void *__addr, __mmask8 __mask, __m256i __index,
                                 __m256i __v1, const int __scale) {
  __builtin_ia32_scatterdiv4di(__addr, __mask, (__v4di)__index, (__v4di)__v1,
                               __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_i64scatter_epi64(void *__addr, __m128i __index, __m128i __v1,
                         const int __scale) {
  __builtin_ia32_scatterdiv2di(__addr, (__mmask8)0xFF, (__v2di)__index,
                               (__v2di)__v1, __scale);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_i64scatter_epi64(void *__addr, __mmask8 __mask, __m128i __index,
                              __m128i __v1, const int __scale) {
  __builtin_ia32_scatterdiv2di(__addr, __mask, (__v2di)__index, (__v2di)__v1,
                               __scale);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shuffle_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                              _MM_PERM_ENUM __mask) {
  return (__m256i)__builtin_ia32_pshufd256_mask((__v8si)__A, __mask,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shuffle_epi32(__mmask8 __U, __m256i __A, _MM_PERM_ENUM __mask) {
  return (__m256i)__builtin_ia32_pshufd256_mask(
      (__v8si)__A, __mask, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shuffle_epi32(__m128i __W, __mmask8 __U, __m128i __A,
                           _MM_PERM_ENUM __mask) {
  return (__m128i)__builtin_ia32_pshufd128_mask((__v4si)__A, __mask,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shuffle_epi32(__mmask8 __U, __m128i __A, _MM_PERM_ENUM __mask) {
  return (__m128i)__builtin_ia32_pshufd128_mask(
      (__v4si)__A, __mask, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rol_epi32(__m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prold256_mask(
      (__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rol_epi32(__m256i __W, __mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prold256_mask((__v8si)__A, __B, (__v8si)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rol_epi32(__mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prold256_mask(
      (__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rol_epi32(__m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prold128_mask(
      (__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rol_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prold128_mask((__v4si)__A, __B, (__v4si)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rol_epi32(__mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prold128_mask(
      (__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_ror_epi32(__m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prord256_mask(
      (__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_ror_epi32(__m256i __W, __mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prord256_mask((__v8si)__A, __B, (__v8si)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_ror_epi32(__mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prord256_mask(
      (__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ror_epi32(__m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prord128_mask(
      (__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_ror_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prord128_mask((__v4si)__A, __B, (__v4si)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_ror_epi32(__mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prord128_mask(
      (__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_rol_epi64(__m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prolq256_mask(
      (__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_rol_epi64(__m256i __W, __mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prolq256_mask((__v4di)__A, __B, (__v4di)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_rol_epi64(__mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prolq256_mask(
      (__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_rol_epi64(__m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prolq128_mask(
      (__v2di)__A, __B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_rol_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prolq128_mask((__v2di)__A, __B, (__v2di)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_rol_epi64(__mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prolq128_mask(
      (__v2di)__A, __B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_ror_epi64(__m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prorq256_mask(
      (__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_ror_epi64(__m256i __W, __mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prorq256_mask((__v4di)__A, __B, (__v4di)__W,
                                               (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_ror_epi64(__mmask8 __U, __m256i __A, const int __B) {
  return (__m256i)__builtin_ia32_prorq256_mask(
      (__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_ror_epi64(__m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prorq128_mask(
      (__v2di)__A, __B, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_ror_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prorq128_mask((__v2di)__A, __B, (__v2di)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_ror_epi64(__mmask8 __U, __m128i __A, const int __B) {
  return (__m128i)__builtin_ia32_prorq128_mask(
      (__v2di)__A, __B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_alignr_epi32(__m128i __A, __m128i __B, const int __imm) {
  return (__m128i)__builtin_ia32_alignd128_mask((__v4si)__A, (__v4si)__B, __imm,
                                                (__v4si)_mm_setzero_si128(),
                                                (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_alignr_epi32(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B,
                          const int __imm) {
  return (__m128i)__builtin_ia32_alignd128_mask((__v4si)__A, (__v4si)__B, __imm,
                                                (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_alignr_epi32(__mmask8 __U, __m128i __A, __m128i __B,
                           const int __imm) {
  return (__m128i)__builtin_ia32_alignd128_mask((__v4si)__A, (__v4si)__B, __imm,
                                                (__v4si)_mm_setzero_si128(),
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_alignr_epi64(__m128i __A, __m128i __B, const int __imm) {
  return (__m128i)__builtin_ia32_alignq128_mask((__v2di)__A, (__v2di)__B, __imm,
                                                (__v2di)_mm_setzero_si128(),
                                                (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_alignr_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B,
                          const int __imm) {
  return (__m128i)__builtin_ia32_alignq128_mask((__v2di)__A, (__v2di)__B, __imm,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_alignr_epi64(__mmask8 __U, __m128i __A, __m128i __B,
                           const int __imm) {
  return (__m128i)__builtin_ia32_alignq128_mask((__v2di)__A, (__v2di)__B, __imm,
                                                (__v2di)_mm_setzero_si128(),
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_alignr_epi32(__m256i __A, __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_alignd256_mask((__v8si)__A, (__v8si)__B, __imm,
                                                (__v8si)_mm256_setzero_si256(),
                                                (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_alignr_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                             __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_alignd256_mask((__v8si)__A, (__v8si)__B, __imm,
                                                (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_alignr_epi32(__mmask8 __U, __m256i __A, __m256i __B,
                              const int __imm) {
  return (__m256i)__builtin_ia32_alignd256_mask((__v8si)__A, (__v8si)__B, __imm,
                                                (__v8si)_mm256_setzero_si256(),
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_alignr_epi64(__m256i __A, __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_alignq256_mask((__v4di)__A, (__v4di)__B, __imm,
                                                (__v4di)_mm256_setzero_si256(),
                                                (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_alignr_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                             __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_alignq256_mask((__v4di)__A, (__v4di)__B, __imm,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_alignr_epi64(__mmask8 __U, __m256i __A, __m256i __B,
                              const int __imm) {
  return (__m256i)__builtin_ia32_alignq256_mask((__v4di)__A, (__v4di)__B, __imm,
                                                (__v4di)_mm256_setzero_si256(),
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_ph(__m128i __W, __mmask8 __U, __m128 __A, const int __I) {
  return (__m128i)__builtin_ia32_vcvtps2ph_mask((__v4sf)__A, __I, (__v8hi)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_ph(__mmask8 __U, __m128 __A, const int __I) {
  return (__m128i)__builtin_ia32_vcvtps2ph_mask(
      (__v4sf)__A, __I, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_ph(__m128i __W, __mmask8 __U, __m256 __A, const int __I) {
  return (__m128i)__builtin_ia32_vcvtps2ph256_mask((__v8sf)__A, __I,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_ph(__mmask8 __U, __m256 __A, const int __I) {
  return (__m128i)__builtin_ia32_vcvtps2ph256_mask(
      (__v8sf)__A, __I, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srai_epi32(__m256i __W, __mmask8 __U, __m256i __A,
                           const int __imm) {
  return (__m256i)__builtin_ia32_psradi256_mask((__v8si)__A, __imm, (__v8si)__W,
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srai_epi32(__mmask8 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psradi256_mask(
      (__v8si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_srai_epi32(__m128i __W, __mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psradi128_mask((__v4si)__A, __imm, (__v4si)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srai_epi32(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psradi128_mask(
      (__v4si)__A, __imm, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srai_epi64(__m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psraqi256_mask(
      (__v4di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srai_epi64(__m256i __W, __mmask8 __U, __m256i __A,
                           const int __imm) {
  return (__m256i)__builtin_ia32_psraqi256_mask((__v4di)__A, __imm, (__v4di)__W,
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srai_epi64(__mmask8 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psraqi256_mask(
      (__v4di)__A, __imm, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srai_epi64(__m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psraqi128_mask(
      (__v2di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_srai_epi64(__m128i __W, __mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psraqi128_mask((__v2di)__A, __imm, (__v2di)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srai_epi64(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psraqi128_mask(
      (__v2di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_slli_epi32(__m128i __W, __mmask8 __U, __m128i __A, int __B) {
  return (__m128i)__builtin_ia32_pslldi128_mask((__v4si)__A, __B, (__v4si)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_slli_epi32(__mmask8 __U, __m128i __A, int __B) {
  return (__m128i)__builtin_ia32_pslldi128_mask(
      (__v4si)__A, __B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_slli_epi64(__m128i __W, __mmask8 __U, __m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllqi128_mask((__v2di)__A, __B, (__v2di)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_slli_epi64(__mmask8 __U, __m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllqi128_mask(
      (__v2di)__A, __B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_slli_epi32(__m256i __W, __mmask8 __U, __m256i __A, int __B) {
  return (__m256i)__builtin_ia32_pslldi256_mask((__v8si)__A, __B, (__v8si)__W,
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_slli_epi32(__mmask8 __U, __m256i __A, int __B) {
  return (__m256i)__builtin_ia32_pslldi256_mask(
      (__v8si)__A, __B, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_slli_epi64(__m256i __W, __mmask8 __U, __m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllqi256_mask((__v4di)__A, __B, (__v4di)__W,
                                                (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_slli_epi64(__mmask8 __U, __m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllqi256_mask(
      (__v4di)__A, __B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex_pd(__m256d __W, __mmask8 __U, __m256d __X,
                            const int __imm) {
  return (__m256d)__builtin_ia32_permdf256_mask((__v4df)__X, __imm, (__v4df)__W,
                                                (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex_pd(__mmask8 __U, __m256d __X, const int __imm) {
  return (__m256d)__builtin_ia32_permdf256_mask(
      (__v4df)__X, __imm, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_permute_pd(__m256d __W, __mmask8 __U, __m256d __X, const int __C) {
  return (__m256d)__builtin_ia32_vpermilpd256_mask((__v4df)__X, __C,
                                                   (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permute_pd(__mmask8 __U, __m256d __X, const int __C) {
  return (__m256d)__builtin_ia32_vpermilpd256_mask(
      (__v4df)__X, __C, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permute_pd(__m128d __W, __mmask8 __U, __m128d __X, const int __C) {
  return (__m128d)__builtin_ia32_vpermilpd_mask((__v2df)__X, __C, (__v2df)__W,
                                                (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permute_pd(__mmask8 __U, __m128d __X, const int __C) {
  return (__m128d)__builtin_ia32_vpermilpd_mask(
      (__v2df)__X, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_permute_ps(__m256 __W, __mmask8 __U, __m256 __X, const int __C) {
  return (__m256)__builtin_ia32_vpermilps256_mask((__v8sf)__X, __C, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permute_ps(__mmask8 __U, __m256 __X, const int __C) {
  return (__m256)__builtin_ia32_vpermilps256_mask(
      (__v8sf)__X, __C, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permute_ps(__m128 __W, __mmask8 __U, __m128 __X, const int __C) {
  return (__m128)__builtin_ia32_vpermilps_mask((__v4sf)__X, __C, (__v4sf)__W,
                                               (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permute_ps(__mmask8 __U, __m128 __X, const int __C) {
  return (__m128)__builtin_ia32_vpermilps_mask(
      (__v4sf)__X, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_pd(__mmask8 __U, __m256d __A, __m256d __W) {
  return (__m256d)__builtin_ia32_blendmpd_256_mask((__v4df)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_ps(__mmask8 __U, __m256 __A, __m256 __W) {
  return (__m256)__builtin_ia32_blendmps_256_mask((__v8sf)__A, (__v8sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_epi64(__mmask8 __U, __m256i __A, __m256i __W) {
  return (__m256i)__builtin_ia32_blendmq_256_mask((__v4di)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_epi32(__mmask8 __U, __m256i __A, __m256i __W) {
  return (__m256i)__builtin_ia32_blendmd_256_mask((__v8si)__A, (__v8si)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_pd(__mmask8 __U, __m128d __A, __m128d __W) {
  return (__m128d)__builtin_ia32_blendmpd_128_mask((__v2df)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_ps(__mmask8 __U, __m128 __A, __m128 __W) {
  return (__m128)__builtin_ia32_blendmps_128_mask((__v4sf)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_epi64(__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i)__builtin_ia32_blendmq_128_mask((__v2di)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_epi32(__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i)__builtin_ia32_blendmd_128_mask((__v4si)__A, (__v4si)__W,
                                                  (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epi64_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, __P,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epi32_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, __P,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epu64_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epu32_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_pd_mask(__m256d __X, __m256d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmppd256_mask((__v4df)__X, (__v4df)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_ps_mask(__m256 __X, __m256 __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpps256_mask((__v8sf)__X, (__v8sf)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epi64_mask(__mmask8 __U, __m256i __X, __m256i __Y,
                               const int __P) {
  return (__mmask8)__builtin_ia32_cmpq256_mask((__v4di)__X, (__v4di)__Y, __P,
                                               (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epi32_mask(__mmask8 __U, __m256i __X, __m256i __Y,
                               const int __P) {
  return (__mmask8)__builtin_ia32_cmpd256_mask((__v8si)__X, (__v8si)__Y, __P,
                                               (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epu64_mask(__mmask8 __U, __m256i __X, __m256i __Y,
                               const int __P) {
  return (__mmask8)__builtin_ia32_ucmpq256_mask((__v4di)__X, (__v4di)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epu32_mask(__mmask8 __U, __m256i __X, __m256i __Y,
                               const int __P) {
  return (__mmask8)__builtin_ia32_ucmpd256_mask((__v8si)__X, (__v8si)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm256_mask_cmp_pd_mask(__mmask8 __U, __m256d __X, __m256d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmppd256_mask((__v4df)__X, (__v4df)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm256_mask_cmp_ps_mask(__mmask8 __U, __m256 __X, __m256 __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpps256_mask((__v8sf)__X, (__v8sf)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epi64_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, __P,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epi32_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, __P,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epu64_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epu32_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_pd_mask(__m128d __X, __m128d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmppd128_mask((__v2df)__X, (__v2df)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_ps_mask(__m128 __X, __m128 __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpps128_mask((__v4sf)__X, (__v4sf)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_epi64_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpq128_mask((__v2di)__X, (__v2di)__Y, __P,
                                               (__mmask8)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_epi32_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpd128_mask((__v4si)__X, (__v4si)__Y, __P,
                                               (__mmask8)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_epu64_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpq128_mask((__v2di)__X, (__v2di)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_epu32_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpd128_mask((__v4si)__X, (__v4si)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_pd_mask(__mmask8 __U, __m128d __X, __m128d __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmppd128_mask((__v2df)__X, (__v2df)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmp_ps_mask(__mmask8 __U, __m128 __X, __m128 __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpps128_mask((__v4sf)__X, (__v4sf)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex_pd(__m256d __X, const int __M) {
  return (__m256d)__builtin_ia32_permdf256_mask(
      (__v4df)__X, __M, (__v4df)_mm256_undefined_pd(), (__mmask8)-1);
}

typedef short __v32hi __attribute__((__vector_size__(64)));
typedef short __v32hi_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));
typedef char __v64qi __attribute__((__vector_size__(64)));
typedef char __v64qi_u
    __attribute__((__vector_size__(64), __may_alias__, __aligned__(1)));

typedef unsigned long long __mmask64;

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask32_u8(__mmask32 __A, __mmask32 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestcsi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask64_u8(__mmask64 __A, __mmask64 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestcdi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_ktestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_ktestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_ktestcsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_ktestcdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask32_u8(__mmask32 __A, __mmask32 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestcsi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask64_u8(__mmask64 __A, __mmask64 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestcdi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_kortestzsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_kortestzdi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask32_u8(__mmask32 __A, __mmask32 __B) {
  return (unsigned char)__builtin_ia32_kortestcsi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask64_u8(__mmask64 __A, __mmask64 __B) {
  return (unsigned char)__builtin_ia32_kortestcdi(__A, __B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kaddsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kadddi((__mmask64)__A, (__mmask64)__B);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask32_u32(__mmask32 __A) {
  return (unsigned int)__builtin_ia32_kmovd((__mmask32)__A);
}

extern __inline unsigned long long
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask64_u64(__mmask64 __A) {
  return (unsigned long long)__builtin_ia32_kmovq((__mmask64)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu32_mask32(unsigned int __A) {
  return (__mmask32)__builtin_ia32_kmovd((__mmask32)__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu64_mask64(unsigned long long __A) {
  return (__mmask64)__builtin_ia32_kmovq((__mmask64)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask32(__mmask32 *__A) {
  return (__mmask32)__builtin_ia32_kmovd(*__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask64(__mmask64 *__A) {
  return (__mmask64)__builtin_ia32_kmovq(*(__mmask64 *)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask32(__mmask32 *__A, __mmask32 __B) {
  *(__mmask32 *)__A = __builtin_ia32_kmovd(__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask64(__mmask64 *__A, __mmask64 __B) {
  *(__mmask64 *)__A = __builtin_ia32_kmovq(__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _knot_mask32(__mmask32 __A) {
  return (__mmask32)__builtin_ia32_knotsi((__mmask32)__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _knot_mask64(__mmask64 __A) {
  return (__mmask64)__builtin_ia32_knotdi((__mmask64)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kor_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_korsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kor_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kordi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxnor_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kxnorsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxnor_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kxnordi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxor_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kxorsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxor_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kxordi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kand_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kandsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kand_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kanddi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kandn_mask32(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kandnsi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kandn_mask64(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kandndi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi16(__m512i __W, __mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquhi512_mask((__v32hi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi16(__mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquhi512_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi16(void const *__P) {
  return (__m512i)(*(__v32hi_u *)__P);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi16(__m512i __W, __mmask32 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquhi512_mask(
      (const short *)__P, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi16(__mmask32 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquhi512_mask(
      (const short *)__P, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi16(void *__P, __m512i __A) {
  *(__v32hi_u *)__P = (__v32hi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi16(void *__P, __mmask32 __U, __m512i __A) {
  __builtin_ia32_storedquhi512_mask((short *)__P, (__v32hi)__A, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_mov_epi8(__m512i __W, __mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquqi512_mask((__v64qi)__A, (__v64qi)__W,
                                                  (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mov_epi8(__mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_movdquqi512_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kunpackw(__mmask32 __A, __mmask32 __B) {
  return (__mmask32)__builtin_ia32_kunpcksi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kunpackw_mask32(__mmask16 __A, __mmask16 __B) {
  return (__mmask32)__builtin_ia32_kunpcksi((__mmask32)__A, (__mmask32)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_kunpackd(__mmask64 __A, __mmask64 __B) {
  return (__mmask64)__builtin_ia32_kunpckdi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kunpackd_mask64(__mmask32 __A, __mmask32 __B) {
  return (__mmask64)__builtin_ia32_kunpckdi((__mmask64)__A, (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_loadu_epi8(void const *__P) {
  return (__m512i)(*(__v64qi_u *)__P);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_loadu_epi8(__m512i __W, __mmask64 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquqi512_mask(
      (const char *)__P, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_loadu_epi8(__mmask64 __U, void const *__P) {
  return (__m512i)__builtin_ia32_loaddquqi512_mask(
      (const char *)__P, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_storeu_epi8(void *__P, __m512i __A) {
  *(__v64qi_u *)__P = (__v64qi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_storeu_epi8(void *__P, __mmask64 __U, __m512i __A) {
  __builtin_ia32_storedquqi512_mask((char *)__P, (__v64qi)__A, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sad_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psadbw512((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi16_epi8(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovwb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_storeu_epi8(void *__P, __mmask32 __M, __m512i __A) {
  __builtin_ia32_pmovwb512mem_mask((__v32qi *)__P, (__v32hi)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovwb512_mask((__v32hi)__A, (__v32qi)__O,
                                                __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi16_epi8(__mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovwb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtsepi16_epi8(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi16_storeu_epi8(void *__P, __mmask32 __M, __m512i __A) {
  __builtin_ia32_pmovswb512mem_mask((__v32qi *)__P, (__v32hi)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtsepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovswb512_mask((__v32hi)__A, (__v32qi)__O,
                                                 __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtsepi16_epi8(__mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtusepi16_epi8(__m512i __A) {
  return (__m256i)__builtin_ia32_pmovuswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_undefined_si256(), (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi16_epi8(__m256i __O, __mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovuswb512_mask((__v32hi)__A, (__v32qi)__O,
                                                  __M);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtusepi16_storeu_epi8(void *__P, __mmask32 __M, __m512i __A) {
  __builtin_ia32_pmovuswb512mem_mask((__v32qi *)__P, (__v32hi)__A, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtusepi16_epi8(__mmask32 __M, __m512i __A) {
  return (__m256i)__builtin_ia32_pmovuswb512_mask(
      (__v32hi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastb_epi8(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_mask(
      (__v16qi)__A, (__v64qi)_mm512_undefined_epi32(), (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastb_epi8(__m512i __O, __mmask64 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_mask((__v16qi)__A, (__v64qi)__O,
                                                     __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastb_epi8(__mmask64 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_mask(
      (__v16qi)__A, (__v64qi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi8(__m512i __O, __mmask64 __M, char __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_gpr_mask(__A, (__v64qi)__O,
                                                         __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi8(__mmask64 __M, char __A) {
  return (__m512i)__builtin_ia32_pbroadcastb512_gpr_mask(
      __A, (__v64qi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcastw_epi16(__m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_mask(
      (__v8hi)__A, (__v32hi)_mm512_undefined_epi32(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcastw_epi16(__m512i __O, __mmask32 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_mask((__v8hi)__A, (__v32hi)__O,
                                                     __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcastw_epi16(__mmask32 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_mask(
      (__v8hi)__A, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_set1_epi16(__m512i __O, __mmask32 __M, short __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_gpr_mask(__A, (__v32hi)__O,
                                                         __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_set1_epi16(__mmask32 __M, short __A) {
  return (__m512i)__builtin_ia32_pbroadcastw512_gpr_mask(
      __A, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mulhrs_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhrsw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mulhrs_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhrsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                  (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mulhrs_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhrsw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mulhi_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mulhi_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mulhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mulhi_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhuw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mulhi_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mulhi_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmulhuw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullo_epi16(__m512i __A, __m512i __B) {
  return (__m512i)((__v32hu)__A * (__v32hu)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullo_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mullo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi8_epi16(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi8_epi16(__m512i __W, __mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxbw512_mask((__v32qi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi8_epi16(__mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovsxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu8_epi16(__m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu8_epi16(__m512i __W, __mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxbw512_mask((__v32qi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu8_epi16(__mmask32 __U, __m256i __A) {
  return (__m512i)__builtin_ia32_pmovzxbw512_mask(
      (__v32qi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi16(__m512i __W, __mmask32 __M, __m512i __A,
                                  __m512i __B) {
  return (__m512i)__builtin_ia32_permvarhi512_mask(
      (__v32hi)__B, (__v32hi)__A, (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi16(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varhi512_mask(
      (__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi16(__m512i __A, __mmask32 __U, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varhi512_mask(
      (__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi16(__m512i __A, __m512i __I, __mmask32 __U,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2varhi512_mask(
      (__v32hi)__A, (__v32hi)__I, (__v32hi)__B, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi16(__mmask32 __U, __m512i __A, __m512i __I,
                                    __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varhi512_maskz(
      (__v32hi)__I, (__v32hi)__A, (__v32hi)__B, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_avg_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_avg_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_avg_epu8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi8(__m512i __A, __m512i __B) {
  return (__m512i)((__v64qu)__A + (__v64qu)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_add_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi8(__m512i __A, __m512i __B) {
  return (__m512i)((__v64qu)__A - (__v64qu)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_sub_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubb512_mask((__v64qi)__A, (__v64qi)__B,
                                               (__v64qi)_mm512_setzero_si512(),
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_avg_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_avg_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_avg_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pavgw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusb512_mask((__v64qi)__A, (__v64qi)__B,
                                                 (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epu8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epu8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusb512_mask((__v64qi)__A, (__v64qi)__B,
                                                 (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epu8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sub_epi16(__m512i __A, __m512i __B) {
  return (__m512i)((__v32hu)__A - (__v32hu)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sub_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sub_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_subs_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_subs_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusw512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_subs_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psubusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_add_epi16(__m512i __A, __m512i __B) {
  return (__m512i)((__v32hu)__A + (__v32hu)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_add_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_add_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddw512_mask((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_adds_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_adds_epu16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusw512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_adds_epu16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_paddusw512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srl_epi16(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srl_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srl_epi16(__mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psrlw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packs_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packsswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sll_epi16(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sll_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sll_epi16(__mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psllw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maddubs_epi16(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmaddubsw512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_maddubs_epi16(__m512i __W, __mmask32 __U, __m512i __X,
                              __m512i __Y) {
  return (__m512i)__builtin_ia32_pmaddubsw512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_maddubs_epi16(__mmask32 __U, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_pmaddubsw512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_madd_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaddwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_madd_epi16(__m512i __W, __mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaddwd512_mask((__v32hi)__A, (__v32hi)__B,
                                                 (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_madd_epi16(__mmask16 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaddwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi8(__m512i __W, __mmask64 __U, __m512i __A,
                              __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpackhi_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpackhi_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpackhi_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpckhwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi8(__m512i __W, __mmask64 __U, __m512i __A,
                              __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklbw512_mask(
      (__v64qi)__A, (__v64qi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_unpacklo_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_unpacklo_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                               __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_unpacklo_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_punpcklwd512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 0,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 0,
                                                 __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpeqb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epu16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 0,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpeq_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epu16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 0,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpeq_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 6,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__A, (__v64qi)__B, 6,
                                                 __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_pcmpgtb512_mask((__v64qi)__A, (__v64qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epu16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 6,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpgt_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epu16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__A, (__v32hi)__B, 6,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpgt_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtw512_mask((__v32hi)__A, (__v32hi)__B,
                                                   __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi8_mask(__m512i __A) {
  return (__mmask64)__builtin_ia32_cvtb2mask512((__v64qi)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi16_mask(__m512i __A) {
  return (__mmask32)__builtin_ia32_cvtw2mask512((__v32hi)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi8(__mmask64 __A) {
  return (__m512i)__builtin_ia32_cvtmask2b512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi16(__mmask32 __A) {
  return (__m512i)__builtin_ia32_cvtmask2w512(__A);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestmb512((__v64qi)__A, (__v64qi)__B,
                                              (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestmb512((__v64qi)__A, (__v64qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_test_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestmw512((__v32hi)__A, (__v32hi)__B,
                                              (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_test_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestmw512((__v32hi)__A, (__v32hi)__B, __U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi8_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestnmb512((__v64qi)__A, (__v64qi)__B,
                                               (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi8_mask(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_ptestnmb512((__v64qi)__A, (__v64qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_testn_epi16_mask(__m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestnmw512((__v32hi)__A, (__v32hi)__B,
                                               (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_testn_epi16_mask(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__mmask32)__builtin_ia32_ptestnmw512((__v32hi)__A, (__v32hi)__B, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shuffle_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shuffle_epi8(__m512i __W, __mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shuffle_epi8(__mmask64 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pshufb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epu16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_min_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epu8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_max_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epu8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epu8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epu8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminub512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_min_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_min_epi8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)_mm512_setzero_si512(),
                                                (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_min_epi8(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pminsb512_mask((__v64qi)__A, (__v64qi)__B,
                                                (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epi16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epi16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxsw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_max_epu16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_max_epu16(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_max_epu16(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmaxuw512_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sra_epi16(__m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sra_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sra_epi16(__mmask32 __U, __m512i __A, __m128i __B) {
  return (__m512i)__builtin_ia32_psraw512_mask((__v32hi)__A, (__v8hi)__B,
                                               (__v32hi)_mm512_setzero_si512(),
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srav_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srav_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srav_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrav32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srlv_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_srlv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srlv_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psrlv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_sllv_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_sllv_epi16(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_sllv_epi16(__mmask32 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_psllv32hi_mask((__v32hi)__A, (__v32hi)__B,
                                                (__v32hi)_mm512_setzero_si512(),
                                                (__mmask32)__U);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packs_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packsswb512_mask((__v32hi)__A, (__v32hi)__B,
                                                  (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packs_epi16(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packsswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packus_epi16(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packuswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packus_epi16(__m512i __W, __mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packuswb512_mask((__v32hi)__A, (__v32hi)__B,
                                                  (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packus_epi16(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packuswb512_mask(
      (__v32hi)__A, (__v32hi)__B, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi8(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsb512_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi8(__m512i __W, __mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsb512_mask((__v64qi)__A, (__v64qi)__W,
                                               (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi8(__mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsb512_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_abs_epi16(__m512i __A) {
  return (__m512i)__builtin_ia32_pabsw512_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_abs_epi16(__m512i __W, __mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsw512_mask((__v32hi)__A, (__v32hi)__W,
                                               (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_abs_epi16(__mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_pabsw512_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                 (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                 (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                 (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                 (__mmask64)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epu16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                 (__mmask32)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                (__mmask64)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi8_mask(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                (__mmask64)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpneq_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmplt_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmpge_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmple_epi16_mask(__mmask32 __M, __m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                (__mmask32)__M);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                 (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                 (__mmask64)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epu16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                 (__mmask32)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 4,
                                                (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 1,
                                                (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 5,
                                                (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi8_mask(__m512i __X, __m512i __Y) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, 2,
                                                (__mmask64)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpneq_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 4,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmplt_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 1,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmpge_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 5,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmple_epi16_mask(__m512i __X, __m512i __Y) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, 2,
                                                (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packs_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packssdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packs_epi32(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packssdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packs_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packssdw512_mask((__v16si)__A, (__v16si)__B,
                                                  (__v32hi)__W, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_packus_epi32(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packusdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_packus_epi32(__mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packusdw512_mask(
      (__v16si)__A, (__v16si)__B, (__v32hi)_mm512_setzero_si512(), __M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_packus_epi32(__m512i __W, __mmask32 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_packusdw512_mask((__v16si)__A, (__v16si)__B,
                                                  (__v32hi)__W, __M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftli_mask32(__mmask32 __A, unsigned int __B) {
  return (__mmask32)__builtin_ia32_kshiftlisi((__mmask32)__A, (__mmask8)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftli_mask64(__mmask64 __A, unsigned int __B) {
  return (__mmask64)__builtin_ia32_kshiftlidi((__mmask64)__A, (__mmask8)__B);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftri_mask32(__mmask32 __A, unsigned int __B) {
  return (__mmask32)__builtin_ia32_kshiftrisi((__mmask32)__A, (__mmask8)__B);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftri_mask64(__mmask64 __A, unsigned int __B) {
  return (__mmask64)__builtin_ia32_kshiftridi((__mmask64)__A, (__mmask8)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_alignr_epi8(__m512i __A, __m512i __B, const int __N) {
  return (__m512i)__builtin_ia32_palignr512((__v8di)__A, (__v8di)__B, __N * 8);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_alignr_epi8(__m512i __W, __mmask64 __U, __m512i __A,
                            __m512i __B, const int __N) {
  return (__m512i)__builtin_ia32_palignr512_mask(
      (__v8di)__A, (__v8di)__B, __N * 8, (__v8di)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_alignr_epi8(__mmask64 __U, __m512i __A, __m512i __B,
                             const int __N) {
  return (__m512i)__builtin_ia32_palignr512_mask(
      (__v8di)__A, (__v8di)__B, __N * 8, (__v8di)_mm512_setzero_si512(),
      (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dbsad_epu8(__m512i __A, __m512i __B, const int __imm) {
  return (__m512i)__builtin_ia32_dbpsadbw512_mask(
      (__v64qi)__A, (__v64qi)__B, __imm, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_dbsad_epu8(__m512i __W, __mmask32 __U, __m512i __A, __m512i __B,
                           const int __imm) {
  return (__m512i)__builtin_ia32_dbpsadbw512_mask(
      (__v64qi)__A, (__v64qi)__B, __imm, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dbsad_epu8(__mmask32 __U, __m512i __A, __m512i __B,
                            const int __imm) {
  return (__m512i)__builtin_ia32_dbpsadbw512_mask(
      (__v64qi)__A, (__v64qi)__B, __imm, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srli_epi16(__m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_psrlwi512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srli_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                           const int __imm) {
  return (__m512i)__builtin_ia32_psrlwi512_mask((__v32hi)__A, __imm,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srli_epi16(__mmask32 __U, __m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_psrlwi512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_slli_epi16(__m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_psllwi512_mask(
      (__v32hi)__A, __B, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_slli_epi16(__m512i __W, __mmask32 __U, __m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_psllwi512_mask((__v32hi)__A, __B, (__v32hi)__W,
                                                (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_slli_epi16(__mmask32 __U, __m512i __A, const int __B) {
  return (__m512i)__builtin_ia32_psllwi512_mask(
      (__v32hi)__A, __B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shufflehi_epi16(__m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_pshufhw512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shufflehi_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                                const int __imm) {
  return (__m512i)__builtin_ia32_pshufhw512_mask((__v32hi)__A, __imm,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shufflehi_epi16(__mmask32 __U, __m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_pshufhw512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shufflelo_epi16(__m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_pshuflw512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shufflelo_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                                const int __imm) {
  return (__m512i)__builtin_ia32_pshuflw512_mask((__v32hi)__A, __imm,
                                                 (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shufflelo_epi16(__mmask32 __U, __m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_pshuflw512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_srai_epi16(__m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_psrawi512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_srai_epi16(__m512i __W, __mmask32 __U, __m512i __A,
                           const int __imm) {
  return (__m512i)__builtin_ia32_psrawi512_mask((__v32hi)__A, __imm,
                                                (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_srai_epi16(__mmask32 __U, __m512i __A, const int __imm) {
  return (__m512i)__builtin_ia32_psrawi512_mask(
      (__v32hi)__A, __imm, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_epi16(__mmask32 __U, __m512i __A, __m512i __W) {
  return (__m512i)__builtin_ia32_blendmw_512_mask((__v32hi)__A, (__v32hi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_blend_epi8(__mmask64 __U, __m512i __A, __m512i __W) {
  return (__m512i)__builtin_ia32_blendmb_512_mask((__v64qi)__A, (__v64qi)__W,
                                                  (__mmask64)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epi16_mask(__mmask32 __U, __m512i __X, __m512i __Y,
                               const int __P) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, __P,
                                                (__mmask32)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epi16_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask32)__builtin_ia32_cmpw512_mask((__v32hi)__X, (__v32hi)__Y, __P,
                                                (__mmask32)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epi8_mask(__mmask64 __U, __m512i __X, __m512i __Y,
                              const int __P) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, __P,
                                                (__mmask64)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epi8_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask64)__builtin_ia32_cmpb512_mask((__v64qi)__X, (__v64qi)__Y, __P,
                                                (__mmask64)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epu16_mask(__mmask32 __U, __m512i __X, __m512i __Y,
                               const int __P) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y,
                                                 __P, (__mmask32)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epu16_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask32)__builtin_ia32_ucmpw512_mask((__v32hi)__X, (__v32hi)__Y,
                                                 __P, (__mmask32)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cmp_epu8_mask(__mmask64 __U, __m512i __X, __m512i __Y,
                              const int __P) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y,
                                                 __P, (__mmask64)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cmp_epu8_mask(__m512i __X, __m512i __Y, const int __P) {
  return (__mmask64)__builtin_ia32_ucmpb512_mask((__v64qi)__X, (__v64qi)__Y,
                                                 __P, (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_bslli_epi128(__m512i __A, const int __N) {
  return (__m512i)__builtin_ia32_pslldq512(__A, __N * 8);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_bsrli_epi128(__m512i __A, const int __N) {
  return (__m512i)__builtin_ia32_psrldq512(__A, __N * 8);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask8_u8(__mmask8 __A, __mmask8 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestcqi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_ktestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_ktestcqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktest_mask16_u8(__mmask16 __A, __mmask16 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_ktestchi(__A, __B);
  return (unsigned char)__builtin_ia32_ktestzhi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestz_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_ktestzhi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _ktestc_mask16_u8(__mmask16 __A, __mmask16 __B) {
  return (unsigned char)__builtin_ia32_ktestchi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortest_mask8_u8(__mmask8 __A, __mmask8 __B, unsigned char *__CF) {
  *__CF = (unsigned char)__builtin_ia32_kortestcqi(__A, __B);
  return (unsigned char)__builtin_ia32_kortestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestz_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_kortestzqi(__A, __B);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kortestc_mask8_u8(__mmask8 __A, __mmask8 __B) {
  return (unsigned char)__builtin_ia32_kortestcqi(__A, __B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kaddqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kadd_mask16(__mmask16 __A, __mmask16 __B) {
  return (__mmask16)__builtin_ia32_kaddhi((__mmask16)__A, (__mmask16)__B);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtmask8_u32(__mmask8 __A) {
  return (unsigned int)__builtin_ia32_kmovb((__mmask8)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtu32_mask8(unsigned int __A) {
  return (__mmask8)__builtin_ia32_kmovb((__mmask8)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _load_mask8(__mmask8 *__A) {
  return (__mmask8)__builtin_ia32_kmovb(*(__mmask8 *)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _store_mask8(__mmask8 *__A, __mmask8 __B) {
  *(__mmask8 *)__A = __builtin_ia32_kmovb(__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _knot_mask8(__mmask8 __A) {
  return (__mmask8)__builtin_ia32_knotqi((__mmask8)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kor_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_korqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxnor_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kxnorqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kxor_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kxorqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kand_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kandqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kandn_mask8(__mmask8 __A, __mmask8 __B) {
  return (__mmask8)__builtin_ia32_kandnqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f64x2(__m128d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x2_512_mask(
      (__v2df)__A, _mm512_undefined_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f64x2(__m512d __O, __mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x2_512_mask((__v2df)__A,
                                                         (__v8df)__O, __M);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A) {
  return (__m512d)__builtin_ia32_broadcastf64x2_512_mask(
      (__v2df)__A, (__v8df)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i64x2(__m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x2_512_mask(
      (__v2di)__A, _mm512_undefined_epi32(), (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i64x2(__m512i __O, __mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x2_512_mask((__v2di)__A,
                                                         (__v8di)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti64x2_512_mask(
      (__v2di)__A, (__v8di)_mm512_setzero_si512(), __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f32x2(__m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x2_512_mask(
      (__v4sf)__A, (__v16sf)_mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f32x2(__m512 __O, __mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x2_512_mask((__v4sf)__A,
                                                        (__v16sf)__O, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f32x2(__mmask16 __M, __m128 __A) {
  return (__m512)__builtin_ia32_broadcastf32x2_512_mask(
      (__v4sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i32x2(__m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x2_512_mask(
      (__v4si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i32x2(__m512i __O, __mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x2_512_mask((__v4si)__A,
                                                         (__v16si)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i32x2(__mmask16 __M, __m128i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x2_512_mask(
      (__v4si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_f32x8(__m256 __A) {
  return (__m512)__builtin_ia32_broadcastf32x8_512_mask(
      (__v8sf)__A, _mm512_undefined_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_f32x8(__m512 __O, __mmask16 __M, __m256 __A) {
  return (__m512)__builtin_ia32_broadcastf32x8_512_mask((__v8sf)__A,
                                                        (__v16sf)__O, __M);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_f32x8(__mmask16 __M, __m256 __A) {
  return (__m512)__builtin_ia32_broadcastf32x8_512_mask(
      (__v8sf)__A, (__v16sf)_mm512_setzero_ps(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_broadcast_i32x8(__m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x8_512_mask(
      (__v8si)__A, (__v16si)_mm512_undefined_epi32(), (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_broadcast_i32x8(__m512i __O, __mmask16 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x8_512_mask((__v8si)__A,
                                                         (__v16si)__O, __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_broadcast_i32x8(__mmask16 __M, __m256i __A) {
  return (__m512i)__builtin_ia32_broadcasti32x8_512_mask(
      (__v8si)__A, (__v16si)_mm512_setzero_si512(), __M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mullo_epi64(__m512i __A, __m512i __B) {
  return (__m512i)((__v8du)__A * (__v8du)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_mullo_epi64(__m512i __W, __mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullq512_mask((__v8di)__A, (__v8di)__B,
                                                (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_mullo_epi64(__mmask8 __U, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_pmullq512_mask(
      (__v8di)__A, (__v8di)__B, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_xorpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_xor_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_xorpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_xorpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_xor_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_xorps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_xor_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_xorps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_xor_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_xorps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_orpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_orpd512_mask((__v8df)__A, (__v8df)__B,
                                              (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_orpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_or_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_orps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_or_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_orps512_mask((__v16sf)__A, (__v16sf)__B,
                                             (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_or_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_orps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_and_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andpd512_mask((__v8df)__A, (__v8df)__B,
                                               (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_and_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_and_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andps512_mask((__v16sf)__A, (__v16sf)__B,
                                              (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_and_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_pd(__m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andnpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_andnot_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andnpd512_mask((__v8df)__A, (__v8df)__B,
                                                (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_pd(__mmask8 __U, __m512d __A, __m512d __B) {
  return (__m512d)__builtin_ia32_andnpd512_mask(
      (__v8df)__A, (__v8df)__B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_andnot_ps(__m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andnps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_andnot_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andnps512_mask((__v16sf)__A, (__v16sf)__B,
                                               (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_andnot_ps(__mmask16 __U, __m512 __A, __m512 __B) {
  return (__m512)__builtin_ia32_andnps512_mask(
      (__v16sf)__A, (__v16sf)__B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi32_mask(__m512i __A) {
  return (__mmask16)__builtin_ia32_cvtd2mask512((__v16si)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movepi64_mask(__m512i __A) {
  return (__mmask8)__builtin_ia32_cvtq2mask512((__v8di)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi32(__mmask16 __A) {
  return (__m512i)__builtin_ia32_cvtmask2d512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_movm_epi64(__mmask8 __A) {
  return (__m512i)__builtin_ia32_cvtmask2q512(__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epi64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epi64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epi64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttpd_epu64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttpd_epu64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)__W,
                                                    (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttpd_epu64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epi64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epi64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epi64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvttps_epu64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvttps_epu64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)__W,
                                                    (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvttps_epu64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epi64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epi64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epi64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtpd_epu64(__m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtpd_epu64(__m512i __W, __mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtpd_epu64(__mmask8 __U, __m512d __A) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epi64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epi64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epi64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtps_epu64(__m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtps_epu64(__m512i __W, __mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtps_epu64(__mmask8 __U, __m256 __A) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_ps(__m512i __A) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_ps(__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)__W,
                                                 (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_ps(__mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu64_ps(__m512i __A) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu64_ps(__m256 __W, __mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu64_ps(__mmask8 __U, __m512i __A) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepi64_pd(__m512i __A) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepi64_pd(__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)__W,
                                                  (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepi64_pd(__mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtepu64_pd(__m512i __A) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtepu64_pd(__m512d __W, __mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)__W,
                                                   (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtepu64_pd(__mmask8 __U, __m512i __A) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, 0x04);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftli_mask8(__mmask8 __A, unsigned int __B) {
  return (__mmask8)__builtin_ia32_kshiftliqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _kshiftri_mask8(__mmask8 __A, unsigned int __B) {
  return (__mmask8)__builtin_ia32_kshiftriqi((__mmask8)__A, (__mmask8)__B);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_range_pd(__m512d __A, __m512d __B, int __C) {
  return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C,
                                                 (__v8df)_mm512_setzero_pd(),
                                                 (__mmask8)-1, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_range_pd(__m512d __W, __mmask8 __U, __m512d __A, __m512d __B,
                         int __C) {
  return (__m512d)__builtin_ia32_rangepd512_mask(
      (__v8df)__A, (__v8df)__B, __C, (__v8df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_range_pd(__mmask8 __U, __m512d __A, __m512d __B, int __C) {
  return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C,
                                                 (__v8df)_mm512_setzero_pd(),
                                                 (__mmask8)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_range_ps(__m512 __A, __m512 __B, int __C) {
  return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C,
                                                (__v16sf)_mm512_setzero_ps(),
                                                (__mmask16)-1, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_range_ps(__m512 __W, __mmask16 __U, __m512 __A, __m512 __B,
                         int __C) {
  return (__m512)__builtin_ia32_rangeps512_mask(
      (__v16sf)__A, (__v16sf)__B, __C, (__v16sf)__W, (__mmask16)__U, 0x04);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_range_ps(__mmask16 __U, __m512 __A, __m512 __B, int __C) {
  return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C,
                                                (__v16sf)_mm512_setzero_ps(),
                                                (__mmask16)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_sd(__m128d __A, __m128d __B, int __C) {
  return (__m128d)__builtin_ia32_reducesd_mask(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_round_sd(__m128d __A, __m128d __B, int __C, const int __R) {
  return (__m128d)__builtin_ia32_reducesd_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)-1,
      __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_reduce_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                       int __C) {
  return (__m128d)__builtin_ia32_reducesd_mask((__v2df)__A, (__v2df)__B, __C,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_reduce_round_sd(__m128d __W, __mmask8 __U, __m128d __A,
                             __m128d __B, int __C, const int __R) {
  return (__m128d)__builtin_ia32_reducesd_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)__W, __U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_reduce_sd(__mmask8 __U, __m128d __A, __m128d __B, int __C) {
  return (__m128d)__builtin_ia32_reducesd_mask(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_reduce_round_sd(__mmask8 __U, __m128d __A, __m128d __B, int __C,
                              const int __R) {
  return (__m128d)__builtin_ia32_reducesd_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_ss(__m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_reducess_mask(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_round_ss(__m128 __A, __m128 __B, int __C, const int __R) {
  return (__m128)__builtin_ia32_reducess_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)-1,
      __R);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask_reduce_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_reducess_mask((__v4sf)__A, (__v4sf)__B, __C,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_reduce_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                             int __C, const int __R) {
  return (__m128)__builtin_ia32_reducess_mask_round((__v4sf)__A, (__v4sf)__B,
                                                    __C, (__v4sf)__W, __U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_reduce_ss(__mmask8 __U, __m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_reducess_mask(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_reduce_round_ss(__mmask8 __U, __m128 __A, __m128 __B, int __C,
                              const int __R) {
  return (__m128)__builtin_ia32_reducess_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), __U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_range_sd(__m128d __A, __m128d __B, int __C) {
  return (__m128d)__builtin_ia32_rangesd128_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)-1,
      0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_range_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                      int __C) {
  return (__m128d)__builtin_ia32_rangesd128_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_range_sd(__mmask8 __U, __m128d __A, __m128d __B, int __C) {
  return (__m128d)__builtin_ia32_rangesd128_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U,
      0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_range_ss(__m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_rangess128_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)-1,
      0x04);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask_range_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_rangess128_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)__W, (__mmask8)__U, 0x04);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_range_ss(__mmask8 __U, __m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_rangess128_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U,
      0x04);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_range_round_sd(__m128d __A, __m128d __B, int __C, const int __R) {
  return (__m128d)__builtin_ia32_rangesd128_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)-1,
      __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_range_round_sd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                            int __C, const int __R) {
  return (__m128d)__builtin_ia32_rangesd128_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)__W, (__mmask8)__U, __R);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_range_round_sd(__mmask8 __U, __m128d __A, __m128d __B, int __C,
                             const int __R) {
  return (__m128d)__builtin_ia32_rangesd128_mask_round(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U,
      __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_range_round_ss(__m128 __A, __m128 __B, int __C, const int __R) {
  return (__m128)__builtin_ia32_rangess128_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)-1,
      __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_range_round_ss(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B,
                            int __C, const int __R) {
  return (__m128)__builtin_ia32_rangess128_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)__W, (__mmask8)__U, __R);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_range_round_ss(__mmask8 __U, __m128 __A, __m128 __B, int __C,
                             const int __R) {
  return (__m128)__builtin_ia32_rangess128_mask_round(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U,
      __R);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fpclass_ss_mask(__m128 __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclassss_mask((__v4sf)__A, __imm,
                                                 (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fpclass_sd_mask(__m128d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasssd_mask((__v2df)__A, __imm,
                                                 (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fpclass_ss_mask(__mmask8 __U, __m128 __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclassss_mask((__v4sf)__A, __imm, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fpclass_sd_mask(__mmask8 __U, __m128d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasssd_mask((__v2df)__A, __imm, __U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundpd_epi64(__m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundpd_epi64(__m512i __W, __mmask8 __U, __m512d __A,
                                   const int __R) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask((__v8df)__A, (__v8di)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundpd_epi64(__mmask8 __U, __m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundpd_epu64(__m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundpd_epu64(__m512i __W, __mmask8 __U, __m512d __A,
                                   const int __R) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask((__v8df)__A, (__v8di)__W,
                                                    (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundpd_epu64(__mmask8 __U, __m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundps_epi64(__m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundps_epi64(__m512i __W, __mmask8 __U, __m256 __A,
                                   const int __R) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask((__v8sf)__A, (__v8di)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundps_epi64(__mmask8 __U, __m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtt_roundps_epu64(__m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtt_roundps_epu64(__m512i __W, __mmask8 __U, __m256 __A,
                                   const int __R) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask((__v8sf)__A, (__v8di)__W,
                                                    (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtt_roundps_epu64(__mmask8 __U, __m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvttps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundpd_epi64(__m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundpd_epi64(__m512i __W, __mmask8 __U, __m512d __A,
                                  const int __R) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask((__v8df)__A, (__v8di)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundpd_epi64(__mmask8 __U, __m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtpd2qq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundpd_epu64(__m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundpd_epu64(__m512i __W, __mmask8 __U, __m512d __A,
                                  const int __R) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask((__v8df)__A, (__v8di)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundpd_epu64(__mmask8 __U, __m512d __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtpd2uqq512_mask(
      (__v8df)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundps_epi64(__m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundps_epi64(__m512i __W, __mmask8 __U, __m256 __A,
                                  const int __R) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask((__v8sf)__A, (__v8di)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundps_epi64(__mmask8 __U, __m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2qq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundps_epu64(__m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)-1, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundps_epu64(__m512i __W, __mmask8 __U, __m256 __A,
                                  const int __R) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask((__v8sf)__A, (__v8di)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundps_epu64(__mmask8 __U, __m256 __A, const int __R) {
  return (__m512i)__builtin_ia32_cvtps2uqq512_mask(
      (__v8sf)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundepi64_ps(__m512i __A, const int __R) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundepi64_ps(__m256 __W, __mmask8 __U, __m512i __A,
                                  const int __R) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask((__v8di)__A, (__v8sf)__W,
                                                 (__mmask8)__U, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundepi64_ps(__mmask8 __U, __m512i __A, const int __R) {
  return (__m256)__builtin_ia32_cvtqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundepu64_ps(__m512i __A, const int __R) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundepu64_ps(__m256 __W, __mmask8 __U, __m512i __A,
                                  const int __R) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask((__v8di)__A, (__v8sf)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundepu64_ps(__mmask8 __U, __m512i __A, const int __R) {
  return (__m256)__builtin_ia32_cvtuqq2ps512_mask(
      (__v8di)__A, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundepi64_pd(__m512i __A, const int __R) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundepi64_pd(__m512d __W, __mmask8 __U, __m512i __A,
                                  const int __R) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask((__v8di)__A, (__v8df)__W,
                                                  (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundepi64_pd(__mmask8 __U, __m512i __A, const int __R) {
  return (__m512d)__builtin_ia32_cvtqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvt_roundepu64_pd(__m512i __A, const int __R) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvt_roundepu64_pd(__m512d __W, __mmask8 __U, __m512i __A,
                                  const int __R) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask((__v8di)__A, (__v8df)__W,
                                                   (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvt_roundepu64_pd(__mmask8 __U, __m512i __A, const int __R) {
  return (__m512d)__builtin_ia32_cvtuqq2pd512_mask(
      (__v8di)__A, (__v8df)_mm512_setzero_pd(), (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_pd(__m512d __A, int __B) {
  return (__m512d)__builtin_ia32_reducepd512_mask(
      (__v8df)__A, __B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_round_pd(__m512d __A, int __B, const int __R) {
  return (__m512d)__builtin_ia32_reducepd512_mask_round(
      (__v8df)__A, __B, (__v8df)_mm512_setzero_pd(), (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_pd(__m512d __W, __mmask8 __U, __m512d __A, int __B) {
  return (__m512d)__builtin_ia32_reducepd512_mask((__v8df)__A, __B, (__v8df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_round_pd(__m512d __W, __mmask8 __U, __m512d __A, int __B,
                                const int __R) {
  return (__m512d)__builtin_ia32_reducepd512_mask_round((__v8df)__A, __B,
                                                        (__v8df)__W, __U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_reduce_pd(__mmask8 __U, __m512d __A, int __B) {
  return (__m512d)__builtin_ia32_reducepd512_mask(
      (__v8df)__A, __B, (__v8df)_mm512_setzero_pd(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_reduce_round_pd(__mmask8 __U, __m512d __A, int __B,
                                 const int __R) {
  return (__m512d)__builtin_ia32_reducepd512_mask_round(
      (__v8df)__A, __B, (__v8df)_mm512_setzero_pd(), __U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_ps(__m512 __A, int __B) {
  return (__m512)__builtin_ia32_reduceps512_mask(
      (__v16sf)__A, __B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_reduce_round_ps(__m512 __A, int __B, const int __R) {
  return (__m512)__builtin_ia32_reduceps512_mask_round(
      (__v16sf)__A, __B, (__v16sf)_mm512_setzero_ps(), (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_ps(__m512 __W, __mmask16 __U, __m512 __A, int __B) {
  return (__m512)__builtin_ia32_reduceps512_mask((__v16sf)__A, __B,
                                                 (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_reduce_round_ps(__m512 __W, __mmask16 __U, __m512 __A, int __B,
                                const int __R) {
  return (__m512)__builtin_ia32_reduceps512_mask_round((__v16sf)__A, __B,
                                                       (__v16sf)__W, __U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_reduce_ps(__mmask16 __U, __m512 __A, int __B) {
  return (__m512)__builtin_ia32_reduceps512_mask(
      (__v16sf)__A, __B, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_reduce_round_ps(__mmask16 __U, __m512 __A, int __B,
                                 const int __R) {
  return (__m512)__builtin_ia32_reduceps512_mask_round(
      (__v16sf)__A, __B, (__v16sf)_mm512_setzero_ps(), __U, __R);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extractf32x8_ps(__m512 __A, const int __imm) {
  return (__m256)__builtin_ia32_extractf32x8_mask(
      (__v16sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extractf32x8_ps(__m256 __W, __mmask8 __U, __m512 __A,
                                const int __imm) {
  return (__m256)__builtin_ia32_extractf32x8_mask((__v16sf)__A, __imm,
                                                  (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_extractf32x8_ps(__mmask8 __U, __m512 __A, const int __imm) {
  return (__m256)__builtin_ia32_extractf32x8_mask(
      (__v16sf)__A, __imm, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extractf64x2_pd(__m512d __A, const int __imm) {
  return (__m128d)__builtin_ia32_extractf64x2_512_mask(
      (__v8df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extractf64x2_pd(__m128d __W, __mmask8 __U, __m512d __A,
                                const int __imm) {
  return (__m128d)__builtin_ia32_extractf64x2_512_mask(
      (__v8df)__A, __imm, (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_extractf64x2_pd(__mmask8 __U, __m512d __A, const int __imm) {
  return (__m128d)__builtin_ia32_extractf64x2_512_mask(
      (__v8df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extracti32x8_epi32(__m512i __A, const int __imm) {
  return (__m256i)__builtin_ia32_extracti32x8_mask(
      (__v16si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extracti32x8_epi32(__m256i __W, __mmask8 __U, __m512i __A,
                                   const int __imm) {
  return (__m256i)__builtin_ia32_extracti32x8_mask((__v16si)__A, __imm,
                                                   (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_extracti32x8_epi32(__mmask8 __U, __m512i __A, const int __imm) {
  return (__m256i)__builtin_ia32_extracti32x8_mask(
      (__v16si)__A, __imm, (__v8si)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_extracti64x2_epi64(__m512i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti64x2_512_mask(
      (__v8di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_extracti64x2_epi64(__m128i __W, __mmask8 __U, __m512i __A,
                                   const int __imm) {
  return (__m128i)__builtin_ia32_extracti64x2_512_mask(
      (__v8di)__A, __imm, (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_extracti64x2_epi64(__mmask8 __U, __m512i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti64x2_512_mask(
      (__v8di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_range_round_pd(__m512d __A, __m512d __B, int __C, const int __R) {
  return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C,
                                                 (__v8df)_mm512_setzero_pd(),
                                                 (__mmask8)-1, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_range_round_pd(__m512d __W, __mmask8 __U, __m512d __A,
                               __m512d __B, int __C, const int __R) {
  return (__m512d)__builtin_ia32_rangepd512_mask(
      (__v8df)__A, (__v8df)__B, __C, (__v8df)__W, (__mmask8)__U, __R);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_range_round_pd(__mmask8 __U, __m512d __A, __m512d __B, int __C,
                                const int __R) {
  return (__m512d)__builtin_ia32_rangepd512_mask((__v8df)__A, (__v8df)__B, __C,
                                                 (__v8df)_mm512_setzero_pd(),
                                                 (__mmask8)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_range_round_ps(__m512 __A, __m512 __B, int __C, const int __R) {
  return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C,
                                                (__v16sf)_mm512_setzero_ps(),
                                                (__mmask16)-1, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_range_round_ps(__m512 __W, __mmask16 __U, __m512 __A,
                               __m512 __B, int __C, const int __R) {
  return (__m512)__builtin_ia32_rangeps512_mask(
      (__v16sf)__A, (__v16sf)__B, __C, (__v16sf)__W, (__mmask16)__U, __R);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_range_round_ps(__mmask16 __U, __m512 __A, __m512 __B, int __C,
                                const int __R) {
  return (__m512)__builtin_ia32_rangeps512_mask((__v16sf)__A, (__v16sf)__B, __C,
                                                (__v16sf)_mm512_setzero_ps(),
                                                (__mmask16)__U, __R);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_inserti32x8(__m512i __A, __m256i __B, const int __imm) {
  return (__m512i)__builtin_ia32_inserti32x8_mask(
      (__v16si)__A, (__v8si)__B, __imm, (__v16si)_mm512_setzero_si512(),
      (__mmask16)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_inserti32x8(__m512i __W, __mmask16 __U, __m512i __A,
                            __m256i __B, const int __imm) {
  return (__m512i)__builtin_ia32_inserti32x8_mask(
      (__v16si)__A, (__v8si)__B, __imm, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_inserti32x8(__mmask16 __U, __m512i __A, __m256i __B,
                             const int __imm) {
  return (__m512i)__builtin_ia32_inserti32x8_mask(
      (__v16si)__A, (__v8si)__B, __imm, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_insertf32x8(__m512 __A, __m256 __B, const int __imm) {
  return (__m512)__builtin_ia32_insertf32x8_mask(
      (__v16sf)__A, (__v8sf)__B, __imm, (__v16sf)_mm512_setzero_ps(),
      (__mmask16)-1);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_insertf32x8(__m512 __W, __mmask16 __U, __m512 __A, __m256 __B,
                            const int __imm) {
  return (__m512)__builtin_ia32_insertf32x8_mask(
      (__v16sf)__A, (__v8sf)__B, __imm, (__v16sf)__W, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_insertf32x8(__mmask16 __U, __m512 __A, __m256 __B,
                             const int __imm) {
  return (__m512)__builtin_ia32_insertf32x8_mask(
      (__v16sf)__A, (__v8sf)__B, __imm, (__v16sf)_mm512_setzero_ps(),
      (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_inserti64x2(__m512i __A, __m128i __B, const int __imm) {
  return (__m512i)__builtin_ia32_inserti64x2_512_mask(
      (__v8di)__A, (__v2di)__B, __imm, (__v8di)_mm512_setzero_si512(),
      (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_inserti64x2(__m512i __W, __mmask8 __U, __m512i __A, __m128i __B,
                            const int __imm) {
  return (__m512i)__builtin_ia32_inserti64x2_512_mask(
      (__v8di)__A, (__v2di)__B, __imm, (__v8di)__W, (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_inserti64x2(__mmask8 __U, __m512i __A, __m128i __B,
                             const int __imm) {
  return (__m512i)__builtin_ia32_inserti64x2_512_mask(
      (__v8di)__A, (__v2di)__B, __imm, (__v8di)_mm512_setzero_si512(),
      (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_insertf64x2(__m512d __A, __m128d __B, const int __imm) {
  return (__m512d)__builtin_ia32_insertf64x2_512_mask(
      (__v8df)__A, (__v2df)__B, __imm, (__v8df)_mm512_setzero_pd(),
      (__mmask8)-1);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_insertf64x2(__m512d __W, __mmask8 __U, __m512d __A, __m128d __B,
                            const int __imm) {
  return (__m512d)__builtin_ia32_insertf64x2_512_mask(
      (__v8df)__A, (__v2df)__B, __imm, (__v8df)__W, (__mmask8)__U);
}

extern __inline __m512d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_insertf64x2(__mmask8 __U, __m512d __A, __m128d __B,
                             const int __imm) {
  return (__m512d)__builtin_ia32_insertf64x2_512_mask(
      (__v8df)__A, (__v2df)__B, __imm, (__v8df)_mm512_setzero_pd(),
      (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fpclass_pd_mask(__mmask8 __U, __m512d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasspd512_mask((__v8df)__A, __imm, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fpclass_pd_mask(__m512d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasspd512_mask((__v8df)__A, __imm,
                                                    (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_fpclass_ps_mask(__mmask16 __U, __m512 __A, const int __imm) {
  return (__mmask16)__builtin_ia32_fpclassps512_mask((__v16sf)__A, __imm, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_fpclass_ps_mask(__m512 __A, const int __imm) {
  return (__mmask16)__builtin_ia32_fpclassps512_mask((__v16sf)__A, __imm,
                                                     (__mmask16)-1);
}

typedef short __v16hi_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef short __v8hi_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));
typedef char __v32qi_u
    __attribute__((__vector_size__(32), __may_alias__, __aligned__(1)));
typedef char __v16qi_u
    __attribute__((__vector_size__(16), __may_alias__, __aligned__(1)));

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi8(__m256i __W, __mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquqi256_mask((__v32qi)__A, (__v32qi)__W,
                                                  (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi8(__mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquqi256_mask(
      (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi8(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquqi128_mask((__v16qi)__A, (__v16qi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi8(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquqi128_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi8(void *__P, __m256i __A) {
  *(__v32qi_u *)__P = (__v32qi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi8(void *__P, __mmask32 __U, __m256i __A) {
  __builtin_ia32_storedquqi256_mask((char *)__P, (__v32qi)__A, (__mmask32)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi8(void *__P, __m128i __A) {
  *(__v16qi_u *)__P = (__v16qi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi8(void *__P, __mmask16 __U, __m128i __A) {
  __builtin_ia32_storedquqi128_mask((char *)__P, (__v16qi)__A, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi16(void const *__P) {
  return (__m256i)(*(__v16hi_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi16(__m256i __W, __mmask16 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquhi256_mask(
      (const short *)__P, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi16(__mmask16 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquhi256_mask(
      (const short *)__P, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi16(void const *__P) {
  return (__m128i)(*(__v8hi_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi16(__m128i __W, __mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquhi128_mask((const short *)__P,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi16(__mmask8 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquhi128_mask(
      (const short *)__P, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_mov_epi16(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquhi256_mask((__v16hi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mov_epi16(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_movdquhi256_mask(
      (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mov_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquhi128_mask((__v8hi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mov_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_movdquhi128_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_loadu_epi8(void const *__P) {
  return (__m256i)(*(__v32qi_u *)__P);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_loadu_epi8(__m256i __W, __mmask32 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquqi256_mask(
      (const char *)__P, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_loadu_epi8(__mmask32 __U, void const *__P) {
  return (__m256i)__builtin_ia32_loaddquqi256_mask(
      (const char *)__P, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadu_epi8(void const *__P) {
  return (__m128i)(*(__v16qi_u *)__P);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_loadu_epi8(__m128i __W, __mmask16 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquqi128_mask(
      (const char *)__P, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_loadu_epi8(__mmask16 __U, void const *__P) {
  return (__m128i)__builtin_ia32_loaddquqi128_mask(
      (const char *)__P, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi16_epi8(__m256i __A) {

  return (__m128i)__builtin_ia32_pmovwb256_mask(
      (__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_storeu_epi8(void *__P, __mmask16 __M, __m256i __A) {
  __builtin_ia32_pmovwb256mem_mask((__v16qi *)__P, (__v16hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovwb256_mask((__v16hi)__A, (__v16qi)__O,
                                                __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi16_epi8(__mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovwb256_mask(
      (__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtsepi16_epi8(__m128i __A) {

  return (__m128i)__builtin_ia32_pmovswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi16_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovswb128mem_mask((unsigned long long *)__P, (__v8hi)__A,
                                    __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtsepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovswb128_mask((__v8hi)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtsepi16_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtsepi16_epi8(__m256i __A) {

  return (__m128i)__builtin_ia32_pmovswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi16_storeu_epi8(void *__P, __mmask16 __M, __m256i __A) {
  __builtin_ia32_pmovswb256mem_mask((__v16qi *)__P, (__v16hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtsepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovswb256_mask((__v16hi)__A, (__v16qi)__O,
                                                 __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtsepi16_epi8(__mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtusepi16_epi8(__m128i __A) {

  return (__m128i)__builtin_ia32_pmovuswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi16_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovuswb128mem_mask((unsigned long long *)__P, (__v8hi)__A,
                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtusepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovuswb128_mask((__v8hi)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtusepi16_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovuswb128_mask(
      (__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtusepi16_epi8(__m256i __A) {

  return (__m128i)__builtin_ia32_pmovuswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi16_storeu_epi8(void *__P, __mmask16 __M, __m256i __A) {
  __builtin_ia32_pmovuswb256mem_mask((__v16qi *)__P, (__v16hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtusepi16_epi8(__m128i __O, __mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovuswb256_mask((__v16hi)__A, (__v16qi)__O,
                                                  __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtusepi16_epi8(__mmask16 __M, __m256i __A) {
  return (__m128i)__builtin_ia32_pmovuswb256_mask(
      (__v16hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastb_epi8(__m256i __O, __mmask32 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_mask((__v16qi)__A, (__v32qi)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastb_epi8(__mmask32 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_mask(
      (__v16qi)__A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi8(__m256i __O, __mmask32 __M, char __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_gpr_mask(__A, (__v32qi)__O,
                                                         __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi8(__mmask32 __M, char __A) {
  return (__m256i)__builtin_ia32_pbroadcastb256_gpr_mask(
      __A, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastb_epi8(__m128i __O, __mmask16 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_mask((__v16qi)__A, (__v16qi)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastb_epi8(__mmask16 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi8(__m128i __O, __mmask16 __M, char __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_gpr_mask(__A, (__v16qi)__O,
                                                         __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi8(__mmask16 __M, char __A) {
  return (__m128i)__builtin_ia32_pbroadcastb128_gpr_mask(
      __A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcastw_epi16(__m256i __O, __mmask16 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_mask((__v8hi)__A, (__v16hi)__O,
                                                     __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcastw_epi16(__mmask16 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_mask(
      (__v8hi)__A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_set1_epi16(__m256i __O, __mmask16 __M, short __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_gpr_mask(__A, (__v16hi)__O,
                                                         __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_set1_epi16(__mmask16 __M, short __A) {
  return (__m256i)__builtin_ia32_pbroadcastw256_gpr_mask(
      __A, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcastw_epi16(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_mask((__v8hi)__A, (__v8hi)__O,
                                                     __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcastw_epi16(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_set1_epi16(__m128i __O, __mmask8 __M, short __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_gpr_mask(__A, (__v8hi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_set1_epi16(__mmask8 __M, short __A) {
  return (__m128i)__builtin_ia32_pbroadcastw128_gpr_mask(
      __A, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi16(__m256i __W, __mmask16 __M, __m256i __A,
                                  __m256i __B) {
  return (__m256i)__builtin_ia32_permvarhi256_mask(
      (__v16hi)__B, (__v16hi)__A, (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutexvar_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarhi128_mask(
      (__v8hi)__B, (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutexvar_epi16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarhi128_mask(
      (__v8hi)__B, (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutexvar_epi16(__m128i __W, __mmask8 __M, __m128i __A,
                               __m128i __B) {
  return (__m128i)__builtin_ia32_permvarhi128_mask((__v8hi)__B, (__v8hi)__A,
                                                   (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi16(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varhi256_mask(
      (__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi16(__m256i __A, __mmask16 __U, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varhi256_mask(
      (__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi16(__m256i __A, __m256i __I, __mmask16 __U,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2varhi256_mask(
      (__v16hi)__A, (__v16hi)__I, (__v16hi)__B, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi16(__mmask16 __U, __m256i __A, __m256i __I,
                                    __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varhi256_maskz(
      (__v16hi)__I, (__v16hi)__A, (__v16hi)__B, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi16(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varhi128_mask(
      (__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi16(__m128i __A, __mmask8 __U, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varhi128_mask(
      (__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi16(__m128i __A, __m128i __I, __mmask8 __U,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2varhi128_mask(
      (__v8hi)__A, (__v8hi)__I, (__v8hi)__B, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi16(__mmask8 __U, __m128i __A, __m128i __I,
                                 __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varhi128_maskz(
      (__v8hi)__I, (__v8hi)__A, (__v8hi)__B, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_maddubs_epi16(__m256i __W, __mmask16 __U, __m256i __X,
                              __m256i __Y) {
  return (__m256i)__builtin_ia32_pmaddubsw256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_maddubs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmaddubsw256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_maddubs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaddubsw128_mask((__v16qi)__X, (__v16qi)__Y,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_maddubs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmaddubsw128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_madd_epi16(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaddwd256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v8si)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_madd_epi16(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaddwd256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v8si)_mm256_setzero_si256(),
                                                 (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_madd_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaddwd128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v4si)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_madd_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaddwd128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v4si)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi8_mask(__m128i __A) {
  return (__mmask16)__builtin_ia32_cvtb2mask128((__v16qi)__A);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi8_mask(__m256i __A) {
  return (__mmask32)__builtin_ia32_cvtb2mask256((__v32qi)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi16_mask(__m128i __A) {
  return (__mmask8)__builtin_ia32_cvtw2mask128((__v8hi)__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi16_mask(__m256i __A) {
  return (__mmask16)__builtin_ia32_cvtw2mask256((__v16hi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi8(__mmask16 __A) {
  return (__m128i)__builtin_ia32_cvtmask2b128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi8(__mmask32 __A) {
  return (__m256i)__builtin_ia32_cvtmask2b256(__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi16(__mmask8 __A) {
  return (__m128i)__builtin_ia32_cvtmask2w128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi16(__mmask16 __A) {
  return (__m256i)__builtin_ia32_cvtmask2w256(__A);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestmb128((__v16qi)__A, (__v16qi)__B,
                                              (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestmb128((__v16qi)__A, (__v16qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestmb256((__v32qi)__A, (__v32qi)__B,
                                              (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestmb256((__v32qi)__A, (__v32qi)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_test_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmw128((__v8hi)__A, (__v8hi)__B,
                                             (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_test_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestmw128((__v8hi)__A, (__v8hi)__B, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_test_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestmw256((__v16hi)__A, (__v16hi)__B,
                                              (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_test_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestmw256((__v16hi)__A, (__v16hi)__B, __U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_min_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminuw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_min_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxub128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxub128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_max_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epu8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epu8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminub256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epu8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminub128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epu8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminub128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_min_epi8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_min_epi8(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pminsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi8(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epi16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_max_epi16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epi16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_max_epu16(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_max_epu16(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmaxuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_max_epu16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_max_epu16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmaxuw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_min_epi16(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_min_epi16(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pminsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_alignr_epi8(__m256i __W, __mmask32 __U, __m256i __A,
                            __m256i __B, const int __N) {
  return (__m256i)__builtin_ia32_palignr256_mask(
      (__v4di)__A, (__v4di)__B, __N * 8, (__v4di)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_alignr_epi8(__mmask32 __U, __m256i __A, __m256i __B,
                             const int __N) {
  return (__m256i)__builtin_ia32_palignr256_mask(
      (__v4di)__A, (__v4di)__B, __N * 8, (__v4di)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_alignr_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B,
                         const int __N) {
  return (__m128i)__builtin_ia32_palignr128_mask(
      (__v2di)__A, (__v2di)__B, __N * 8, (__v2di)__W, (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_alignr_epi8(__mmask16 __U, __m128i __A, __m128i __B, const int __N) {
  return (__m128i)__builtin_ia32_palignr128_mask(
      (__v2di)__A, (__v2di)__B, __N * 8, (__v2di)_mm_setzero_si128(),
      (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dbsad_epu8(__m256i __A, __m256i __B, const int __imm) {
  return (__m256i)__builtin_ia32_dbpsadbw256_mask(
      (__v32qi)__A, (__v32qi)__B, __imm, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_dbsad_epu8(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B,
                           const int __imm) {
  return (__m256i)__builtin_ia32_dbpsadbw256_mask(
      (__v32qi)__A, (__v32qi)__B, __imm, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_dbsad_epu8(__mmask16 __U, __m256i __A, __m256i __B,
                            const int __imm) {
  return (__m256i)__builtin_ia32_dbpsadbw256_mask(
      (__v32qi)__A, (__v32qi)__B, __imm, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dbsad_epu8(__m128i __A, __m128i __B, const int __imm) {
  return (__m128i)__builtin_ia32_dbpsadbw128_mask(
      (__v16qi)__A, (__v16qi)__B, __imm, (__v8hi)_mm_setzero_si128(),
      (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dbsad_epu8(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B,
                        const int __imm) {
  return (__m128i)__builtin_ia32_dbpsadbw128_mask(
      (__v16qi)__A, (__v16qi)__B, __imm, (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dbsad_epu8(__mmask8 __U, __m128i __A, __m128i __B, const int __imm) {
  return (__m128i)__builtin_ia32_dbpsadbw128_mask(
      (__v16qi)__A, (__v16qi)__B, __imm, (__v8hi)_mm_setzero_si128(),
      (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_epi16(__mmask8 __U, __m128i __A, __m128i __W) {
  return (__m128i)__builtin_ia32_blendmw_128_mask((__v8hi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_blend_epi8(__mmask16 __U, __m128i __A, __m128i __W) {
  return (__m128i)__builtin_ia32_blendmb_128_mask((__v16qi)__A, (__v16qi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_epi16(__mmask16 __U, __m256i __A, __m256i __W) {
  return (__m256i)__builtin_ia32_blendmw_256_mask((__v16hi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_blend_epi8(__mmask32 __U, __m256i __A, __m256i __W) {
  return (__m256i)__builtin_ia32_blendmb_256_mask((__v32qi)__A, (__v32qi)__W,
                                                  (__mmask32)__U);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_epi16_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P,
                                               (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epi16_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P,
                                               (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epi16_mask(__mmask16 __U, __m256i __X, __m256i __Y,
                               const int __P) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, __P,
                                                (__mmask16)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epi16_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, __P,
                                                (__mmask16)-1);
}

extern __inline __mmask16 __attribute__((__gnu_inline__, __always_inline__,
                                         __artificial__))
_mm_mask_cmp_epi8_mask(__mmask16 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, __P,
                                                (__mmask16)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epi8_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, __P,
                                                (__mmask16)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epi8_mask(__mmask32 __U, __m256i __X, __m256i __Y,
                              const int __P) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, __P,
                                                (__mmask32)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epi8_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, __P,
                                                (__mmask32)-1);
}

extern __inline __mmask8 __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm_mask_cmp_epu16_mask(__mmask8 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P,
                                                (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epu16_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, __P,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epu16_mask(__mmask16 __U, __m256i __X, __m256i __Y,
                               const int __P) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y,
                                                 __P, (__mmask16)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epu16_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y,
                                                 __P, (__mmask16)-1);
}

extern __inline __mmask16 __attribute__((__gnu_inline__, __always_inline__,
                                         __artificial__))
_mm_mask_cmp_epu8_mask(__mmask16 __U, __m128i __X, __m128i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y,
                                                 __P, (__mmask16)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmp_epu8_mask(__m128i __X, __m128i __Y, const int __P) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y,
                                                 __P, (__mmask16)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmp_epu8_mask(__mmask32 __U, __m256i __X, __m256i __Y,
                              const int __P) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y,
                                                 __P, (__mmask32)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmp_epu8_mask(__m256i __X, __m256i __Y, const int __P) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y,
                                                 __P, (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srli_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                           const int __imm) {
  return (__m256i)__builtin_ia32_psrlwi256_mask((__v16hi)__A, __imm,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srli_epi16(__mmask16 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psrlwi256_mask(
      (__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_srli_epi16(__m128i __W, __mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrlwi128_mask((__v8hi)__A, __imm, (__v8hi)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srli_epi16(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrlwi128_mask(
      (__v8hi)__A, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shufflehi_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                                const int __imm) {
  return (__m256i)__builtin_ia32_pshufhw256_mask((__v16hi)__A, __imm,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shufflehi_epi16(__mmask16 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_pshufhw256_mask(
      (__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shufflehi_epi16(__m128i __W, __mmask8 __U, __m128i __A,
                             const int __imm) {
  return (__m128i)__builtin_ia32_pshufhw128_mask((__v8hi)__A, __imm,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shufflehi_epi16(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_pshufhw128_mask(
      (__v8hi)__A, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shufflelo_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                                const int __imm) {
  return (__m256i)__builtin_ia32_pshuflw256_mask((__v16hi)__A, __imm,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shufflelo_epi16(__mmask16 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_pshuflw256_mask(
      (__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shufflelo_epi16(__m128i __W, __mmask8 __U, __m128i __A,
                             const int __imm) {
  return (__m128i)__builtin_ia32_pshuflw128_mask((__v8hi)__A, __imm,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shufflelo_epi16(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_pshuflw128_mask(
      (__v8hi)__A, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_srai_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                           const int __imm) {
  return (__m256i)__builtin_ia32_psrawi256_mask((__v16hi)__A, __imm,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srai_epi16(__mmask16 __U, __m256i __A, const int __imm) {
  return (__m256i)__builtin_ia32_psrawi256_mask(
      (__v16hi)__A, __imm, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_srai_epi16(__m128i __W, __mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrawi128_mask((__v8hi)__A, __imm, (__v8hi)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srai_epi16(__mmask8 __U, __m128i __A, const int __imm) {
  return (__m128i)__builtin_ia32_psrawi128_mask(
      (__v8hi)__A, __imm, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_slli_epi16(__m256i __W, __mmask16 __U, __m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllwi256_mask((__v16hi)__A, __B, (__v16hi)__W,
                                                (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_slli_epi16(__mmask16 __U, __m256i __A, int __B) {
  return (__m256i)__builtin_ia32_psllwi256_mask(
      (__v16hi)__A, __B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_slli_epi16(__m128i __W, __mmask8 __U, __m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllwi128_mask((__v8hi)__A, __B, (__v8hi)__W,
                                                (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_slli_epi16(__mmask8 __U, __m128i __A, int __B) {
  return (__m128i)__builtin_ia32_psllwi128_mask(
      (__v8hi)__A, __B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}
extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                (__mmask32)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epi16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                 (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epu16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                                (__mmask8)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi8_mask(__m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                (__mmask16)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpneq_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmplt_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpge_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                               (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmple_epi16_mask(__m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                               (__mmask8)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mulhrs_epi16(__m256i __W, __mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmulhrsw256_mask((__v16hi)__X, (__v16hi)__Y,
                                                  (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mulhrs_epi16(__mmask16 __U, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_pmulhrsw256_mask(
      (__v16hi)__X, (__v16hi)__Y, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mulhi_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhuw256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mulhi_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhuw256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mulhi_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mulhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmulhw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mulhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mulhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mulhi_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhuw128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mulhi_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmulhuw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mulhrs_epi16(__m128i __W, __mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmulhrsw128_mask((__v8hi)__X, (__v8hi)__Y,
                                                  (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mulhrs_epi16(__mmask8 __U, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_pmulhrsw128_mask(
      (__v8hi)__X, (__v8hi)__Y, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mullo_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mullo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mullo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mullo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi8_epi16(__m256i __W, __mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbw256_mask((__v16qi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi8_epi16(__mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovsxbw256_mask(
      (__v16qi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi8_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbw128_mask((__v16qi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi8_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovsxbw128_mask(
      (__v16qi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu8_epi16(__m256i __W, __mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbw256_mask((__v16qi)__A, (__v16hi)__W,
                                                  (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu8_epi16(__mmask16 __U, __m128i __A) {
  return (__m256i)__builtin_ia32_pmovzxbw256_mask(
      (__v16qi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu8_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbw128_mask((__v16qi)__A, (__v8hi)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu8_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovzxbw128_mask(
      (__v16qi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_avg_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_avg_epu8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)_mm256_setzero_si256(),
                                               (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_avg_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgb128_mask((__v16qi)__A, (__v16qi)__B,
                                               (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_avg_epu8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_avg_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_avg_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pavgw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_avg_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_avg_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pavgw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_add_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)_mm256_setzero_si256(),
                                               (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_add_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_add_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusb256_mask((__v32qi)__A, (__v32qi)__B,
                                                 (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epu8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_adds_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusw256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_adds_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_paddusw256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_sub_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubb256_mask((__v32qi)__A, (__v32qi)__B,
                                               (__v32qi)_mm256_setzero_si256(),
                                               (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sub_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sub_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubw256_mask((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubsw256_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epu8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusb256_mask((__v32qi)__A, (__v32qi)__B,
                                                 (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epu8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_subs_epu16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusw256_mask((__v16hi)__A, (__v16hi)__B,
                                                 (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_subs_epu16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psubusw256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddb128_mask((__v16qi)__A, (__v16qi)__B,
                                               (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_add_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_add_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi8(__m256i __W, __mmask32 __U, __m256i __A,
                              __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpackhi_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpackhi_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpckhwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpackhi_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhwd128_mask((__v8hi)__A, (__v8hi)__B,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpackhi_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpckhwd128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi8(__m256i __W, __mmask32 __U, __m256i __A,
                              __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklbw256_mask(
      (__v32qi)__A, (__v32qi)__B, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklbw128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_unpacklo_epi16(__m256i __W, __mmask16 __U, __m256i __A,
                               __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_unpacklo_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_punpcklwd256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_unpacklo_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklwd128_mask((__v8hi)__A, (__v8hi)__B,
                                                   (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_unpacklo_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_punpcklwd128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 0,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 0,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 0,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 0,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpeqb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epu16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 0,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpeq_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epu16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 0,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpeq_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpeqw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epu16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 0,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpeq_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epu16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 0,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpeq_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpeqw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 6,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__A, (__v16qi)__B, 6,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtb128_mask((__v16qi)__A, (__v16qi)__B,
                                                   __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 6,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__A, (__v32qi)__B, 6,
                                                 __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_pcmpgtb256_mask((__v32qi)__A, (__v32qi)__B,
                                                   __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epu16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 6,
                                                (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cmpgt_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epu16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__A, (__v8hi)__B, 6,
                                                __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpgt_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_pcmpgtw128_mask((__v8hi)__A, (__v8hi)__B,
                                                  __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epu16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 6,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpgt_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epu16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__A, (__v16hi)__B, 6,
                                                 __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpgt_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_pcmpgtw256_mask((__v16hi)__A, (__v16hi)__B,
                                                   __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi8_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestnmb128((__v16qi)__A, (__v16qi)__B,
                                               (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi8_mask(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_ptestnmb128((__v16qi)__A, (__v16qi)__B, __U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi8_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestnmb256((__v32qi)__A, (__v32qi)__B,
                                               (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi8_mask(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_ptestnmb256((__v32qi)__A, (__v32qi)__B, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_testn_epi16_mask(__m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmw128((__v8hi)__A, (__v8hi)__B,
                                              (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_testn_epi16_mask(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__mmask8)__builtin_ia32_ptestnmw128((__v8hi)__A, (__v8hi)__B, __U);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_testn_epi16_mask(__m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestnmw256((__v16hi)__A, (__v16hi)__B,
                                               (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_testn_epi16_mask(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__mmask16)__builtin_ia32_ptestnmw256((__v16hi)__A, (__v16hi)__B, __U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shuffle_epi8(__m256i __W, __mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pshufb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shuffle_epi8(__mmask32 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pshufb256_mask((__v32qi)__A, (__v32qi)__B,
                                                (__v32qi)_mm256_setzero_si256(),
                                                (__mmask32)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_shuffle_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pshufb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shuffle_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pshufb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packs_epi16(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packsswb256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packs_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packsswb256_mask((__v16hi)__A, (__v16hi)__B,
                                                  (__v32qi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packs_epi16(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packsswb128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_packs_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packsswb128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__v16qi)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packus_epi16(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packuswb256_mask(
      (__v16hi)__A, (__v16hi)__B, (__v32qi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packus_epi16(__m256i __W, __mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packuswb256_mask((__v16hi)__A, (__v16hi)__B,
                                                  (__v32qi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packus_epi16(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packuswb128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_packus_epi16(__m128i __W, __mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packuswb128_mask((__v8hi)__A, (__v8hi)__B,
                                                  (__v16qi)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi8(__m256i __W, __mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsb256_mask((__v32qi)__A, (__v32qi)__W,
                                               (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi8(__mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsb256_mask(
      (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi8(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsb128_mask((__v16qi)__A, (__v16qi)__W,
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi8(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsb128_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_abs_epi16(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsw256_mask((__v16hi)__A, (__v16hi)__W,
                                               (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_abs_epi16(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_pabsw256_mask(
      (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_abs_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsw128_mask((__v8hi)__A, (__v8hi)__W,
                                               (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_abs_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_pabsw128_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                 (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu8_mask(__m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                 (__mmask32)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpneq_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmplt_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmpge_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                 (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cmple_epu16_mask(__m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                 (__mmask16)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_storeu_epi16(void *__P, __m256i __A) {
  *(__v16hi_u *)__P = (__v16hi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_storeu_epi16(void *__P, __mmask16 __U, __m256i __A) {
  __builtin_ia32_storedquhi256_mask((short *)__P, (__v16hi)__A, (__mmask16)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_storeu_epi16(void *__P, __m128i __A) {
  *(__v8hi_u *)__P = (__v8hi_u)__A;
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_storeu_epi16(void *__P, __mmask8 __U, __m128i __A) {
  __builtin_ia32_storedquhi128_mask((short *)__P, (__v8hi)__A, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsw128_mask((__v8hi)__A, (__v8hi)__B,
                                                (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusb128_mask((__v16qi)__A, (__v16qi)__B,
                                                 (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epu8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_subs_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusw128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_subs_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubusw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srl_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srl_epi16(__mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psrlw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srl_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srl_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sra_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sra_epi16(__mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psraw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sra_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sra_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psraw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epu8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusb128_mask((__v16qi)__A, (__v16qi)__B,
                                                 (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epu8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epu16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusw128_mask((__v8hi)__A, (__v8hi)__B,
                                                 (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epu16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddusw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubb128_mask((__v16qi)__A, (__v16qi)__B,
                                               (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sub_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sub_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psubw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_adds_epi8(__m128i __W, __mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsb128_mask((__v16qi)__A, (__v16qi)__B,
                                                (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_adds_epi8(__mmask16 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_paddsb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi16_epi8(__m128i __A) {

  return (__m128i)__builtin_ia32_pmovwb128_mask(
      (__v8hi)__A, (__v16qi)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_storeu_epi8(void *__P, __mmask8 __M, __m128i __A) {
  __builtin_ia32_pmovwb128mem_mask((unsigned long long *)__P, (__v8hi)__A, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi16_epi8(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovwb128_mask((__v8hi)__A, (__v16qi)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi16_epi8(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_pmovwb128_mask(
      (__v8hi)__A, (__v16qi)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srav_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srav_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srav_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrav16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srav_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrav8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srav_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrav8hi_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srav_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrav8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_srlv_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_srlv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_srlv_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psrlv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_srlv_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_srlv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlv8hi_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_srlv_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psrlv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_sllv_epi16(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)-1);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sllv_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sllv_epi16(__mmask16 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_psllv16hi_mask((__v16hi)__A, (__v16hi)__B,
                                                (__v16hi)_mm256_setzero_si256(),
                                                (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sllv_epi16(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sllv_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllv8hi_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sllv_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllv8hi_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_sll_epi16(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllw128_mask((__v8hi)__A, (__v8hi)__B,
                                               (__v8hi)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_sll_epi16(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_psllw128_mask(
      (__v8hi)__A, (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_sll_epi16(__m256i __W, __mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_sll_epi16(__mmask16 __U, __m256i __A, __m128i __B) {
  return (__m256i)__builtin_ia32_psllw256_mask((__v16hi)__A, (__v8hi)__B,
                                               (__v16hi)_mm256_setzero_si256(),
                                               (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packus_epi32(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packusdw256_mask(
      (__v8si)__A, (__v8si)__B, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packus_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packusdw256_mask((__v8si)__A, (__v8si)__B,
                                                  (__v16hi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packus_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packusdw128_mask(
      (__v4si)__A, (__v4si)__B, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_packus_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packusdw128_mask((__v4si)__A, (__v4si)__B,
                                                  (__v8hi)__W, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_packs_epi32(__mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packssdw256_mask(
      (__v8si)__A, (__v8si)__B, (__v16hi)_mm256_setzero_si256(), __M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_packs_epi32(__m256i __W, __mmask16 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_packssdw256_mask((__v8si)__A, (__v8si)__B,
                                                  (__v16hi)__W, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_packs_epi32(__mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packssdw128_mask(
      (__v4si)__A, (__v4si)__B, (__v8hi)_mm_setzero_si128(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_packs_epi32(__m128i __W, __mmask8 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_packssdw128_mask((__v4si)__A, (__v4si)__B,
                                                  (__v8hi)__W, __M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_ucmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                 (__mmask16)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                                (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epu16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_ucmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                                (__mmask8)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 4,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 1,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 5,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi8_mask(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__mmask16)__builtin_ia32_cmpb128_mask((__v16qi)__X, (__v16qi)__Y, 2,
                                                (__mmask16)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpneq_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 4,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmplt_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 1,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmpge_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 5,
                                               (__mmask8)__M);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cmple_epi16_mask(__mmask8 __M, __m128i __X, __m128i __Y) {
  return (__mmask8)__builtin_ia32_cmpw128_mask((__v8hi)__X, (__v8hi)__Y, 2,
                                               (__mmask8)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                 (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_ucmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                 (__mmask32)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                 (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epu16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_ucmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                 (__mmask16)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 4,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 1,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 5,
                                                (__mmask32)__M);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi8_mask(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__mmask32)__builtin_ia32_cmpb256_mask((__v32qi)__X, (__v32qi)__Y, 2,
                                                (__mmask32)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpneq_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 4,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmplt_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 1,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmpge_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 5,
                                                (__mmask16)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cmple_epi16_mask(__mmask16 __M, __m256i __X, __m256i __Y) {
  return (__mmask16)__builtin_ia32_cmpw256_mask((__v16hi)__X, (__v16hi)__Y, 2,
                                                (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epi64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epi64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2qq256_mask((__v4df)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epi64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epi64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epi64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2qq128_mask((__v2df)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epi64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttpd_epu64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttpd_epu64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2uqq256_mask((__v4df)__A, (__v4di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttpd_epu64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvttpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttpd_epu64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttpd_epu64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2uqq128_mask((__v2df)__A, (__v2di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttpd_epu64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvttpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epi64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epi64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2qq256_mask((__v4df)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epi64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2qq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epi64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epi64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2qq128_mask((__v2df)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epi64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2qq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtpd_epu64(__m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtpd_epu64(__m256i __W, __mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2uqq256_mask((__v4df)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtpd_epu64(__mmask8 __U, __m256d __A) {
  return (__m256i)__builtin_ia32_cvtpd2uqq256_mask(
      (__v4df)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtpd_epu64(__m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtpd_epu64(__m128i __W, __mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2uqq128_mask((__v2df)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtpd_epu64(__mmask8 __U, __m128d __A) {
  return (__m128i)__builtin_ia32_cvtpd2uqq128_mask(
      (__v2df)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epi64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epi64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2qq256_mask((__v4sf)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epi64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epi64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epi64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2qq128_mask((__v4sf)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epi64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvttps_epu64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvttps_epu64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2uqq256_mask((__v4sf)__A, (__v4di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvttps_epu64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvttps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvttps_epu64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvttps_epu64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2uqq128_mask((__v4sf)__A, (__v2di)__W,
                                                    (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvttps_epu64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvttps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_f64x2(__m128d __A) {
  return (__m256d)__builtin_ia32_broadcastf64x2_256_mask(
      (__v2df)__A, (__v4df)_mm256_undefined_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_f64x2(__m256d __O, __mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastf64x2_256_mask((__v2df)__A,
                                                         (__v4df)__O, __M);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_f64x2(__mmask8 __M, __m128d __A) {
  return (__m256d)__builtin_ia32_broadcastf64x2_256_mask(
      (__v2df)__A, (__v4df)_mm256_setzero_ps(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_i64x2(__m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti64x2_256_mask(
      (__v2di)__A, (__v4di)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_i64x2(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti64x2_256_mask((__v2di)__A,
                                                         (__v4di)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_i64x2(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti64x2_256_mask(
      (__v2di)__A, (__v4di)_mm256_setzero_si256(), __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_f32x2(__m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x2_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_undefined_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_f32x2(__m256 __O, __mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x2_256_mask((__v4sf)__A,
                                                        (__v8sf)__O, __M);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_f32x2(__mmask8 __M, __m128 __A) {
  return (__m256)__builtin_ia32_broadcastf32x2_256_mask(
      (__v4sf)__A, (__v8sf)_mm256_setzero_ps(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_broadcast_i32x2(__m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x2_256_mask(
      (__v4si)__A, (__v8si)_mm256_undefined_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_broadcast_i32x2(__m256i __O, __mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x2_256_mask((__v4si)__A,
                                                         (__v8si)__O, __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_broadcast_i32x2(__mmask8 __M, __m128i __A) {
  return (__m256i)__builtin_ia32_broadcasti32x2_256_mask(
      (__v4si)__A, (__v8si)_mm256_setzero_si256(), __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_broadcast_i32x2(__m128i __A) {
  return (__m128i)__builtin_ia32_broadcasti32x2_128_mask(
      (__v4si)__A, (__v4si)_mm_undefined_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_broadcast_i32x2(__m128i __O, __mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_broadcasti32x2_128_mask((__v4si)__A,
                                                         (__v4si)__O, __M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_broadcast_i32x2(__mmask8 __M, __m128i __A) {
  return (__m128i)__builtin_ia32_broadcasti32x2_128_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), __M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mullo_epi64(__m256i __A, __m256i __B) {
  return (__m256i)((__v4du)__A * (__v4du)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_mullo_epi64(__m256i __W, __mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullq256_mask((__v4di)__A, (__v4di)__B,
                                                (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_mullo_epi64(__mmask8 __U, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_pmullq256_mask(
      (__v4di)__A, (__v4di)__B, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mullo_epi64(__m128i __A, __m128i __B) {
  return (__m128i)((__v2du)__A * (__v2du)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_mullo_epi64(__m128i __W, __mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullq128_mask((__v2di)__A, (__v2di)__B,
                                                (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_mullo_epi64(__mmask8 __U, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_pmullq128_mask(
      (__v2di)__A, (__v2di)__B, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_andnot_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andnpd256_mask((__v4df)__A, (__v4df)__B,
                                                (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andnpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andnpd128_mask((__v2df)__A, (__v2df)__B,
                                                (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andnpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_andnot_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andnps256_mask((__v8sf)__A, (__v8sf)__B,
                                               (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_andnot_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andnps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_andnot_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andnps128_mask((__v4sf)__A, (__v4sf)__B,
                                               (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_andnot_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andnps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epi64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epi64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2qq256_mask((__v4sf)__A, (__v4di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epi64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2qq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epi64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epi64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2qq128_mask((__v4sf)__A, (__v2di)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epi64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2qq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_epu64(__m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtps_epu64(__m256i __W, __mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2uqq256_mask((__v4sf)__A, (__v4di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtps_epu64(__mmask8 __U, __m128 __A) {
  return (__m256i)__builtin_ia32_cvtps2uqq256_mask(
      (__v4sf)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_epu64(__m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtps_epu64(__m128i __W, __mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2uqq128_mask((__v4sf)__A, (__v2di)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtps_epu64(__mmask8 __U, __m128 __A) {
  return (__m128i)__builtin_ia32_cvtps2uqq128_mask(
      (__v4sf)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_ps(__m256i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_ps(__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps256_mask((__v4di)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_ps(__mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps128_mask((__v2di)__A, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu64_ps(__m256i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu64_ps(__m128 __W, __mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps256_mask((__v4di)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu64_ps(__mmask8 __U, __m256i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps256_mask(
      (__v4di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu64_ps(__m128i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu64_ps(__m128 __W, __mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps128_mask((__v2di)__A, (__v4sf)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu64_ps(__mmask8 __U, __m128i __A) {
  return (__m128)__builtin_ia32_cvtuqq2ps128_mask(
      (__v2di)__A, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepi64_pd(__m256i __A) {
  return (__m256d)__builtin_ia32_cvtqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepi64_pd(__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtqq2pd256_mask((__v4di)__A, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepi64_pd(__mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepi64_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepi64_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtqq2pd128_mask((__v2di)__A, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepi64_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtepu64_pd(__m256i __A) {
  return (__m256d)__builtin_ia32_cvtuqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtepu64_pd(__m256d __W, __mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtuqq2pd256_mask((__v4di)__A, (__v4df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtepu64_pd(__mmask8 __U, __m256i __A) {
  return (__m256d)__builtin_ia32_cvtuqq2pd256_mask(
      (__v4di)__A, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_andpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_andpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_and_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_and_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_andps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_and_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_and_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_andps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtepu64_pd(__m128i __A) {
  return (__m128d)__builtin_ia32_cvtuqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtepu64_pd(__m128d __W, __mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtuqq2pd128_mask((__v2di)__A, (__v2df)__W,
                                                   (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtepu64_pd(__mmask8 __U, __m128i __A) {
  return (__m128d)__builtin_ia32_cvtuqq2pd128_mask(
      (__v2di)__A, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_xorpd256_mask((__v4df)__A, (__v4df)__B,
                                               (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_xorpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_xorpd128_mask((__v2df)__A, (__v2df)__B,
                                               (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_xorpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_xor_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_xorps256_mask((__v8sf)__A, (__v8sf)__B,
                                              (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_xor_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_xorps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_xor_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_xorps128_mask((__v4sf)__A, (__v4sf)__B,
                                              (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_xor_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_xorps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_orpd256_mask((__v4df)__A, (__v4df)__B,
                                              (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_pd(__mmask8 __U, __m256d __A, __m256d __B) {
  return (__m256d)__builtin_ia32_orpd256_mask(
      (__v4df)__A, (__v4df)__B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_orpd128_mask((__v2df)__A, (__v2df)__B,
                                              (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_pd(__mmask8 __U, __m128d __A, __m128d __B) {
  return (__m128d)__builtin_ia32_orpd128_mask(
      (__v2df)__A, (__v2df)__B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_or_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_orps256_mask((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_or_ps(__mmask8 __U, __m256 __A, __m256 __B) {
  return (__m256)__builtin_ia32_orps256_mask(
      (__v8sf)__A, (__v8sf)__B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_or_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_orps128_mask((__v4sf)__A, (__v4sf)__B,
                                             (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_or_ps(__mmask8 __U, __m128 __A, __m128 __B) {
  return (__m128)__builtin_ia32_orps128_mask(
      (__v4sf)__A, (__v4sf)__B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi32(__mmask8 __A) {
  return (__m128i)__builtin_ia32_cvtmask2d128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi32(__mmask8 __A) {
  return (__m256i)__builtin_ia32_cvtmask2d256(__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movm_epi64(__mmask8 __A) {
  return (__m128i)__builtin_ia32_cvtmask2q128(__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movm_epi64(__mmask8 __A) {
  return (__m256i)__builtin_ia32_cvtmask2q256(__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi32_mask(__m128i __A) {
  return (__mmask8)__builtin_ia32_cvtd2mask128((__v4si)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi32_mask(__m256i __A) {
  return (__mmask8)__builtin_ia32_cvtd2mask256((__v8si)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_movepi64_mask(__m128i __A) {
  return (__mmask8)__builtin_ia32_cvtq2mask128((__v2di)__A);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_movepi64_mask(__m256i __A) {
  return (__mmask8)__builtin_ia32_cvtq2mask256((__v4di)__A);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extractf64x2_pd(__m256d __A, const int __imm) {
  return (__m128d)__builtin_ia32_extractf64x2_256_mask(
      (__v4df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_extractf64x2_pd(__m128d __W, __mmask8 __U, __m256d __A,
                                const int __imm) {
  return (__m128d)__builtin_ia32_extractf64x2_256_mask(
      (__v4df)__A, __imm, (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_extractf64x2_pd(__mmask8 __U, __m256d __A, const int __imm) {
  return (__m128d)__builtin_ia32_extractf64x2_256_mask(
      (__v4df)__A, __imm, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_extracti64x2_epi64(__m256i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti64x2_256_mask(
      (__v4di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_extracti64x2_epi64(__m128i __W, __mmask8 __U, __m256i __A,
                                   const int __imm) {
  return (__m128i)__builtin_ia32_extracti64x2_256_mask(
      (__v4di)__A, __imm, (__v2di)__W, (__mmask8)__U);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_extracti64x2_epi64(__mmask8 __U, __m256i __A, const int __imm) {
  return (__m128i)__builtin_ia32_extracti64x2_256_mask(
      (__v4di)__A, __imm, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_reduce_pd(__m256d __A, int __B) {
  return (__m256d)__builtin_ia32_reducepd256_mask(
      (__v4df)__A, __B, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_reduce_pd(__m256d __W, __mmask8 __U, __m256d __A, int __B) {
  return (__m256d)__builtin_ia32_reducepd256_mask((__v4df)__A, __B, (__v4df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_reduce_pd(__mmask8 __U, __m256d __A, int __B) {
  return (__m256d)__builtin_ia32_reducepd256_mask(
      (__v4df)__A, __B, (__v4df)_mm256_setzero_pd(), (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_pd(__m128d __A, int __B) {
  return (__m128d)__builtin_ia32_reducepd128_mask(
      (__v2df)__A, __B, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_reduce_pd(__m128d __W, __mmask8 __U, __m128d __A, int __B) {
  return (__m128d)__builtin_ia32_reducepd128_mask((__v2df)__A, __B, (__v2df)__W,
                                                  (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_reduce_pd(__mmask8 __U, __m128d __A, int __B) {
  return (__m128d)__builtin_ia32_reducepd128_mask(
      (__v2df)__A, __B, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_reduce_ps(__m256 __A, int __B) {
  return (__m256)__builtin_ia32_reduceps256_mask(
      (__v8sf)__A, __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_reduce_ps(__m256 __W, __mmask8 __U, __m256 __A, int __B) {
  return (__m256)__builtin_ia32_reduceps256_mask((__v8sf)__A, __B, (__v8sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_reduce_ps(__mmask8 __U, __m256 __A, int __B) {
  return (__m256)__builtin_ia32_reduceps256_mask(
      (__v8sf)__A, __B, (__v8sf)_mm256_setzero_ps(), (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_reduce_ps(__m128 __A, int __B) {
  return (__m128)__builtin_ia32_reduceps128_mask(
      (__v4sf)__A, __B, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_reduce_ps(__m128 __W, __mmask8 __U, __m128 __A, int __B) {
  return (__m128)__builtin_ia32_reduceps128_mask((__v4sf)__A, __B, (__v4sf)__W,
                                                 (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_reduce_ps(__mmask8 __U, __m128 __A, int __B) {
  return (__m128)__builtin_ia32_reduceps128_mask(
      (__v4sf)__A, __B, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_range_pd(__m256d __A, __m256d __B, int __C) {
  return (__m256d)__builtin_ia32_rangepd256_mask(
      (__v4df)__A, (__v4df)__B, __C, (__v4df)_mm256_setzero_pd(), (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_range_pd(__m256d __W, __mmask8 __U, __m256d __A, __m256d __B,
                         int __C) {
  return (__m256d)__builtin_ia32_rangepd256_mask((__v4df)__A, (__v4df)__B, __C,
                                                 (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_range_pd(__mmask8 __U, __m256d __A, __m256d __B, int __C) {
  return (__m256d)__builtin_ia32_rangepd256_mask((__v4df)__A, (__v4df)__B, __C,
                                                 (__v4df)_mm256_setzero_pd(),
                                                 (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_range_pd(__m128d __A, __m128d __B, int __C) {
  return (__m128d)__builtin_ia32_rangepd128_mask(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)-1);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_range_pd(__m128d __W, __mmask8 __U, __m128d __A, __m128d __B,
                      int __C) {
  return (__m128d)__builtin_ia32_rangepd128_mask((__v2df)__A, (__v2df)__B, __C,
                                                 (__v2df)__W, (__mmask8)__U);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_range_pd(__mmask8 __U, __m128d __A, __m128d __B, int __C) {
  return (__m128d)__builtin_ia32_rangepd128_mask(
      (__v2df)__A, (__v2df)__B, __C, (__v2df)_mm_setzero_pd(), (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_range_ps(__m256 __A, __m256 __B, int __C) {
  return (__m256)__builtin_ia32_rangeps256_mask(
      (__v8sf)__A, (__v8sf)__B, __C, (__v8sf)_mm256_setzero_ps(), (__mmask8)-1);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_range_ps(__m256 __W, __mmask8 __U, __m256 __A, __m256 __B,
                         int __C) {
  return (__m256)__builtin_ia32_rangeps256_mask((__v8sf)__A, (__v8sf)__B, __C,
                                                (__v8sf)__W, (__mmask8)__U);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_range_ps(__mmask8 __U, __m256 __A, __m256 __B, int __C) {
  return (__m256)__builtin_ia32_rangeps256_mask((__v8sf)__A, (__v8sf)__B, __C,
                                                (__v8sf)_mm256_setzero_ps(),
                                                (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_range_ps(__m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_rangeps128_mask(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)-1);
}

extern __inline __m128 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm_mask_range_ps(__m128 __W, __mmask8 __U, __m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_rangeps128_mask((__v4sf)__A, (__v4sf)__B, __C,
                                                (__v4sf)__W, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_range_ps(__mmask8 __U, __m128 __A, __m128 __B, int __C) {
  return (__m128)__builtin_ia32_rangeps128_mask(
      (__v4sf)__A, (__v4sf)__B, __C, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fpclass_pd_mask(__mmask8 __U, __m256d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasspd256_mask((__v4df)__A, __imm, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fpclass_pd_mask(__m256d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasspd256_mask((__v4df)__A, __imm,
                                                    (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_fpclass_ps_mask(__mmask8 __U, __m256 __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclassps256_mask((__v8sf)__A, __imm, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fpclass_ps_mask(__m256 __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclassps256_mask((__v8sf)__A, __imm,
                                                    (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fpclass_pd_mask(__mmask8 __U, __m128d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasspd128_mask((__v2df)__A, __imm, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fpclass_pd_mask(__m128d __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclasspd128_mask((__v2df)__A, __imm,
                                                    (__mmask8)-1);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_fpclass_ps_mask(__mmask8 __U, __m128 __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclassps128_mask((__v4sf)__A, __imm, __U);
}

extern __inline __mmask8
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fpclass_ps_mask(__m128 __A, const int __imm) {
  return (__mmask8)__builtin_ia32_fpclassps128_mask((__v4sf)__A, __imm,
                                                    (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_inserti64x2(__m256i __A, __m128i __B, const int __imm) {
  return (__m256i)__builtin_ia32_inserti64x2_256_mask(
      (__v4di)__A, (__v2di)__B, __imm, (__v4di)_mm256_setzero_si256(),
      (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_inserti64x2(__m256i __W, __mmask8 __U, __m256i __A, __m128i __B,
                            const int __imm) {
  return (__m256i)__builtin_ia32_inserti64x2_256_mask(
      (__v4di)__A, (__v2di)__B, __imm, (__v4di)__W, (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_inserti64x2(__mmask8 __U, __m256i __A, __m128i __B,
                             const int __imm) {
  return (__m256i)__builtin_ia32_inserti64x2_256_mask(
      (__v4di)__A, (__v2di)__B, __imm, (__v4di)_mm256_setzero_si256(),
      (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_insertf64x2(__m256d __A, __m128d __B, const int __imm) {
  return (__m256d)__builtin_ia32_insertf64x2_256_mask(
      (__v4df)__A, (__v2df)__B, __imm, (__v4df)_mm256_setzero_pd(),
      (__mmask8)-1);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_insertf64x2(__m256d __W, __mmask8 __U, __m256d __A, __m128d __B,
                            const int __imm) {
  return (__m256d)__builtin_ia32_insertf64x2_256_mask(
      (__v4df)__A, (__v2df)__B, __imm, (__v4df)__W, (__mmask8)__U);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_insertf64x2(__mmask8 __U, __m256d __A, __m128d __B,
                             const int __imm) {
  return (__m256d)__builtin_ia32_insertf64x2_256_mask(
      (__v4df)__A, (__v2df)__B, __imm, (__v4df)_mm256_setzero_pd(),
      (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_madd52lo_epu64(__m512i __X, __m512i __Y, __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52luq512_mask((__v8di)__X, (__v8di)__Y,
                                                     (__v8di)__Z, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_madd52hi_epu64(__m512i __X, __m512i __Y, __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52huq512_mask((__v8di)__X, (__v8di)__Y,
                                                     (__v8di)__Z, (__mmask8)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_madd52lo_epu64(__m512i __W, __mmask8 __M, __m512i __X,
                               __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmadd52luq512_mask(
      (__v8di)__W, (__v8di)__X, (__v8di)__Y, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_madd52hi_epu64(__m512i __W, __mmask8 __M, __m512i __X,
                               __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmadd52huq512_mask(
      (__v8di)__W, (__v8di)__X, (__v8di)__Y, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_madd52lo_epu64(__mmask8 __M, __m512i __X, __m512i __Y,
                                __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52luq512_maskz(
      (__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_madd52hi_epu64(__mmask8 __M, __m512i __X, __m512i __Y,
                                __m512i __Z) {
  return (__m512i)__builtin_ia32_vpmadd52huq512_maskz(
      (__v8di)__X, (__v8di)__Y, (__v8di)__Z, (__mmask8)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd52lo_epu64(__m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52luq128_mask((__v2di)__X, (__v2di)__Y,
                                                     (__v2di)__Z, (__mmask8)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_madd52hi_epu64(__m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52huq128_mask((__v2di)__X, (__v2di)__Y,
                                                     (__v2di)__Z, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_madd52lo_epu64(__m256i __X, __m256i __Y, __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52luq256_mask((__v4di)__X, (__v4di)__Y,
                                                     (__v4di)__Z, (__mmask8)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_madd52hi_epu64(__m256i __X, __m256i __Y, __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52huq256_mask((__v4di)__X, (__v4di)__Y,
                                                     (__v4di)__Z, (__mmask8)-1);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_madd52lo_epu64(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmadd52luq128_mask(
      (__v2di)__W, (__v2di)__X, (__v2di)__Y, (__mmask8)__M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_madd52hi_epu64(__m128i __W, __mmask8 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmadd52huq128_mask(
      (__v2di)__W, (__v2di)__X, (__v2di)__Y, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_madd52lo_epu64(__m256i __W, __mmask8 __M, __m256i __X,
                               __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmadd52luq256_mask(
      (__v4di)__W, (__v4di)__X, (__v4di)__Y, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_madd52hi_epu64(__m256i __W, __mmask8 __M, __m256i __X,
                               __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmadd52huq256_mask(
      (__v4di)__W, (__v4di)__X, (__v4di)__Y, (__mmask8)__M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_madd52lo_epu64(__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52luq128_maskz(
      (__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)__M);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_madd52hi_epu64(__mmask8 __M, __m128i __X, __m128i __Y, __m128i __Z) {
  return (__m128i)__builtin_ia32_vpmadd52huq128_maskz(
      (__v2di)__X, (__v2di)__Y, (__v2di)__Z, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_madd52lo_epu64(__mmask8 __M, __m256i __X, __m256i __Y,
                                __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52luq256_maskz(
      (__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_madd52hi_epu64(__mmask8 __M, __m256i __X, __m256i __Y,
                                __m256i __Z) {
  return (__m256i)__builtin_ia32_vpmadd52huq256_maskz(
      (__v4di)__X, (__v4di)__Y, (__v4di)__Z, (__mmask8)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_multishift_epi64_epi8(__m512i __W, __mmask64 __M, __m512i __X,
                                      __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmultishiftqb512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_multishift_epi64_epi8(__mmask64 __M, __m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmultishiftqb512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_multishift_epi64_epi8(__m512i __X, __m512i __Y) {
  return (__m512i)__builtin_ia32_vpmultishiftqb512_mask(
      (__v64qi)__X, (__v64qi)__Y, (__v64qi)_mm512_undefined_epi32(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutexvar_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarqi512_mask(
      (__v64qi)__B, (__v64qi)__A, (__v64qi)_mm512_undefined_epi32(),
      (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutexvar_epi8(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_permvarqi512_mask(
      (__v64qi)__B, (__v64qi)__A, (__v64qi)_mm512_setzero_si512(),
      (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutexvar_epi8(__m512i __W, __mmask64 __M, __m512i __A,
                                 __m512i __B) {
  return (__m512i)__builtin_ia32_permvarqi512_mask(
      (__v64qi)__B, (__v64qi)__A, (__v64qi)__W, (__mmask64)__M);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_permutex2var_epi8(__m512i __A, __m512i __I, __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varqi512_mask(
      (__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)-1);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_permutex2var_epi8(__m512i __A, __mmask64 __U, __m512i __I,
                                  __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varqi512_mask(
      (__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask2_permutex2var_epi8(__m512i __A, __m512i __I, __mmask64 __U,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermi2varqi512_mask(
      (__v64qi)__A, (__v64qi)__I, (__v64qi)__B, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_permutex2var_epi8(__mmask64 __U, __m512i __A, __m512i __I,
                                   __m512i __B) {
  return (__m512i)__builtin_ia32_vpermt2varqi512_maskz(
      (__v64qi)__I, (__v64qi)__A, (__v64qi)__B, (__mmask64)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_multishift_epi64_epi8(__m256i __W, __mmask32 __M, __m256i __X,
                                      __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmultishiftqb256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_multishift_epi64_epi8(__mmask32 __M, __m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmultishiftqb256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_multishift_epi64_epi8(__m256i __X, __m256i __Y) {
  return (__m256i)__builtin_ia32_vpmultishiftqb256_mask(
      (__v32qi)__X, (__v32qi)__Y, (__v32qi)_mm256_undefined_si256(),
      (__mmask32)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_multishift_epi64_epi8(__m128i __W, __mmask16 __M, __m128i __X,
                                   __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmultishiftqb128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_multishift_epi64_epi8(__mmask16 __M, __m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmultishiftqb128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_multishift_epi64_epi8(__m128i __X, __m128i __Y) {
  return (__m128i)__builtin_ia32_vpmultishiftqb128_mask(
      (__v16qi)__X, (__v16qi)__Y, (__v16qi)_mm_undefined_si128(),
      (__mmask16)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutexvar_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarqi256_mask(
      (__v32qi)__B, (__v32qi)__A, (__v32qi)_mm256_undefined_si256(),
      (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutexvar_epi8(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_permvarqi256_mask(
      (__v32qi)__B, (__v32qi)__A, (__v32qi)_mm256_setzero_si256(),
      (__mmask32)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutexvar_epi8(__m256i __W, __mmask32 __M, __m256i __A,
                                 __m256i __B) {
  return (__m256i)__builtin_ia32_permvarqi256_mask(
      (__v32qi)__B, (__v32qi)__A, (__v32qi)__W, (__mmask32)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutexvar_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarqi128_mask(
      (__v16qi)__B, (__v16qi)__A, (__v16qi)_mm_undefined_si128(),
      (__mmask16)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutexvar_epi8(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_permvarqi128_mask(
      (__v16qi)__B, (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__M);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutexvar_epi8(__m128i __W, __mmask16 __M, __m128i __A,
                              __m128i __B) {
  return (__m128i)__builtin_ia32_permvarqi128_mask(
      (__v16qi)__B, (__v16qi)__A, (__v16qi)__W, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_permutex2var_epi8(__m256i __A, __m256i __I, __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varqi256_mask(
      (__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)-1);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_permutex2var_epi8(__m256i __A, __mmask32 __U, __m256i __I,
                                  __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varqi256_mask(
      (__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask2_permutex2var_epi8(__m256i __A, __m256i __I, __mmask32 __U,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermi2varqi256_mask(
      (__v32qi)__A, (__v32qi)__I, (__v32qi)__B, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_permutex2var_epi8(__mmask32 __U, __m256i __A, __m256i __I,
                                   __m256i __B) {
  return (__m256i)__builtin_ia32_vpermt2varqi256_maskz(
      (__v32qi)__I, (__v32qi)__A, (__v32qi)__B, (__mmask32)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_permutex2var_epi8(__m128i __A, __m128i __I, __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varqi128_mask(
      (__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)-1);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_permutex2var_epi8(__m128i __A, __mmask16 __U, __m128i __I,
                               __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varqi128_mask(
      (__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask2_permutex2var_epi8(__m128i __A, __m128i __I, __mmask16 __U,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermi2varqi128_mask(
      (__v16qi)__A, (__v16qi)__I, (__v16qi)__B, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_permutex2var_epi8(__mmask16 __U, __m128i __A, __m128i __I,
                                __m128i __B) {
  return (__m128i)__builtin_ia32_vpermt2varqi128_maskz(
      (__v16qi)__I, (__v16qi)__A, (__v16qi)__B, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4fmadd_ps(__m512 __A, __m512 __B, __m512 __C, __m512 __D, __m512 __E,
                     __m128 *__F) {
  return (__m512)__builtin_ia32_4fmaddps((__v16sf)__B, (__v16sf)__C,
                                         (__v16sf)__D, (__v16sf)__E,
                                         (__v16sf)__A, (const __v4sf *)__F);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4fmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C,
                          __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4fmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C,
                           __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_4fmadd_ss(__m128 __A, __m128 __B, __m128 __C, __m128 __D, __m128 __E,
                  __m128 *__F) {
  return (__m128)__builtin_ia32_4fmaddss((__v4sf)__B, (__v4sf)__C, (__v4sf)__D,
                                         (__v4sf)__E, (__v4sf)__A,
                                         (const __v4sf *)__F);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_4fmadd_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C,
                       __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_4fmadd_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C,
                        __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4fnmadd_ps(__m512 __A, __m512 __B, __m512 __C, __m512 __D,
                      __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fnmaddps((__v16sf)__B, (__v16sf)__C,
                                          (__v16sf)__D, (__v16sf)__E,
                                          (__v16sf)__A, (const __v4sf *)__F);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4fnmadd_ps(__m512 __A, __mmask16 __U, __m512 __B, __m512 __C,
                           __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fnmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)__A, (__mmask16)__U);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4fnmadd_ps(__mmask16 __U, __m512 __A, __m512 __B, __m512 __C,
                            __m512 __D, __m512 __E, __m128 *__F) {
  return (__m512)__builtin_ia32_4fnmaddps_mask(
      (__v16sf)__B, (__v16sf)__C, (__v16sf)__D, (__v16sf)__E, (__v16sf)__A,
      (const __v4sf *)__F, (__v16sf)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_4fnmadd_ss(__m128 __A, __m128 __B, __m128 __C, __m128 __D, __m128 __E,
                   __m128 *__F) {
  return (__m128)__builtin_ia32_4fnmaddss((__v4sf)__B, (__v4sf)__C, (__v4sf)__D,
                                          (__v4sf)__E, (__v4sf)__A,
                                          (const __v4sf *)__F);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_4fnmadd_ss(__m128 __A, __mmask8 __U, __m128 __B, __m128 __C,
                        __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fnmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)__A, (__mmask8)__U);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_4fnmadd_ss(__mmask8 __U, __m128 __A, __m128 __B, __m128 __C,
                         __m128 __D, __m128 __E, __m128 *__F) {
  return (__m128)__builtin_ia32_4fnmaddss_mask(
      (__v4sf)__B, (__v4sf)__C, (__v4sf)__D, (__v4sf)__E, (__v4sf)__A,
      (const __v4sf *)__F, (__v4sf)_mm_setzero_ps(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4dpwssd_epi32(__m512i __A, __m512i __B, __m512i __C, __m512i __D,
                         __m512i __E, __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssd((__v16si)__B, (__v16si)__C,
                                           (__v16si)__D, (__v16si)__E,
                                           (__v16si)__A, (const __v4si *)__F);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4dpwssd_epi32(__m512i __A, __mmask16 __U, __m512i __B,
                              __m512i __C, __m512i __D, __m512i __E,
                              __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssd_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)__A, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4dpwssd_epi32(__mmask16 __U, __m512i __A, __m512i __B,
                               __m512i __C, __m512i __D, __m512i __E,
                               __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssd_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_4dpwssds_epi32(__m512i __A, __m512i __B, __m512i __C, __m512i __D,
                          __m512i __E, __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssds((__v16si)__B, (__v16si)__C,
                                            (__v16si)__D, (__v16si)__E,
                                            (__v16si)__A, (const __v4si *)__F);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_4dpwssds_epi32(__m512i __A, __mmask16 __U, __m512i __B,
                               __m512i __C, __m512i __D, __m512i __E,
                               __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssds_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)__A, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_4dpwssds_epi32(__mmask16 __U, __m512i __A, __m512i __B,
                                __m512i __C, __m512i __D, __m512i __E,
                                __m128i *__F) {
  return (__m512i)__builtin_ia32_vp4dpwssds_mask(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__v16si)__E, (__v16si)__A,
      (const __v4si *)__F, (__v16si)_mm512_setzero_ps(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi32(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountd_v16si((__v16si)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi32(__m512i __W, __mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountd_v16si_mask(
      (__v16si)__A, (__v16si)__W, (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi32(__mmask16 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountd_v16si_mask(
      (__v16si)__A, (__v16si)_mm512_setzero_si512(), (__mmask16)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi64(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountq_v8di((__v8di)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi64(__m512i __W, __mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountq_v8di_mask((__v8di)__A, (__v8di)__W,
                                                      (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi64(__mmask8 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountq_v8di_mask(
      (__v8di)__A, (__v8di)_mm512_setzero_si512(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdi_epi16(__m512i __A, __m512i __B, int __C) {
  return (__m512i)__builtin_ia32_vpshrd_v32hi((__v32hi)__A, (__v32hi)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdi_epi32(__m512i __A, __m512i __B, int __C) {
  return (__m512i)__builtin_ia32_vpshrd_v16si((__v16si)__A, (__v16si)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shrdi_epi32(__m512i __A, __mmask16 __B, __m512i __C,
                            __m512i __D, int __E) {
  return (__m512i)__builtin_ia32_vpshrd_v16si_mask(
      (__v16si)__C, (__v16si)__D, __E, (__v16si)__A, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shrdi_epi32(__mmask16 __A, __m512i __B, __m512i __C, int __D) {
  return (__m512i)__builtin_ia32_vpshrd_v16si_mask(
      (__v16si)__B, (__v16si)__C, __D, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdi_epi64(__m512i __A, __m512i __B, int __C) {
  return (__m512i)__builtin_ia32_vpshrd_v8di((__v8di)__A, (__v8di)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shrdi_epi64(__m512i __A, __mmask8 __B, __m512i __C, __m512i __D,
                            int __E) {
  return (__m512i)__builtin_ia32_vpshrd_v8di_mask((__v8di)__C, (__v8di)__D, __E,
                                                  (__v8di)__A, (__mmask8)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shrdi_epi64(__mmask8 __A, __m512i __B, __m512i __C, int __D) {
  return (__m512i)__builtin_ia32_vpshrd_v8di_mask(
      (__v8di)__B, (__v8di)__C, __D, (__v8di)_mm512_setzero_si512(),
      (__mmask8)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldi_epi16(__m512i __A, __m512i __B, int __C) {
  return (__m512i)__builtin_ia32_vpshld_v32hi((__v32hi)__A, (__v32hi)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldi_epi32(__m512i __A, __m512i __B, int __C) {
  return (__m512i)__builtin_ia32_vpshld_v16si((__v16si)__A, (__v16si)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shldi_epi32(__m512i __A, __mmask16 __B, __m512i __C,
                            __m512i __D, int __E) {
  return (__m512i)__builtin_ia32_vpshld_v16si_mask(
      (__v16si)__C, (__v16si)__D, __E, (__v16si)__A, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shldi_epi32(__mmask16 __A, __m512i __B, __m512i __C, int __D) {
  return (__m512i)__builtin_ia32_vpshld_v16si_mask(
      (__v16si)__B, (__v16si)__C, __D, (__v16si)_mm512_setzero_si512(),
      (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldi_epi64(__m512i __A, __m512i __B, int __C) {
  return (__m512i)__builtin_ia32_vpshld_v8di((__v8di)__A, (__v8di)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shldi_epi64(__m512i __A, __mmask8 __B, __m512i __C, __m512i __D,
                            int __E) {
  return (__m512i)__builtin_ia32_vpshld_v8di_mask((__v8di)__C, (__v8di)__D, __E,
                                                  (__v8di)__A, (__mmask8)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shldi_epi64(__mmask8 __A, __m512i __B, __m512i __C, int __D) {
  return (__m512i)__builtin_ia32_vpshld_v8di_mask(
      (__v8di)__B, (__v8di)__C, __D, (__v8di)_mm512_setzero_si512(),
      (__mmask8)__A);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdv_epi16(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshrdv_v32hi((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdv_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshrdv_v16si((__v16si)__A, (__v16si)__B,
                                               (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shrdv_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shrdv_epi32(__mmask16 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shrdv_epi64(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshrdv_v8di((__v8di)__A, (__v8di)__B,
                                              (__v8di)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shrdv_epi64(__m512i __A, __mmask8 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v8di_mask((__v8di)__A, (__v8di)__C,
                                                   (__v8di)__D, (__mmask8)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shrdv_epi64(__mmask8 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v8di_maskz((__v8di)__B, (__v8di)__C,
                                                    (__v8di)__D, (__mmask8)__A);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldv_epi16(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshldv_v32hi((__v32hi)__A, (__v32hi)__B,
                                               (__v32hi)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldv_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshldv_v16si((__v16si)__A, (__v16si)__B,
                                               (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shldv_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shldv_epi32(__mmask16 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_shldv_epi64(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpshldv_v8di((__v8di)__A, (__v8di)__B,
                                              (__v8di)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shldv_epi64(__m512i __A, __mmask8 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v8di_mask((__v8di)__A, (__v8di)__C,
                                                   (__v8di)__D, (__mmask8)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shldv_epi64(__mmask8 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v8di_maskz((__v8di)__B, (__v8di)__C,
                                                    (__v8di)__D, (__mmask8)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi8(__m512i __A, __mmask64 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_compressqi512_mask((__v64qi)__C, (__v64qi)__A,
                                                    (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi8(__mmask64 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_compressqi512_mask(
      (__v64qi)__B, (__v64qi)_mm512_setzero_si512(), (__mmask64)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi8(void *__A, __mmask64 __B, __m512i __C) {
  __builtin_ia32_compressstoreuqi512_mask((__v64qi *)__A, (__v64qi)__C,
                                          (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compress_epi16(__m512i __A, __mmask32 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_compresshi512_mask((__v32hi)__C, (__v32hi)__A,
                                                    (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_compress_epi16(__mmask32 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_compresshi512_mask(
      (__v32hi)__B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_compressstoreu_epi16(void *__A, __mmask32 __B, __m512i __C) {
  __builtin_ia32_compressstoreuhi512_mask((__v32hi *)__A, (__v32hi)__C,
                                          (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi8(__m512i __A, __mmask64 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_expandqi512_mask((__v64qi)__C, (__v64qi)__A,
                                                  (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi8(__mmask64 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_expandqi512_maskz(
      (__v64qi)__B, (__v64qi)_mm512_setzero_si512(), (__mmask64)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi8(__m512i __A, __mmask64 __B, const void *__C) {
  return (__m512i)__builtin_ia32_expandloadqi512_mask(
      (const __v64qi *)__C, (__v64qi)__A, (__mmask64)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi8(__mmask64 __A, const void *__B) {
  return (__m512i)__builtin_ia32_expandloadqi512_maskz(
      (const __v64qi *)__B, (__v64qi)_mm512_setzero_si512(), (__mmask64)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expand_epi16(__m512i __A, __mmask32 __B, __m512i __C) {
  return (__m512i)__builtin_ia32_expandhi512_mask((__v32hi)__C, (__v32hi)__A,
                                                  (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expand_epi16(__mmask32 __A, __m512i __B) {
  return (__m512i)__builtin_ia32_expandhi512_maskz(
      (__v32hi)__B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_expandloadu_epi16(__m512i __A, __mmask32 __B, const void *__C) {
  return (__m512i)__builtin_ia32_expandloadhi512_mask(
      (const __v32hi *)__C, (__v32hi)__A, (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_expandloadu_epi16(__mmask32 __A, const void *__B) {
  return (__m512i)__builtin_ia32_expandloadhi512_maskz(
      (const __v32hi *)__B, (__v32hi)_mm512_setzero_si512(), (__mmask32)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shrdi_epi16(__m512i __A, __mmask32 __B, __m512i __C,
                            __m512i __D, int __E) {
  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask(
      (__v32hi)__C, (__v32hi)__D, __E, (__v32hi)__A, (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shrdi_epi16(__mmask32 __A, __m512i __B, __m512i __C, int __D) {
  return (__m512i)__builtin_ia32_vpshrd_v32hi_mask(
      (__v32hi)__B, (__v32hi)__C, __D, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_shldi_epi16(__m512i __A, __mmask32 __B, __m512i __C,
                            __m512i __D, int __E) {
  return (__m512i)__builtin_ia32_vpshld_v32hi_mask(
      (__v32hi)__C, (__v32hi)__D, __E, (__v32hi)__A, (__mmask32)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_shldi_epi16(__mmask32 __A, __m512i __B, __m512i __C, int __D) {
  return (__m512i)__builtin_ia32_vpshld_v32hi_mask(
      (__v32hi)__B, (__v32hi)__C, __D, (__v32hi)_mm512_setzero_si512(),
      (__mmask32)__A);
}
extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shrdv_epi16(__m512i __A, __mmask32 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v32hi_mask(
      (__v32hi)__A, (__v32hi)__C, (__v32hi)__D, (__mmask32)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shrdv_epi16(__mmask32 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshrdv_v32hi_maskz(
      (__v32hi)__B, (__v32hi)__C, (__v32hi)__D, (__mmask32)__A);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_shldv_epi16(__m512i __A, __mmask32 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v32hi_mask(
      (__v32hi)__A, (__v32hi)__C, (__v32hi)__D, (__mmask32)__B);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_maskz_shldv_epi16(__mmask32 __A, __m512i __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpshldv_v32hi_maskz(
      (__v32hi)__B, (__v32hi)__C, (__v32hi)__D, (__mmask32)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi8(__m128i __A, __mmask16 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_compressqi128_mask((__v16qi)__C, (__v16qi)__A,
                                                    (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi8(__mmask16 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_compressqi128_mask(
      (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi16(void *__A, __mmask16 __B, __m256i __C) {
  __builtin_ia32_compressstoreuhi256_mask((__v16hi *)__A, (__v16hi)__C,
                                          (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compress_epi16(__m128i __A, __mmask8 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_compresshi128_mask((__v8hi)__C, (__v8hi)__A,
                                                    (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_compress_epi16(__mmask8 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_compresshi128_mask(
      (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi16(__m256i __A, __mmask16 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_compresshi256_mask((__v16hi)__C, (__v16hi)__A,
                                                    (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi16(__mmask16 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_compresshi256_mask(
      (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi8(void *__A, __mmask16 __B, __m128i __C) {
  __builtin_ia32_compressstoreuqi128_mask((__v16qi *)__A, (__v16qi)__C,
                                          (__mmask16)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_compressstoreu_epi16(void *__A, __mmask8 __B, __m128i __C) {
  __builtin_ia32_compressstoreuhi128_mask((__v8hi *)__A, (__v8hi)__C,
                                          (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi8(__m128i __A, __mmask16 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_expandqi128_mask((__v16qi)__C, (__v16qi)__A,
                                                  (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi8(__mmask16 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_expandqi128_maskz(
      (__v16qi)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi8(__m128i __A, __mmask16 __B, const void *__C) {
  return (__m128i)__builtin_ia32_expandloadqi128_mask(
      (const __v16qi *)__C, (__v16qi)__A, (__mmask16)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi8(__mmask16 __A, const void *__B) {
  return (__m128i)__builtin_ia32_expandloadqi128_maskz(
      (const __v16qi *)__B, (__v16qi)_mm_setzero_si128(), (__mmask16)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expand_epi16(__m128i __A, __mmask8 __B, __m128i __C) {
  return (__m128i)__builtin_ia32_expandhi128_mask((__v8hi)__C, (__v8hi)__A,
                                                  (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expand_epi16(__mmask8 __A, __m128i __B) {
  return (__m128i)__builtin_ia32_expandhi128_maskz(
      (__v8hi)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_expandloadu_epi16(__m128i __A, __mmask8 __B, const void *__C) {
  return (__m128i)__builtin_ia32_expandloadhi128_mask(
      (const __v8hi *)__C, (__v8hi)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_expandloadu_epi16(__mmask8 __A, const void *__B) {
  return (__m128i)__builtin_ia32_expandloadhi128_maskz(
      (const __v8hi *)__B, (__v8hi)_mm_setzero_si128(), (__mmask8)__A);
}
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi16(__m256i __A, __mmask16 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_expandhi256_mask((__v16hi)__C, (__v16hi)__A,
                                                  (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi16(__mmask16 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_expandhi256_maskz(
      (__v16hi)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi16(__m256i __A, __mmask16 __B, const void *__C) {
  return (__m256i)__builtin_ia32_expandloadhi256_mask(
      (const __v16hi *)__C, (__v16hi)__A, (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi16(__mmask16 __A, const void *__B) {
  return (__m256i)__builtin_ia32_expandloadhi256_maskz(
      (const __v16hi *)__B, (__v16hi)_mm256_setzero_si256(), (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdi_epi16(__m256i __A, __m256i __B, int __C) {
  return (__m256i)__builtin_ia32_vpshrd_v16hi((__v16hi)__A, (__v16hi)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shrdi_epi16(__m256i __A, __mmask16 __B, __m256i __C,
                            __m256i __D, int __E) {
  return (__m256i)__builtin_ia32_vpshrd_v16hi_mask(
      (__v16hi)__C, (__v16hi)__D, __E, (__v16hi)__A, (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shrdi_epi16(__mmask16 __A, __m256i __B, __m256i __C, int __D) {
  return (__m256i)__builtin_ia32_vpshrd_v16hi_mask(
      (__v16hi)__B, (__v16hi)__C, __D, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shrdi_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,
                            int __E) {
  return (__m256i)__builtin_ia32_vpshrd_v8si_mask((__v8si)__C, (__v8si)__D, __E,
                                                  (__v8si)__A, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shrdi_epi32(__mmask8 __A, __m256i __B, __m256i __C, int __D) {
  return (__m256i)__builtin_ia32_vpshrd_v8si_mask(
      (__v8si)__B, (__v8si)__C, __D, (__v8si)_mm256_setzero_si256(),
      (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdi_epi32(__m256i __A, __m256i __B, int __C) {
  return (__m256i)__builtin_ia32_vpshrd_v8si((__v8si)__A, (__v8si)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shrdi_epi64(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,
                            int __E) {
  return (__m256i)__builtin_ia32_vpshrd_v4di_mask((__v4di)__C, (__v4di)__D, __E,
                                                  (__v4di)__A, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shrdi_epi64(__mmask8 __A, __m256i __B, __m256i __C, int __D) {
  return (__m256i)__builtin_ia32_vpshrd_v4di_mask(
      (__v4di)__B, (__v4di)__C, __D, (__v4di)_mm256_setzero_si256(),
      (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdi_epi64(__m256i __A, __m256i __B, int __C) {
  return (__m256i)__builtin_ia32_vpshrd_v4di((__v4di)__A, (__v4di)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdi_epi16(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,
                         int __E) {
  return (__m128i)__builtin_ia32_vpshrd_v8hi_mask((__v8hi)__C, (__v8hi)__D, __E,
                                                  (__v8hi)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdi_epi16(__mmask8 __A, __m128i __B, __m128i __C, int __D) {
  return (__m128i)__builtin_ia32_vpshrd_v8hi_mask((__v8hi)__B, (__v8hi)__C, __D,
                                                  (__v8hi)_mm_setzero_si128(),
                                                  (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdi_epi16(__m128i __A, __m128i __B, int __C) {
  return (__m128i)__builtin_ia32_vpshrd_v8hi((__v8hi)__A, (__v8hi)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdi_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,
                         int __E) {
  return (__m128i)__builtin_ia32_vpshrd_v4si_mask((__v4si)__C, (__v4si)__D, __E,
                                                  (__v4si)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdi_epi32(__mmask8 __A, __m128i __B, __m128i __C, int __D) {
  return (__m128i)__builtin_ia32_vpshrd_v4si_mask((__v4si)__B, (__v4si)__C, __D,
                                                  (__v4si)_mm_setzero_si128(),
                                                  (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdi_epi32(__m128i __A, __m128i __B, int __C) {
  return (__m128i)__builtin_ia32_vpshrd_v4si((__v4si)__A, (__v4si)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdi_epi64(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,
                         int __E) {
  return (__m128i)__builtin_ia32_vpshrd_v2di_mask((__v2di)__C, (__v2di)__D, __E,
                                                  (__v2di)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdi_epi64(__mmask8 __A, __m128i __B, __m128i __C, int __D) {
  return (__m128i)__builtin_ia32_vpshrd_v2di_mask((__v2di)__B, (__v2di)__C, __D,
                                                  (__v2di)_mm_setzero_si128(),
                                                  (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdi_epi64(__m128i __A, __m128i __B, int __C) {
  return (__m128i)__builtin_ia32_vpshrd_v2di((__v2di)__A, (__v2di)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldi_epi16(__m256i __A, __m256i __B, int __C) {
  return (__m256i)__builtin_ia32_vpshld_v16hi((__v16hi)__A, (__v16hi)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shldi_epi16(__m256i __A, __mmask16 __B, __m256i __C,
                            __m256i __D, int __E) {
  return (__m256i)__builtin_ia32_vpshld_v16hi_mask(
      (__v16hi)__C, (__v16hi)__D, __E, (__v16hi)__A, (__mmask16)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shldi_epi16(__mmask16 __A, __m256i __B, __m256i __C, int __D) {
  return (__m256i)__builtin_ia32_vpshld_v16hi_mask(
      (__v16hi)__B, (__v16hi)__C, __D, (__v16hi)_mm256_setzero_si256(),
      (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shldi_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,
                            int __E) {
  return (__m256i)__builtin_ia32_vpshld_v8si_mask((__v8si)__C, (__v8si)__D, __E,
                                                  (__v8si)__A, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shldi_epi32(__mmask8 __A, __m256i __B, __m256i __C, int __D) {
  return (__m256i)__builtin_ia32_vpshld_v8si_mask(
      (__v8si)__B, (__v8si)__C, __D, (__v8si)_mm256_setzero_si256(),
      (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldi_epi32(__m256i __A, __m256i __B, int __C) {
  return (__m256i)__builtin_ia32_vpshld_v8si((__v8si)__A, (__v8si)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_shldi_epi64(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D,
                            int __E) {
  return (__m256i)__builtin_ia32_vpshld_v4di_mask((__v4di)__C, (__v4di)__D, __E,
                                                  (__v4di)__A, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_shldi_epi64(__mmask8 __A, __m256i __B, __m256i __C, int __D) {
  return (__m256i)__builtin_ia32_vpshld_v4di_mask(
      (__v4di)__B, (__v4di)__C, __D, (__v4di)_mm256_setzero_si256(),
      (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldi_epi64(__m256i __A, __m256i __B, int __C) {
  return (__m256i)__builtin_ia32_vpshld_v4di((__v4di)__A, (__v4di)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldi_epi16(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,
                         int __E) {
  return (__m128i)__builtin_ia32_vpshld_v8hi_mask((__v8hi)__C, (__v8hi)__D, __E,
                                                  (__v8hi)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldi_epi16(__mmask8 __A, __m128i __B, __m128i __C, int __D) {
  return (__m128i)__builtin_ia32_vpshld_v8hi_mask((__v8hi)__B, (__v8hi)__C, __D,
                                                  (__v8hi)_mm_setzero_si128(),
                                                  (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldi_epi16(__m128i __A, __m128i __B, int __C) {
  return (__m128i)__builtin_ia32_vpshld_v8hi((__v8hi)__A, (__v8hi)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldi_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,
                         int __E) {
  return (__m128i)__builtin_ia32_vpshld_v4si_mask((__v4si)__C, (__v4si)__D, __E,
                                                  (__v4si)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldi_epi32(__mmask8 __A, __m128i __B, __m128i __C, int __D) {
  return (__m128i)__builtin_ia32_vpshld_v4si_mask((__v4si)__B, (__v4si)__C, __D,
                                                  (__v4si)_mm_setzero_si128(),
                                                  (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldi_epi32(__m128i __A, __m128i __B, int __C) {
  return (__m128i)__builtin_ia32_vpshld_v4si((__v4si)__A, (__v4si)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldi_epi64(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D,
                         int __E) {
  return (__m128i)__builtin_ia32_vpshld_v2di_mask((__v2di)__C, (__v2di)__D, __E,
                                                  (__v2di)__A, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldi_epi64(__mmask8 __A, __m128i __B, __m128i __C, int __D) {
  return (__m128i)__builtin_ia32_vpshld_v2di_mask((__v2di)__B, (__v2di)__C, __D,
                                                  (__v2di)_mm_setzero_si128(),
                                                  (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldi_epi64(__m128i __A, __m128i __B, int __C) {
  return (__m128i)__builtin_ia32_vpshld_v2di((__v2di)__A, (__v2di)__B, __C);
}
extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdv_epi16(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshrdv_v16hi((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shrdv_epi16(__m256i __A, __mmask16 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v16hi_mask(
      (__v16hi)__A, (__v16hi)__C, (__v16hi)__D, (__mmask16)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shrdv_epi16(__mmask16 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v16hi_maskz(
      (__v16hi)__B, (__v16hi)__C, (__v16hi)__D, (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdv_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshrdv_v8si((__v8si)__A, (__v8si)__B,
                                              (__v8si)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shrdv_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v8si_mask((__v8si)__A, (__v8si)__C,
                                                   (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shrdv_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v8si_maskz((__v8si)__B, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shrdv_epi64(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshrdv_v4di((__v4di)__A, (__v4di)__B,
                                              (__v4di)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shrdv_epi64(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v4di_mask((__v4di)__A, (__v4di)__C,
                                                   (__v4di)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shrdv_epi64(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshrdv_v4di_maskz((__v4di)__B, (__v4di)__C,
                                                    (__v4di)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdv_epi16(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshrdv_v8hi((__v8hi)__A, (__v8hi)__B,
                                              (__v8hi)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdv_epi16(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v8hi_mask((__v8hi)__A, (__v8hi)__C,
                                                   (__v8hi)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdv_epi16(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v8hi_maskz((__v8hi)__B, (__v8hi)__C,
                                                    (__v8hi)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdv_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshrdv_v4si((__v4si)__A, (__v4si)__B,
                                              (__v4si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdv_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v4si_mask((__v4si)__A, (__v4si)__C,
                                                   (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdv_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v4si_maskz((__v4si)__B, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shrdv_epi64(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshrdv_v2di((__v2di)__A, (__v2di)__B,
                                              (__v2di)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shrdv_epi64(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v2di_mask((__v2di)__A, (__v2di)__C,
                                                   (__v2di)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shrdv_epi64(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshrdv_v2di_maskz((__v2di)__B, (__v2di)__C,
                                                    (__v2di)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldv_epi16(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshldv_v16hi((__v16hi)__A, (__v16hi)__B,
                                               (__v16hi)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shldv_epi16(__m256i __A, __mmask16 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v16hi_mask(
      (__v16hi)__A, (__v16hi)__C, (__v16hi)__D, (__mmask16)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shldv_epi16(__mmask16 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v16hi_maskz(
      (__v16hi)__B, (__v16hi)__C, (__v16hi)__D, (__mmask16)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldv_epi32(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshldv_v8si((__v8si)__A, (__v8si)__B,
                                              (__v8si)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shldv_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v8si_mask((__v8si)__A, (__v8si)__C,
                                                   (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shldv_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v8si_maskz((__v8si)__B, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_shldv_epi64(__m256i __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vpshldv_v4di((__v4di)__A, (__v4di)__B,
                                              (__v4di)__C);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_shldv_epi64(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v4di_mask((__v4di)__A, (__v4di)__C,
                                                   (__v4di)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_shldv_epi64(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpshldv_v4di_maskz((__v4di)__B, (__v4di)__C,
                                                    (__v4di)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldv_epi16(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshldv_v8hi((__v8hi)__A, (__v8hi)__B,
                                              (__v8hi)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldv_epi16(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v8hi_mask((__v8hi)__A, (__v8hi)__C,
                                                   (__v8hi)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldv_epi16(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v8hi_maskz((__v8hi)__B, (__v8hi)__C,
                                                    (__v8hi)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldv_epi32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshldv_v4si((__v4si)__A, (__v4si)__B,
                                              (__v4si)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldv_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v4si_mask((__v4si)__A, (__v4si)__C,
                                                   (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldv_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v4si_maskz((__v4si)__B, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_shldv_epi64(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vpshldv_v2di((__v2di)__A, (__v2di)__B,
                                              (__v2di)__C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_shldv_epi64(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v2di_mask((__v2di)__A, (__v2di)__C,
                                                   (__v2di)__D, (__mmask8)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_shldv_epi64(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpshldv_v2di_maskz((__v2di)__B, (__v2di)__C,
                                                    (__v2di)__D, (__mmask8)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compress_epi8(__m256i __A, __mmask32 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_compressqi256_mask((__v32qi)__C, (__v32qi)__A,
                                                    (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_compress_epi8(__mmask32 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_compressqi256_mask(
      (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_compressstoreu_epi8(void *__A, __mmask32 __B, __m256i __C) {
  __builtin_ia32_compressstoreuqi256_mask((__v32qi *)__A, (__v32qi)__C,
                                          (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expand_epi8(__m256i __A, __mmask32 __B, __m256i __C) {
  return (__m256i)__builtin_ia32_expandqi256_mask((__v32qi)__C, (__v32qi)__A,
                                                  (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expand_epi8(__mmask32 __A, __m256i __B) {
  return (__m256i)__builtin_ia32_expandqi256_maskz(
      (__v32qi)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_expandloadu_epi8(__m256i __A, __mmask32 __B, const void *__C) {
  return (__m256i)__builtin_ia32_expandloadqi256_mask(
      (const __v32qi *)__C, (__v32qi)__A, (__mmask32)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_expandloadu_epi8(__mmask32 __A, const void *__B) {
  return (__m256i)__builtin_ia32_expandloadqi256_maskz(
      (const __v32qi *)__B, (__v32qi)_mm256_setzero_si256(), (__mmask32)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpbusd_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpbusd_v16si((__v16si)__A, (__v16si)__B,
                                                (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_dpbusd_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusd_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpbusd_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusd_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpbusds_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpbusds_v16si((__v16si)__A, (__v16si)__B,
                                                 (__v16si)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_dpbusds_epi32(__m512i __A, __mmask16 __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusds_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpbusds_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                               __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpbusds_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpwssd_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpwssd_v16si((__v16si)__A, (__v16si)__B,
                                                (__v16si)__C);
}

extern __inline __m512i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm512_mask_dpwssd_epi32(__m512i __A, __mmask16 __B, __m512i __C, __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssd_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpwssd_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssd_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpwssds_epi32(__m512i __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vpdpwssds_v16si((__v16si)__A, (__v16si)__B,
                                                 (__v16si)__C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_dpwssds_epi32(__m512i __A, __mmask16 __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssds_v16si_mask(
      (__v16si)__A, (__v16si)__C, (__v16si)__D, (__mmask16)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_dpwssds_epi32(__mmask16 __A, __m512i __B, __m512i __C,
                               __m512i __D) {
  return (__m512i)__builtin_ia32_vpdpwssds_v16si_maskz(
      (__v16si)__B, (__v16si)__C, (__v16si)__D, (__mmask16)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpbusd_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusd_v8si_mask((__v8si)__A, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_dpbusd_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusd_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dpbusd_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusd_v4si_mask((__v4si)__A, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpbusd_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusd_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpbusds_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusds_v8si_mask(
      (__v8si)__A, (__v8si)__C, (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_dpbusds_epi32(__mmask8 __A, __m256i __B, __m256i __C,
                               __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpbusds_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_dpbusds_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusds_v4si_mask(
      (__v4si)__A, (__v4si)__C, (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpbusds_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpbusds_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpwssd_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssd_v8si_mask((__v8si)__A, (__v8si)__C,
                                                    (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_maskz_dpwssd_epi32(__mmask8 __A, __m256i __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssd_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dpwssd_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssd_v4si_mask((__v4si)__A, (__v4si)__C,
                                                    (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpwssd_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssd_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m256i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm256_mask_dpwssds_epi32(__m256i __A, __mmask8 __B, __m256i __C, __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssds_v8si_mask(
      (__v8si)__A, (__v8si)__C, (__v8si)__D, (__mmask8)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_dpwssds_epi32(__mmask8 __A, __m256i __B, __m256i __C,
                               __m256i __D) {
  return (__m256i)__builtin_ia32_vpdpwssds_v8si_maskz(
      (__v8si)__B, (__v8si)__C, (__v8si)__D, (__mmask8)__A);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_dpwssds_epi32(__m128i __A, __mmask8 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssds_v4si_mask(
      (__v4si)__A, (__v4si)__C, (__v4si)__D, (__mmask8)__B);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_maskz_dpwssds_epi32(__mmask8 __A, __m128i __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vpdpwssds_v4si_maskz(
      (__v4si)__B, (__v4si)__C, (__v4si)__D, (__mmask8)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi32(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountd_v4si((__v4si)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi32(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountd_v4si_mask((__v4si)__A, (__v4si)__W,
                                                      (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi32(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountd_v4si_mask(
      (__v4si)__A, (__v4si)_mm_setzero_si128(), (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi32(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountd_v8si((__v8si)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi32(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountd_v8si_mask((__v8si)__A, (__v8si)__W,
                                                      (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi32(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountd_v8si_mask(
      (__v8si)__A, (__v8si)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi64(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountq_v2di((__v2di)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi64(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountq_v2di_mask((__v2di)__A, (__v2di)__W,
                                                      (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi64(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountq_v2di_mask(
      (__v2di)__A, (__v2di)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi64(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountq_v4di((__v4di)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi64(__m256i __W, __mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountq_v4di_mask((__v4di)__A, (__v4di)__W,
                                                      (__mmask8)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi64(__mmask8 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountq_v4di_mask(
      (__v4di)__A, (__v4di)_mm256_setzero_si256(), (__mmask8)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi8(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountb_v64qi((__v64qi)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_popcnt_epi16(__m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountw_v32hi((__v32hi)__A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi8(__m512i __W, __mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountb_v64qi_mask(
      (__v64qi)__A, (__v64qi)__W, (__mmask64)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi8(__mmask64 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountb_v64qi_mask(
      (__v64qi)__A, (__v64qi)_mm512_setzero_si512(), (__mmask64)__U);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_popcnt_epi16(__m512i __W, __mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountw_v32hi_mask(
      (__v32hi)__A, (__v32hi)__W, (__mmask32)__U);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_popcnt_epi16(__mmask32 __U, __m512i __A) {
  return (__m512i)__builtin_ia32_vpopcountw_v32hi_mask(
      (__v32hi)__A, (__v32hi)_mm512_setzero_si512(), (__mmask32)__U);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_bitshuffle_epi64_mask(__m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_vpshufbitqmb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__mmask64)-1);
}

extern __inline __mmask64
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_bitshuffle_epi64_mask(__mmask64 __M, __m512i __A, __m512i __B) {
  return (__mmask64)__builtin_ia32_vpshufbitqmb512_mask(
      (__v64qi)__A, (__v64qi)__B, (__mmask64)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi8(__m256i __W, __mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountb_v32qi_mask(
      (__v32qi)__A, (__v32qi)__W, (__mmask32)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi8(__mmask32 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountb_v32qi_mask(
      (__v32qi)__A, (__v32qi)_mm256_setzero_si256(), (__mmask32)__U);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_bitshuffle_epi64_mask(__m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_vpshufbitqmb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__mmask32)-1);
}

extern __inline __mmask32
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_bitshuffle_epi64_mask(__mmask32 __M, __m256i __A, __m256i __B) {
  return (__mmask32)__builtin_ia32_vpshufbitqmb256_mask(
      (__v32qi)__A, (__v32qi)__B, (__mmask32)__M);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_bitshuffle_epi64_mask(__m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_vpshufbitqmb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__mmask16)-1);
}

extern __inline __mmask16
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_bitshuffle_epi64_mask(__mmask16 __M, __m128i __A, __m128i __B) {
  return (__mmask16)__builtin_ia32_vpshufbitqmb128_mask(
      (__v16qi)__A, (__v16qi)__B, (__mmask16)__M);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi8(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountb_v32qi((__v32qi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_popcnt_epi16(__m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountw_v16hi((__v16hi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi8(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountb_v16qi((__v16qi)__A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_popcnt_epi16(__m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountw_v8hi((__v8hi)__A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_popcnt_epi16(__m256i __W, __mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountw_v16hi_mask(
      (__v16hi)__A, (__v16hi)__W, (__mmask16)__U);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_popcnt_epi16(__mmask16 __U, __m256i __A) {
  return (__m256i)__builtin_ia32_vpopcountw_v16hi_mask(
      (__v16hi)__A, (__v16hi)_mm256_setzero_si256(), (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi8(__m128i __W, __mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountb_v16qi_mask(
      (__v16qi)__A, (__v16qi)__W, (__mmask16)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi8(__mmask16 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountb_v16qi_mask(
      (__v16qi)__A, (__v16qi)_mm_setzero_si128(), (__mmask16)__U);
}
extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_popcnt_epi16(__m128i __W, __mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountw_v8hi_mask((__v8hi)__A, (__v8hi)__W,
                                                      (__mmask8)__U);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_popcnt_epi16(__mmask8 __U, __m128i __A) {
  return (__m128i)__builtin_ia32_vpopcountw_v8hi_mask(
      (__v8hi)__A, (__v8hi)_mm_setzero_si128(), (__mmask8)__U);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_2intersect_epi32(__m512i __A, __m512i __B, __mmask16 *__U,
                            __mmask16 *__M) {
  __builtin_ia32_2intersectd512(__U, __M, (__v16si)__A, (__v16si)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_2intersect_epi64(__m512i __A, __m512i __B, __mmask8 *__U,
                            __mmask8 *__M) {
  __builtin_ia32_2intersectq512(__U, __M, (__v8di)__A, (__v8di)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm_2intersect_epi32(__m128i __A, __m128i __B, __mmask8 *__U, __mmask8 *__M) {
  __builtin_ia32_2intersectd128(__U, __M, (__v4si)__A, (__v4si)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_2intersect_epi32(__m256i __A, __m256i __B, __mmask8 *__U,
                            __mmask8 *__M) {
  __builtin_ia32_2intersectd256(__U, __M, (__v8si)__A, (__v8si)__B);
}

extern __inline void __attribute__((__gnu_inline__, __always_inline__,
                                    __artificial__))
_mm_2intersect_epi64(__m128i __A, __m128i __B, __mmask8 *__U, __mmask8 *__M) {
  __builtin_ia32_2intersectq128(__U, __M, (__v2di)__A, (__v2di)__B);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_2intersect_epi64(__m256i __A, __m256i __B, __mmask8 *__U,
                            __mmask8 *__M) {
  __builtin_ia32_2intersectq256(__U, __M, (__v4di)__A, (__v4di)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1msg1_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha1msg1((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1msg2_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha1msg2((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1nexte_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha1nexte((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha1rnds4_epu32(__m128i __A, __m128i __B, const int __I) {
  return (__m128i)__builtin_ia32_sha1rnds4((__v4si)__A, (__v4si)__B, __I);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha256msg1_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha256msg1((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha256msg2_epu32(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_sha256msg2((__v4si)__A, (__v4si)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_sha256rnds2_epu32(__m128i __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_sha256rnds2((__v4si)__A, (__v4si)__B,
                                             (__v4si)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddpd((__v2df)__A, (__v2df)__B,
                                          (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmadd_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddpd256((__v4df)__A, (__v4df)__B,
                                             (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmadd_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddps256((__v8sf)__A, (__v8sf)__B,
                                            (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsd3((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmadd_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddss3((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubpd((__v2df)__A, (__v2df)__B,
                                          (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsub_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmsubpd256((__v4df)__A, (__v4df)__B,
                                             (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubps((__v4sf)__A, (__v4sf)__B, (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsub_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmsubps256((__v8sf)__A, (__v8sf)__B,
                                            (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmsubsd3((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsub_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmsubss3((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddpd((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmadd_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmaddpd256((__v4df)__A, (__v4df)__B,
                                              (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddps((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmadd_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmaddps256((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmaddsd3((__v2df)__A, (__v2df)__B,
                                            (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmadd_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmaddss3((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubpd((__v2df)__A, (__v2df)__B,
                                           (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmsub_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfnmsubpd256((__v4df)__A, (__v4df)__B,
                                              (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubps((__v4sf)__A, (__v4sf)__B,
                                          (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fnmsub_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfnmsubps256((__v8sf)__A, (__v8sf)__B,
                                             (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_sd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfnmsubsd3((__v2df)__A, (__v2df)__B,
                                            (__v2df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fnmsub_ss(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfnmsubss3((__v4sf)__A, (__v4sf)__B,
                                           (__v4sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmaddsub_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B,
                                             (__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmaddsub_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B,
                                                (__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmaddsub_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B,
                                            (__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmaddsub_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B,
                                               (__v8sf)__C);
}

extern __inline __m128d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsubadd_pd(__m128d __A, __m128d __B, __m128d __C) {
  return (__m128d)__builtin_ia32_vfmaddsubpd((__v2df)__A, (__v2df)__B,
                                             -(__v2df)__C);
}

extern __inline __m256d
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsubadd_pd(__m256d __A, __m256d __B, __m256d __C) {
  return (__m256d)__builtin_ia32_vfmaddsubpd256((__v4df)__A, (__v4df)__B,
                                                -(__v4df)__C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_fmsubadd_ps(__m128 __A, __m128 __B, __m128 __C) {
  return (__m128)__builtin_ia32_vfmaddsubps((__v4sf)__A, (__v4sf)__B,
                                            -(__v4sf)__C);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_fmsubadd_ps(__m256 __A, __m256 __B, __m256 __C) {
  return (__m256)__builtin_ia32_vfmaddsubps256((__v8sf)__A, (__v8sf)__B,
                                               -(__v8sf)__C);
}

extern __inline float
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtsh_ss(unsigned short __S) {
  __v8hi __H = __extension__(__v8hi){(short)__S, 0, 0, 0, 0, 0, 0, 0};
  __v4sf __A = __builtin_ia32_vcvtph2ps(__H);
  return __builtin_ia32_vec_ext_v4sf(__A, 0);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtph_ps(__m128i __A) {
  return (__m128)__builtin_ia32_vcvtph2ps((__v8hi)__A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtph_ps(__m128i __A) {
  return (__m256)__builtin_ia32_vcvtph2ps256((__v8hi)__A);
}

extern __inline unsigned short
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _cvtss_sh(float __F, const int __I) {
  __v4sf __A = __extension__(__v4sf){__F, 0, 0, 0};
  __v8hi __H = __builtin_ia32_vcvtps2ph(__A, __I);
  return (unsigned short)__builtin_ia32_vec_ext_v8hi(__H, 0);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtps_ph(__m128 __A, const int __I) {
  return (__m128i)__builtin_ia32_vcvtps2ph((__v4sf)__A, __I);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtps_ph(__m256 __A, const int __I) {
  return (__m128i)__builtin_ia32_vcvtps2ph256((__v8sf)__A, __I);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_gf2p8mul_epi8(__m128i __A, __m128i __B) {
  return (__m128i)__builtin_ia32_vgf2p8mulb_v16qi((__v16qi)__A, (__v16qi)__B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_gf2p8affineinv_epi64_epi8(__m128i __A, __m128i __B, const int __C) {
  return (__m128i)__builtin_ia32_vgf2p8affineinvqb_v16qi((__v16qi)__A,
                                                         (__v16qi)__B, __C);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_gf2p8affine_epi64_epi8(__m128i __A, __m128i __B, const int __C) {
  return (__m128i)__builtin_ia32_vgf2p8affineqb_v16qi((__v16qi)__A,
                                                      (__v16qi)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_gf2p8mul_epi8(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vgf2p8mulb_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_gf2p8affineinv_epi64_epi8(__m256i __A, __m256i __B, const int __C) {
  return (__m256i)__builtin_ia32_vgf2p8affineinvqb_v32qi((__v32qi)__A,
                                                         (__v32qi)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_gf2p8affine_epi64_epi8(__m256i __A, __m256i __B, const int __C) {
  return (__m256i)__builtin_ia32_vgf2p8affineqb_v32qi((__v32qi)__A,
                                                      (__v32qi)__B, __C);
}

extern __inline __m128i __attribute__((__gnu_inline__, __always_inline__,
                                       __artificial__))
_mm_mask_gf2p8mul_epi8(__m128i __A, __mmask16 __B, __m128i __C, __m128i __D) {
  return (__m128i)__builtin_ia32_vgf2p8mulb_v16qi_mask(
      (__v16qi)__C, (__v16qi)__D, (__v16qi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_gf2p8mul_epi8(__mmask16 __A, __m128i __B, __m128i __C) {
  return (__m128i)__builtin_ia32_vgf2p8mulb_v16qi_mask(
      (__v16qi)__B, (__v16qi)__C, (__v16qi)_mm_setzero_si128(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_gf2p8affineinv_epi64_epi8(__m128i __A, __mmask16 __B, __m128i __C,
                                       __m128i __D, const int __E) {
  return (__m128i)__builtin_ia32_vgf2p8affineinvqb_v16qi_mask(
      (__v16qi)__C, (__v16qi)__D, __E, (__v16qi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_gf2p8affineinv_epi64_epi8(__mmask16 __A, __m128i __B, __m128i __C,
                                        const int __D) {
  return (__m128i)__builtin_ia32_vgf2p8affineinvqb_v16qi_mask(
      (__v16qi)__B, (__v16qi)__C, __D, (__v16qi)_mm_setzero_si128(), __A);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_gf2p8affine_epi64_epi8(__m128i __A, __mmask16 __B, __m128i __C,
                                    __m128i __D, const int __E) {
  return (__m128i)__builtin_ia32_vgf2p8affineqb_v16qi_mask(
      (__v16qi)__C, (__v16qi)__D, __E, (__v16qi)__A, __B);
}

extern __inline __m128i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_gf2p8affine_epi64_epi8(__mmask16 __A, __m128i __B, __m128i __C,
                                     const int __D) {
  return (__m128i)__builtin_ia32_vgf2p8affineqb_v16qi_mask(
      (__v16qi)__B, (__v16qi)__C, __D, (__v16qi)_mm_setzero_si128(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_gf2p8mul_epi8(__m256i __A, __mmask32 __B, __m256i __C,
                              __m256i __D) {
  return (__m256i)__builtin_ia32_vgf2p8mulb_v32qi_mask(
      (__v32qi)__C, (__v32qi)__D, (__v32qi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_gf2p8mul_epi8(__mmask32 __A, __m256i __B, __m256i __C) {
  return (__m256i)__builtin_ia32_vgf2p8mulb_v32qi_mask(
      (__v32qi)__B, (__v32qi)__C, (__v32qi)_mm256_setzero_si256(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_gf2p8affineinv_epi64_epi8(__m256i __A, __mmask32 __B,
                                          __m256i __C, __m256i __D,
                                          const int __E) {
  return (__m256i)__builtin_ia32_vgf2p8affineinvqb_v32qi_mask(
      (__v32qi)__C, (__v32qi)__D, __E, (__v32qi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_gf2p8affineinv_epi64_epi8(__mmask32 __A, __m256i __B,
                                           __m256i __C, const int __D) {
  return (__m256i)__builtin_ia32_vgf2p8affineinvqb_v32qi_mask(
      (__v32qi)__B, (__v32qi)__C, __D, (__v32qi)_mm256_setzero_si256(), __A);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_gf2p8affine_epi64_epi8(__m256i __A, __mmask32 __B, __m256i __C,
                                       __m256i __D, const int __E) {
  return (__m256i)__builtin_ia32_vgf2p8affineqb_v32qi_mask(
      (__v32qi)__C, (__v32qi)__D, __E, (__v32qi)__A, __B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_gf2p8affine_epi64_epi8(__mmask32 __A, __m256i __B, __m256i __C,
                                        const int __D) {
  return (__m256i)__builtin_ia32_vgf2p8affineqb_v32qi_mask(
      (__v32qi)__B, (__v32qi)__C, __D, (__v32qi)_mm256_setzero_si256(), __A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_gf2p8mul_epi8(__m512i __A, __mmask64 __B, __m512i __C,
                              __m512i __D) {
  return (__m512i)__builtin_ia32_vgf2p8mulb_v64qi_mask(
      (__v64qi)__C, (__v64qi)__D, (__v64qi)__A, __B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_gf2p8mul_epi8(__mmask64 __A, __m512i __B, __m512i __C) {
  return (__m512i)__builtin_ia32_vgf2p8mulb_v64qi_mask(
      (__v64qi)__B, (__v64qi)__C, (__v64qi)_mm512_setzero_si512(), __A);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_gf2p8mul_epi8(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vgf2p8mulb_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_gf2p8affineinv_epi64_epi8(__m512i __A, __mmask64 __B,
                                          __m512i __C, __m512i __D,
                                          const int __E) {
  return (__m512i)__builtin_ia32_vgf2p8affineinvqb_v64qi_mask(
      (__v64qi)__C, (__v64qi)__D, __E, (__v64qi)__A, __B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_gf2p8affineinv_epi64_epi8(__mmask64 __A, __m512i __B,
                                           __m512i __C, const int __D) {
  return (__m512i)__builtin_ia32_vgf2p8affineinvqb_v64qi_mask(
      (__v64qi)__B, (__v64qi)__C, __D, (__v64qi)_mm512_setzero_si512(), __A);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_gf2p8affineinv_epi64_epi8(__m512i __A, __m512i __B, const int __C) {
  return (__m512i)__builtin_ia32_vgf2p8affineinvqb_v64qi((__v64qi)__A,
                                                         (__v64qi)__B, __C);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_gf2p8affine_epi64_epi8(__m512i __A, __mmask64 __B, __m512i __C,
                                       __m512i __D, const int __E) {
  return (__m512i)__builtin_ia32_vgf2p8affineqb_v64qi_mask(
      (__v64qi)__C, (__v64qi)__D, __E, (__v64qi)__A, __B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_gf2p8affine_epi64_epi8(__mmask64 __A, __m512i __B, __m512i __C,
                                        const int __D) {
  return (__m512i)__builtin_ia32_vgf2p8affineqb_v64qi_mask(
      (__v64qi)__B, (__v64qi)__C, __D, (__v64qi)_mm512_setzero_si512(), __A);
}
extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_gf2p8affine_epi64_epi8(__m512i __A, __m512i __B, const int __C) {
  return (__m512i)__builtin_ia32_vgf2p8affineqb_v64qi((__v64qi)__A,
                                                      (__v64qi)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesdec_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesdec_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesdeclast_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesdeclast_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesenc_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesenc_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_aesenclast_epi128(__m256i __A, __m256i __B) {
  return (__m256i)__builtin_ia32_vaesenclast_v32qi((__v32qi)__A, (__v32qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesdec_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesdec_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesdeclast_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesdeclast_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesenc_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesenc_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_aesenclast_epi128(__m512i __A, __m512i __B) {
  return (__m512i)__builtin_ia32_vaesenclast_v64qi((__v64qi)__A, (__v64qi)__B);
}

extern __inline __m512i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_clmulepi64_epi128(__m512i __A, __m512i __B, const int __C) {
  return (__m512i)__builtin_ia32_vpclmulqdq_v8di((__v8di)__A, (__v8di)__B, __C);
}

extern __inline __m256i
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_clmulepi64_epi128(__m256i __A, __m256i __B, const int __C) {
  return (__m256i)__builtin_ia32_vpclmulqdq_v4di((__v4di)__A, (__v4di)__B, __C);
}

typedef short __v16bh __attribute__((__vector_size__(32)));
typedef short __v8bh __attribute__((__vector_size__(16)));

typedef short __m256bh __attribute__((__vector_size__(32), __may_alias__));
typedef short __m128bh __attribute__((__vector_size__(16), __may_alias__));

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtne2ps_pbh(__m256 __A, __m256 __B) {
  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi(__A, __B);
}

extern __inline __m256bh __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm256_mask_cvtne2ps_pbh(__m256bh __A, __mmask16 __B, __m256 __C, __m256 __D) {
  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi_mask(__C, __D, __A, __B);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtne2ps_pbh(__mmask16 __A, __m256 __B, __m256 __C) {
  return (__m256bh)__builtin_ia32_cvtne2ps2bf16_v16hi_maskz(__B, __C, __A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtne2ps_pbh(__m128 __A, __m128 __B) {
  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi(__A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtne2ps_pbh(__m128bh __A, __mmask8 __B, __m128 __C, __m128 __D) {
  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi_mask(__C, __D, __A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtne2ps_pbh(__mmask8 __A, __m128 __B, __m128 __C) {
  return (__m128bh)__builtin_ia32_cvtne2ps2bf16_v8hi_maskz(__B, __C, __A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_cvtneps_pbh(__m256 __A) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf(__A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_mask_cvtneps_pbh(__m128bh __A, __mmask8 __B, __m256 __C) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_mask(__C, __A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_maskz_cvtneps_pbh(__mmask8 __A, __m256 __B) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v8sf_maskz(__B, __A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_cvtneps_pbh(__m128 __A) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf(__A);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_cvtneps_pbh(__m128bh __A, __mmask8 __B, __m128 __C) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf_mask(__C, __A, __B);
}

extern __inline __m128bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_cvtneps_pbh(__mmask8 __A, __m128 __B) {
  return (__m128bh)__builtin_ia32_cvtneps2bf16_v4sf_maskz(__B, __A);
}

extern __inline __m256
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm256_dpbf16_ps(__m256 __A, __m256bh __B, __m256bh __C) {
  return (__m256)__builtin_ia32_dpbf16ps_v8sf(__A, __B, __C);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_mask_dpbf16_ps(__m256 __A, __mmask8 __B, __m256bh __C, __m256bh __D) {
  return (__m256)__builtin_ia32_dpbf16ps_v8sf_mask(__A, __C, __D, __B);
}

extern __inline __m256 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm256_maskz_dpbf16_ps(__mmask8 __A, __m256 __B, __m256bh __C, __m256bh __D) {
  return (__m256)__builtin_ia32_dpbf16ps_v8sf_maskz(__B, __C, __D, __A);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_dpbf16_ps(__m128 __A, __m128bh __B, __m128bh __C) {
  return (__m128)__builtin_ia32_dpbf16ps_v4sf(__A, __B, __C);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_mask_dpbf16_ps(__m128 __A, __mmask8 __B, __m128bh __C, __m128bh __D) {
  return (__m128)__builtin_ia32_dpbf16ps_v4sf_mask(__A, __C, __D, __B);
}

extern __inline __m128
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_maskz_dpbf16_ps(__mmask8 __A, __m128 __B, __m128bh __C, __m128bh __D) {
  return (__m128)__builtin_ia32_dpbf16ps_v4sf_maskz(__B, __C, __D, __A);
}

typedef short __v32bh __attribute__((__vector_size__(64)));

typedef short __m512bh __attribute__((__vector_size__(64), __may_alias__));

extern __inline __m512bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtne2ps_pbh(__m512 __A, __m512 __B) {
  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi(__A, __B);
}

extern __inline __m512bh __attribute__((__gnu_inline__, __always_inline__,
                                        __artificial__))
_mm512_mask_cvtne2ps_pbh(__m512bh __A, __mmask32 __B, __m512 __C, __m512 __D) {
  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi_mask(__C, __D, __A, __B);
}

extern __inline __m512bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtne2ps_pbh(__mmask32 __A, __m512 __B, __m512 __C) {
  return (__m512bh)__builtin_ia32_cvtne2ps2bf16_v32hi_maskz(__B, __C, __A);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_cvtneps_pbh(__m512 __A) {
  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf(__A);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_mask_cvtneps_pbh(__m256bh __A, __mmask16 __B, __m512 __C) {
  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf_mask(__C, __A, __B);
}

extern __inline __m256bh
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_maskz_cvtneps_pbh(__mmask16 __A, __m512 __B) {
  return (__m256bh)__builtin_ia32_cvtneps2bf16_v16sf_maskz(__B, __A);
}

extern __inline __m512
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm512_dpbf16_ps(__m512 __A, __m512bh __B, __m512bh __C) {
  return (__m512)__builtin_ia32_dpbf16ps_v16sf(__A, __B, __C);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_mask_dpbf16_ps(__m512 __A, __mmask16 __B, __m512bh __C, __m512bh __D) {
  return (__m512)__builtin_ia32_dpbf16ps_v16sf_mask(__A, __C, __D, __B);
}

extern __inline __m512 __attribute__((__gnu_inline__, __always_inline__,
                                      __artificial__))
_mm512_maskz_dpbf16_ps(__mmask16 __A, __m512 __B, __m512bh __C, __m512bh __D) {
  return (__m512)__builtin_ia32_dpbf16ps_v16sf_maskz(__B, __C, __D, __A);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tile_loadconfig(const void *__config) {
  __asm__ volatile("ldtilecfg\t%X0" ::"m"(*((const void **)__config)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tile_storeconfig(void *__config) {
  __asm__ volatile("sttilecfg\t%X0" : "=m"(*((void **)__config)));
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _tile_release(void) {
  __asm__ volatile("tilerelease" ::);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _m_prefetchw(void *__P) {
  __builtin_prefetch(__P, 1, 3);
}

extern __inline void
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_loadiwkey(unsigned int __I, __m128i __A, __m128i __B, __m128i __C) {
  __builtin_ia32_loadiwkey((__v2di)__B, (__v2di)__C, (__v2di)__A, __I);
}

extern __inline unsigned int
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_encodekey128_u32(unsigned int __I, __m128i __A, void *__P) {
  return __builtin_ia32_encodekey128_u32(__I, (__v2di)__A, __P);
}

extern __inline unsigned int __attribute__((__gnu_inline__, __always_inline__,
                                            __artificial__))
_mm_encodekey256_u32(unsigned int __I, __m128i __A, __m128i __B, void *__P) {
  return __builtin_ia32_encodekey256_u32(__I, (__v2di)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdec128kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesdec128kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesdec256kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesdec256kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenc128kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesenc128kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char
    __attribute__((__gnu_inline__, __always_inline__, __artificial__))
    _mm_aesenc256kl_u8(__m128i *__A, __m128i __B, const void *__P) {
  return __builtin_ia32_aesenc256kl_u8((__v2di *)__A, (__v2di)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesdecwide128kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesdecwide128kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesdecwide256kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesdecwide256kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesencwide128kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesencwide128kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __inline unsigned char __attribute__((__gnu_inline__, __always_inline__,
                                             __artificial__))
_mm_aesencwide256kl_u8(__m128i __A[8], const __m128i __B[8], const void *__P) {
  return __builtin_ia32_aesencwide256kl_u8((__v2di *)__A, (__v2di *)__B, __P);
}

extern __attribute__((visibility("default"))) int SDL_GetCPUCount(void);
extern __attribute__((visibility("default"))) int SDL_GetCPUCacheLineSize(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasRDTSC(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasAltiVec(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasMMX(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_Has3DNow(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasSSE(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasSSE2(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasSSE3(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasSSE41(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasSSE42(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasAVX(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasAVX2(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasAVX512F(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasARMSIMD(void);
extern __attribute__((visibility("default"))) SDL_bool SDL_HasNEON(void);
extern __attribute__((visibility("default"))) int SDL_GetSystemRAM(void);
extern __attribute__((visibility("default"))) size_t SDL_SIMDGetAlignment(void);
extern __attribute__((visibility("default"))) void *
SDL_SIMDAlloc(const size_t len);
extern __attribute__((visibility("default"))) void *
SDL_SIMDRealloc(void *mem, const size_t len);
extern __attribute__((visibility("default"))) void SDL_SIMDFree(void *ptr);

typedef enum {
  SDL_PIXELTYPE_UNKNOWN,
  SDL_PIXELTYPE_INDEX1,
  SDL_PIXELTYPE_INDEX4,
  SDL_PIXELTYPE_INDEX8,
  SDL_PIXELTYPE_PACKED8,
  SDL_PIXELTYPE_PACKED16,
  SDL_PIXELTYPE_PACKED32,
  SDL_PIXELTYPE_ARRAYU8,
  SDL_PIXELTYPE_ARRAYU16,
  SDL_PIXELTYPE_ARRAYU32,
  SDL_PIXELTYPE_ARRAYF16,
  SDL_PIXELTYPE_ARRAYF32
} SDL_PixelType;

typedef enum {
  SDL_BITMAPORDER_NONE,
  SDL_BITMAPORDER_4321,
  SDL_BITMAPORDER_1234
} SDL_BitmapOrder;

typedef enum {
  SDL_PACKEDORDER_NONE,
  SDL_PACKEDORDER_XRGB,
  SDL_PACKEDORDER_RGBX,
  SDL_PACKEDORDER_ARGB,
  SDL_PACKEDORDER_RGBA,
  SDL_PACKEDORDER_XBGR,
  SDL_PACKEDORDER_BGRX,
  SDL_PACKEDORDER_ABGR,
  SDL_PACKEDORDER_BGRA
} SDL_PackedOrder;

typedef enum {
  SDL_ARRAYORDER_NONE,
  SDL_ARRAYORDER_RGB,
  SDL_ARRAYORDER_RGBA,
  SDL_ARRAYORDER_ARGB,
  SDL_ARRAYORDER_BGR,
  SDL_ARRAYORDER_BGRA,
  SDL_ARRAYORDER_ABGR
} SDL_ArrayOrder;

typedef enum {
  SDL_PACKEDLAYOUT_NONE,
  SDL_PACKEDLAYOUT_332,
  SDL_PACKEDLAYOUT_4444,
  SDL_PACKEDLAYOUT_1555,
  SDL_PACKEDLAYOUT_5551,
  SDL_PACKEDLAYOUT_565,
  SDL_PACKEDLAYOUT_8888,
  SDL_PACKEDLAYOUT_2101010,
  SDL_PACKEDLAYOUT_1010102
} SDL_PackedLayout;

typedef enum {
  SDL_PIXELFORMAT_UNKNOWN,
  SDL_PIXELFORMAT_INDEX1LSB =
      ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) |
       ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX1MSB =
      ((1 << 28) | ((SDL_PIXELTYPE_INDEX1) << 24) |
       ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((1) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX4LSB =
      ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) |
       ((SDL_BITMAPORDER_4321) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX4MSB =
      ((1 << 28) | ((SDL_PIXELTYPE_INDEX4) << 24) |
       ((SDL_BITMAPORDER_1234) << 20) | ((0) << 16) | ((4) << 8) | ((0) << 0)),
  SDL_PIXELFORMAT_INDEX8 =
      ((1 << 28) | ((SDL_PIXELTYPE_INDEX8) << 24) | ((0) << 20) | ((0) << 16) |
       ((8) << 8) | ((1) << 0)),
  SDL_PIXELFORMAT_RGB332 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED8) << 24) |
       ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_332) << 16) |
       ((8) << 8) | ((1) << 0)),
  SDL_PIXELFORMAT_XRGB4444 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) |
       ((12) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB444 = SDL_PIXELFORMAT_XRGB4444,
  SDL_PIXELFORMAT_XBGR4444 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) |
       ((12) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGR444 = SDL_PIXELFORMAT_XBGR4444,
  SDL_PIXELFORMAT_XRGB1555 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) |
       ((15) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB555 = SDL_PIXELFORMAT_XRGB1555,
  SDL_PIXELFORMAT_XBGR1555 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) |
       ((15) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGR555 = SDL_PIXELFORMAT_XBGR1555,
  SDL_PIXELFORMAT_ARGB4444 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGBA4444 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ABGR4444 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGRA4444 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_4444) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ARGB1555 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGBA5551 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_ABGR1555 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_1555) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGRA5551 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_5551) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB565 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_BGR565 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED16) << 24) |
       ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_565) << 16) |
       ((16) << 8) | ((2) << 0)),
  SDL_PIXELFORMAT_RGB24 =
      ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) |
       ((SDL_ARRAYORDER_RGB) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),
  SDL_PIXELFORMAT_BGR24 =
      ((1 << 28) | ((SDL_PIXELTYPE_ARRAYU8) << 24) |
       ((SDL_ARRAYORDER_BGR) << 20) | ((0) << 16) | ((24) << 8) | ((3) << 0)),
  SDL_PIXELFORMAT_XRGB8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_XRGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_RGB888 = SDL_PIXELFORMAT_XRGB8888,
  SDL_PIXELFORMAT_RGBX8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_RGBX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_XBGR8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_XBGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_BGR888 = SDL_PIXELFORMAT_XBGR8888,
  SDL_PIXELFORMAT_BGRX8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_BGRX) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((24) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_ARGB8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_RGBA8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_RGBA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_ABGR8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_ABGR) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_BGRA8888 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_BGRA) << 20) | ((SDL_PACKEDLAYOUT_8888) << 16) |
       ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_ARGB2101010 =
      ((1 << 28) | ((SDL_PIXELTYPE_PACKED32) << 24) |
       ((SDL_PACKEDORDER_ARGB) << 20) | ((SDL_PACKEDLAYOUT_2101010) << 16) |
       ((32) << 8) | ((4) << 0)),
  SDL_PIXELFORMAT_RGBA32 = SDL_PIXELFORMAT_ABGR8888,
  SDL_PIXELFORMAT_ARGB32 = SDL_PIXELFORMAT_BGRA8888,
  SDL_PIXELFORMAT_BGRA32 = SDL_PIXELFORMAT_ARGB8888,
  SDL_PIXELFORMAT_ABGR32 = SDL_PIXELFORMAT_RGBA8888,

  SDL_PIXELFORMAT_YV12 = ((((Uint32)(((Uint8)(('Y'))))) << 0) |
                          (((Uint32)(((Uint8)(('V'))))) << 8) |
                          (((Uint32)(((Uint8)(('1'))))) << 16) |
                          (((Uint32)(((Uint8)(('2'))))) << 24)),
  SDL_PIXELFORMAT_IYUV = ((((Uint32)(((Uint8)(('I'))))) << 0) |
                          (((Uint32)(((Uint8)(('Y'))))) << 8) |
                          (((Uint32)(((Uint8)(('U'))))) << 16) |
                          (((Uint32)(((Uint8)(('V'))))) << 24)),
  SDL_PIXELFORMAT_YUY2 = ((((Uint32)(((Uint8)(('Y'))))) << 0) |
                          (((Uint32)(((Uint8)(('U'))))) << 8) |
                          (((Uint32)(((Uint8)(('Y'))))) << 16) |
                          (((Uint32)(((Uint8)(('2'))))) << 24)),
  SDL_PIXELFORMAT_UYVY = ((((Uint32)(((Uint8)(('U'))))) << 0) |
                          (((Uint32)(((Uint8)(('Y'))))) << 8) |
                          (((Uint32)(((Uint8)(('V'))))) << 16) |
                          (((Uint32)(((Uint8)(('Y'))))) << 24)),
  SDL_PIXELFORMAT_YVYU = ((((Uint32)(((Uint8)(('Y'))))) << 0) |
                          (((Uint32)(((Uint8)(('V'))))) << 8) |
                          (((Uint32)(((Uint8)(('Y'))))) << 16) |
                          (((Uint32)(((Uint8)(('U'))))) << 24)),
  SDL_PIXELFORMAT_NV12 = ((((Uint32)(((Uint8)(('N'))))) << 0) |
                          (((Uint32)(((Uint8)(('V'))))) << 8) |
                          (((Uint32)(((Uint8)(('1'))))) << 16) |
                          (((Uint32)(((Uint8)(('2'))))) << 24)),
  SDL_PIXELFORMAT_NV21 = ((((Uint32)(((Uint8)(('N'))))) << 0) |
                          (((Uint32)(((Uint8)(('V'))))) << 8) |
                          (((Uint32)(((Uint8)(('2'))))) << 16) |
                          (((Uint32)(((Uint8)(('1'))))) << 24)),
  SDL_PIXELFORMAT_EXTERNAL_OES = ((((Uint32)(((Uint8)(('O'))))) << 0) |
                                  (((Uint32)(((Uint8)(('E'))))) << 8) |
                                  (((Uint32)(((Uint8)(('S'))))) << 16) |
                                  (((Uint32)(((Uint8)((' '))))) << 24))
} SDL_PixelFormatEnum;

typedef struct SDL_Color {
  Uint8 r;
  Uint8 g;
  Uint8 b;
  Uint8 a;
} SDL_Color;

typedef struct SDL_Palette {
  int ncolors;
  SDL_Color *colors;
  Uint32 version;
  int refcount;
} SDL_Palette;

typedef struct SDL_PixelFormat {
  Uint32 format;
  SDL_Palette *palette;
  Uint8 BitsPerPixel;
  Uint8 BytesPerPixel;
  Uint8 padding[2];
  Uint32 Rmask;
  Uint32 Gmask;
  Uint32 Bmask;
  Uint32 Amask;
  Uint8 Rloss;
  Uint8 Gloss;
  Uint8 Bloss;
  Uint8 Aloss;
  Uint8 Rshift;
  Uint8 Gshift;
  Uint8 Bshift;
  Uint8 Ashift;
  int refcount;
  struct SDL_PixelFormat *next;
} SDL_PixelFormat;
extern __attribute__((visibility("default"))) const char *
SDL_GetPixelFormatName(Uint32 format);
extern __attribute__((visibility("default"))) SDL_bool
SDL_PixelFormatEnumToMasks(Uint32 format, int *bpp, Uint32 *Rmask,
                           Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask);
extern __attribute__((visibility("default"))) Uint32
SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask,
                           Uint32 Amask);
extern __attribute__((visibility("default"))) SDL_PixelFormat *
SDL_AllocFormat(Uint32 pixel_format);
extern __attribute__((visibility("default"))) void
SDL_FreeFormat(SDL_PixelFormat *format);
extern __attribute__((visibility("default"))) SDL_Palette *
SDL_AllocPalette(int ncolors);
extern __attribute__((visibility("default"))) int
SDL_SetPixelFormatPalette(SDL_PixelFormat *format, SDL_Palette *palette);
extern __attribute__((visibility("default"))) int
SDL_SetPaletteColors(SDL_Palette *palette, const SDL_Color *colors,
                     int firstcolor, int ncolors);
extern __attribute__((visibility("default"))) void
SDL_FreePalette(SDL_Palette *palette);
extern __attribute__((visibility("default"))) Uint32
SDL_MapRGB(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b);
extern __attribute__((visibility("default"))) Uint32
SDL_MapRGBA(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
extern __attribute__((visibility("default"))) void
SDL_GetRGB(Uint32 pixel, const SDL_PixelFormat *format, Uint8 *r, Uint8 *g,
           Uint8 *b);
extern __attribute__((visibility("default"))) void
SDL_GetRGBA(Uint32 pixel, const SDL_PixelFormat *format, Uint8 *r, Uint8 *g,
            Uint8 *b, Uint8 *a);
extern __attribute__((visibility("default"))) void
SDL_CalculateGammaRamp(float gamma, Uint16 *ramp);

typedef struct SDL_Point {
  int x;
  int y;
} SDL_Point;

typedef struct SDL_FPoint {
  float x;
  float y;
} SDL_FPoint;
typedef struct SDL_Rect {
  int x, y;
  int w, h;
} SDL_Rect;

typedef struct SDL_FRect {
  float x;
  float y;
  float w;
  float h;
} SDL_FRect;

__attribute__((always_inline)) static __inline__ SDL_bool
SDL_PointInRect(const SDL_Point *p, const SDL_Rect *r) {
  return ((p->x >= r->x) && (p->x < (r->x + r->w)) && (p->y >= r->y) &&
          (p->y < (r->y + r->h)))
             ? SDL_TRUE
             : SDL_FALSE;
}

__attribute__((always_inline)) static __inline__ SDL_bool
SDL_RectEmpty(const SDL_Rect *r) {
  return ((!r) || (r->w <= 0) || (r->h <= 0)) ? SDL_TRUE : SDL_FALSE;
}

__attribute__((always_inline)) static __inline__ SDL_bool
SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b) {
  return (a && b && (a->x == b->x) && (a->y == b->y) && (a->w == b->w) &&
          (a->h == b->h))
             ? SDL_TRUE
             : SDL_FALSE;
}
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasIntersection(const SDL_Rect *A, const SDL_Rect *B);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IntersectRect(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
extern __attribute__((visibility("default"))) void
SDL_UnionRect(const SDL_Rect *A, const SDL_Rect *B, SDL_Rect *result);
extern __attribute__((visibility("default"))) SDL_bool
SDL_EnclosePoints(const SDL_Point *points, int count, const SDL_Rect *clip,
                  SDL_Rect *result);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IntersectRectAndLine(const SDL_Rect *rect, int *X1, int *Y1, int *X2,
                         int *Y2);

typedef enum {
  SDL_BLENDMODE_NONE = 0x00000000,

  SDL_BLENDMODE_BLEND = 0x00000001,

  SDL_BLENDMODE_ADD = 0x00000002,

  SDL_BLENDMODE_MOD = 0x00000004,

  SDL_BLENDMODE_MUL = 0x00000008,

  SDL_BLENDMODE_INVALID = 0x7FFFFFFF

} SDL_BlendMode;

typedef enum {
  SDL_BLENDOPERATION_ADD = 0x1,
  SDL_BLENDOPERATION_SUBTRACT = 0x2,
  SDL_BLENDOPERATION_REV_SUBTRACT = 0x3,
  SDL_BLENDOPERATION_MINIMUM = 0x4,
  SDL_BLENDOPERATION_MAXIMUM = 0x5

} SDL_BlendOperation;

typedef enum {
  SDL_BLENDFACTOR_ZERO = 0x1,
  SDL_BLENDFACTOR_ONE = 0x2,
  SDL_BLENDFACTOR_SRC_COLOR = 0x3,
  SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 0x4,
  SDL_BLENDFACTOR_SRC_ALPHA = 0x5,
  SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 0x6,
  SDL_BLENDFACTOR_DST_COLOR = 0x7,
  SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 0x8,
  SDL_BLENDFACTOR_DST_ALPHA = 0x9,
  SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 0xA

} SDL_BlendFactor;
extern __attribute__((visibility("default"))) SDL_BlendMode
SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor,
                           SDL_BlendFactor dstColorFactor,
                           SDL_BlendOperation colorOperation,
                           SDL_BlendFactor srcAlphaFactor,
                           SDL_BlendFactor dstAlphaFactor,
                           SDL_BlendOperation alphaOperation);

typedef struct SDL_Surface {
  Uint32 flags;
  SDL_PixelFormat *format;
  int w, h;
  int pitch;
  void *pixels;

  void *userdata;

  int locked;

  void *list_blitmap;

  SDL_Rect clip_rect;

  struct SDL_BlitMap *map;

  int refcount;
} SDL_Surface;

typedef int (*SDL_blit)(struct SDL_Surface *src, SDL_Rect *srcrect,
                        struct SDL_Surface *dst, SDL_Rect *dstrect);

typedef enum {
  SDL_YUV_CONVERSION_JPEG,
  SDL_YUV_CONVERSION_BT601,
  SDL_YUV_CONVERSION_BT709,
  SDL_YUV_CONVERSION_AUTOMATIC
} SDL_YUV_CONVERSION_MODE;
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_CreateRGBSurface(Uint32 flags, int width, int height, int depth,
                     Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth,
                               Uint32 format);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_CreateRGBSurfaceFrom(void *pixels, int width, int height, int depth,
                         int pitch, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask,
                         Uint32 Amask);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_CreateRGBSurfaceWithFormatFrom(void *pixels, int width, int height,
                                   int depth, int pitch, Uint32 format);
extern __attribute__((visibility("default"))) void
SDL_FreeSurface(SDL_Surface *surface);
extern __attribute__((visibility("default"))) int
SDL_SetSurfacePalette(SDL_Surface *surface, SDL_Palette *palette);
extern __attribute__((visibility("default"))) int
SDL_LockSurface(SDL_Surface *surface);
extern __attribute__((visibility("default"))) void
SDL_UnlockSurface(SDL_Surface *surface);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_LoadBMP_RW(SDL_RWops *src, int freesrc);

extern __attribute__((visibility("default"))) int
SDL_SaveBMP_RW(SDL_Surface *surface, SDL_RWops *dst, int freedst);

extern __attribute__((visibility("default"))) int
SDL_SetSurfaceRLE(SDL_Surface *surface, int flag);
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasSurfaceRLE(SDL_Surface *surface);
extern __attribute__((visibility("default"))) int
SDL_SetColorKey(SDL_Surface *surface, int flag, Uint32 key);
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasColorKey(SDL_Surface *surface);
extern __attribute__((visibility("default"))) int
SDL_GetColorKey(SDL_Surface *surface, Uint32 *key);
extern __attribute__((visibility("default"))) int
SDL_SetSurfaceColorMod(SDL_Surface *surface, Uint8 r, Uint8 g, Uint8 b);
extern __attribute__((visibility("default"))) int
SDL_GetSurfaceColorMod(SDL_Surface *surface, Uint8 *r, Uint8 *g, Uint8 *b);
extern __attribute__((visibility("default"))) int
SDL_SetSurfaceAlphaMod(SDL_Surface *surface, Uint8 alpha);
extern __attribute__((visibility("default"))) int
SDL_GetSurfaceAlphaMod(SDL_Surface *surface, Uint8 *alpha);
extern __attribute__((visibility("default"))) int
SDL_SetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode blendMode);
extern __attribute__((visibility("default"))) int
SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode);
extern __attribute__((visibility("default"))) SDL_bool
SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect);
extern __attribute__((visibility("default"))) void
SDL_GetClipRect(SDL_Surface *surface, SDL_Rect *rect);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_DuplicateSurface(SDL_Surface *surface);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_ConvertSurface(SDL_Surface *src, const SDL_PixelFormat *fmt, Uint32 flags);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_ConvertSurfaceFormat(SDL_Surface *src, Uint32 pixel_format, Uint32 flags);
extern __attribute__((visibility("default"))) int
SDL_ConvertPixels(int width, int height, Uint32 src_format, const void *src,
                  int src_pitch, Uint32 dst_format, void *dst, int dst_pitch);
extern __attribute__((visibility("default"))) int
SDL_PremultiplyAlpha(int width, int height, Uint32 src_format, const void *src,
                     int src_pitch, Uint32 dst_format, void *dst,
                     int dst_pitch);
extern __attribute__((visibility("default"))) int
SDL_FillRect(SDL_Surface *dst, const SDL_Rect *rect, Uint32 color);
extern __attribute__((visibility("default"))) int
SDL_FillRects(SDL_Surface *dst, const SDL_Rect *rects, int count, Uint32 color);
extern __attribute__((visibility("default"))) int
SDL_UpperBlit(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst,
              SDL_Rect *dstrect);
extern __attribute__((visibility("default"))) int
SDL_LowerBlit(SDL_Surface *src, SDL_Rect *srcrect, SDL_Surface *dst,
              SDL_Rect *dstrect);
extern __attribute__((visibility("default"))) int
SDL_SoftStretch(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst,
                const SDL_Rect *dstrect);

extern __attribute__((visibility("default"))) int
SDL_SoftStretchLinear(SDL_Surface *src, const SDL_Rect *srcrect,
                      SDL_Surface *dst, const SDL_Rect *dstrect);

extern __attribute__((visibility("default"))) int
SDL_UpperBlitScaled(SDL_Surface *src, const SDL_Rect *srcrect, SDL_Surface *dst,
                    SDL_Rect *dstrect);
extern __attribute__((visibility("default"))) int
SDL_LowerBlitScaled(SDL_Surface *src, SDL_Rect *srcrect, SDL_Surface *dst,
                    SDL_Rect *dstrect);

extern __attribute__((visibility("default"))) void
SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);

extern __attribute__((visibility("default"))) SDL_YUV_CONVERSION_MODE
SDL_GetYUVConversionMode(void);

extern __attribute__((visibility("default"))) SDL_YUV_CONVERSION_MODE
SDL_GetYUVConversionModeForResolution(int width, int height);

typedef struct {
  Uint32 format;
  int w;
  int h;
  int refresh_rate;
  void *driverdata;
} SDL_DisplayMode;
typedef struct SDL_Window SDL_Window;

typedef enum {
  SDL_WINDOW_FULLSCREEN = 0x00000001,
  SDL_WINDOW_OPENGL = 0x00000002,
  SDL_WINDOW_SHOWN = 0x00000004,
  SDL_WINDOW_HIDDEN = 0x00000008,
  SDL_WINDOW_BORDERLESS = 0x00000010,
  SDL_WINDOW_RESIZABLE = 0x00000020,
  SDL_WINDOW_MINIMIZED = 0x00000040,
  SDL_WINDOW_MAXIMIZED = 0x00000080,
  SDL_WINDOW_MOUSE_GRABBED = 0x00000100,
  SDL_WINDOW_INPUT_FOCUS = 0x00000200,
  SDL_WINDOW_MOUSE_FOCUS = 0x00000400,
  SDL_WINDOW_FULLSCREEN_DESKTOP = (SDL_WINDOW_FULLSCREEN | 0x00001000),
  SDL_WINDOW_FOREIGN = 0x00000800,
  SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000,

  SDL_WINDOW_MOUSE_CAPTURE = 0x00004000,
  SDL_WINDOW_ALWAYS_ON_TOP = 0x00008000,
  SDL_WINDOW_SKIP_TASKBAR = 0x00010000,
  SDL_WINDOW_UTILITY = 0x00020000,
  SDL_WINDOW_TOOLTIP = 0x00040000,
  SDL_WINDOW_POPUP_MENU = 0x00080000,
  SDL_WINDOW_KEYBOARD_GRABBED = 0x00100000,
  SDL_WINDOW_VULKAN = 0x10000000,
  SDL_WINDOW_METAL = 0x20000000,

  SDL_WINDOW_INPUT_GRABBED = SDL_WINDOW_MOUSE_GRABBED
} SDL_WindowFlags;

typedef enum {
  SDL_WINDOWEVENT_NONE,
  SDL_WINDOWEVENT_SHOWN,
  SDL_WINDOWEVENT_HIDDEN,
  SDL_WINDOWEVENT_EXPOSED,

  SDL_WINDOWEVENT_MOVED,

  SDL_WINDOWEVENT_RESIZED,
  SDL_WINDOWEVENT_SIZE_CHANGED,

  SDL_WINDOWEVENT_MINIMIZED,
  SDL_WINDOWEVENT_MAXIMIZED,
  SDL_WINDOWEVENT_RESTORED,

  SDL_WINDOWEVENT_ENTER,
  SDL_WINDOWEVENT_LEAVE,
  SDL_WINDOWEVENT_FOCUS_GAINED,
  SDL_WINDOWEVENT_FOCUS_LOST,
  SDL_WINDOWEVENT_CLOSE,
  SDL_WINDOWEVENT_TAKE_FOCUS,
  SDL_WINDOWEVENT_HIT_TEST,
  SDL_WINDOWEVENT_ICCPROF_CHANGED,
  SDL_WINDOWEVENT_DISPLAY_CHANGED
} SDL_WindowEventID;

typedef enum {
  SDL_DISPLAYEVENT_NONE,
  SDL_DISPLAYEVENT_ORIENTATION,
  SDL_DISPLAYEVENT_CONNECTED,
  SDL_DISPLAYEVENT_DISCONNECTED
} SDL_DisplayEventID;

typedef enum {
  SDL_ORIENTATION_UNKNOWN,
  SDL_ORIENTATION_LANDSCAPE,
  SDL_ORIENTATION_LANDSCAPE_FLIPPED,
  SDL_ORIENTATION_PORTRAIT,
  SDL_ORIENTATION_PORTRAIT_FLIPPED
} SDL_DisplayOrientation;

typedef enum {
  SDL_FLASH_CANCEL,
  SDL_FLASH_BRIEFLY,
  SDL_FLASH_UNTIL_FOCUSED
} SDL_FlashOperation;

typedef void *SDL_GLContext;

typedef enum {
  SDL_GL_RED_SIZE,
  SDL_GL_GREEN_SIZE,
  SDL_GL_BLUE_SIZE,
  SDL_GL_ALPHA_SIZE,
  SDL_GL_BUFFER_SIZE,
  SDL_GL_DOUBLEBUFFER,
  SDL_GL_DEPTH_SIZE,
  SDL_GL_STENCIL_SIZE,
  SDL_GL_ACCUM_RED_SIZE,
  SDL_GL_ACCUM_GREEN_SIZE,
  SDL_GL_ACCUM_BLUE_SIZE,
  SDL_GL_ACCUM_ALPHA_SIZE,
  SDL_GL_STEREO,
  SDL_GL_MULTISAMPLEBUFFERS,
  SDL_GL_MULTISAMPLESAMPLES,
  SDL_GL_ACCELERATED_VISUAL,
  SDL_GL_RETAINED_BACKING,
  SDL_GL_CONTEXT_MAJOR_VERSION,
  SDL_GL_CONTEXT_MINOR_VERSION,
  SDL_GL_CONTEXT_EGL,
  SDL_GL_CONTEXT_FLAGS,
  SDL_GL_CONTEXT_PROFILE_MASK,
  SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
  SDL_GL_FRAMEBUFFER_SRGB_CAPABLE,
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR,
  SDL_GL_CONTEXT_RESET_NOTIFICATION,
  SDL_GL_CONTEXT_NO_ERROR
} SDL_GLattr;

typedef enum {
  SDL_GL_CONTEXT_PROFILE_CORE = 0x0001,
  SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 0x0002,
  SDL_GL_CONTEXT_PROFILE_ES = 0x0004
} SDL_GLprofile;

typedef enum {
  SDL_GL_CONTEXT_DEBUG_FLAG = 0x0001,
  SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
  SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 0x0004,
  SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 0x0008
} SDL_GLcontextFlag;

typedef enum {
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0x0000,
  SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x0001
} SDL_GLcontextReleaseFlag;

typedef enum {
  SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0x0000,
  SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 0x0001
} SDL_GLContextResetNotification;
extern __attribute__((visibility("default"))) int SDL_GetNumVideoDrivers(void);
extern __attribute__((visibility("default"))) const char *
SDL_GetVideoDriver(int index);
extern __attribute__((visibility("default"))) int
SDL_VideoInit(const char *driver_name);
extern __attribute__((visibility("default"))) void SDL_VideoQuit(void);
extern __attribute__((visibility("default"))) const char *
SDL_GetCurrentVideoDriver(void);
extern __attribute__((visibility("default"))) int SDL_GetNumVideoDisplays(void);
extern __attribute__((visibility("default"))) const char *
SDL_GetDisplayName(int displayIndex);
extern __attribute__((visibility("default"))) int
SDL_GetDisplayBounds(int displayIndex, SDL_Rect *rect);
extern __attribute__((visibility("default"))) int
SDL_GetDisplayUsableBounds(int displayIndex, SDL_Rect *rect);
extern __attribute__((visibility("default"))) int
SDL_GetDisplayDPI(int displayIndex, float *ddpi, float *hdpi, float *vdpi);
extern __attribute__((visibility("default"))) SDL_DisplayOrientation
SDL_GetDisplayOrientation(int displayIndex);
extern __attribute__((visibility("default"))) int
SDL_GetNumDisplayModes(int displayIndex);
extern __attribute__((visibility("default"))) int
SDL_GetDisplayMode(int displayIndex, int modeIndex, SDL_DisplayMode *mode);
extern __attribute__((visibility("default"))) int
SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode *mode);
extern __attribute__((visibility("default"))) int
SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode *mode);
extern __attribute__((visibility("default"))) SDL_DisplayMode *
SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode *mode,
                          SDL_DisplayMode *closest);
extern __attribute__((visibility("default"))) int
SDL_GetWindowDisplayIndex(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_SetWindowDisplayMode(SDL_Window *window, const SDL_DisplayMode *mode);
extern __attribute__((visibility("default"))) int
SDL_GetWindowDisplayMode(SDL_Window *window, SDL_DisplayMode *mode);
extern __attribute__((visibility("default"))) void *
SDL_GetWindowICCProfile(SDL_Window *window, size_t *size);
extern __attribute__((visibility("default"))) Uint32
SDL_GetWindowPixelFormat(SDL_Window *window);
extern __attribute__((visibility("default"))) SDL_Window *
SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags);
extern __attribute__((visibility("default"))) SDL_Window *
SDL_CreateWindowFrom(const void *data);
extern __attribute__((visibility("default"))) Uint32
SDL_GetWindowID(SDL_Window *window);
extern __attribute__((visibility("default"))) SDL_Window *
SDL_GetWindowFromID(Uint32 id);
extern __attribute__((visibility("default"))) Uint32
SDL_GetWindowFlags(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_SetWindowTitle(SDL_Window *window, const char *title);
extern __attribute__((visibility("default"))) const char *
SDL_GetWindowTitle(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon);
extern __attribute__((visibility("default"))) void *
SDL_SetWindowData(SDL_Window *window, const char *name, void *userdata);
extern __attribute__((visibility("default"))) void *
SDL_GetWindowData(SDL_Window *window, const char *name);
extern __attribute__((visibility("default"))) void
SDL_SetWindowPosition(SDL_Window *window, int x, int y);
extern __attribute__((visibility("default"))) void
SDL_GetWindowPosition(SDL_Window *window, int *x, int *y);
extern __attribute__((visibility("default"))) void
SDL_SetWindowSize(SDL_Window *window, int w, int h);
extern __attribute__((visibility("default"))) void
SDL_GetWindowSize(SDL_Window *window, int *w, int *h);
extern __attribute__((visibility("default"))) int
SDL_GetWindowBordersSize(SDL_Window *window, int *top, int *left, int *bottom,
                         int *right);
extern __attribute__((visibility("default"))) void
SDL_SetWindowMinimumSize(SDL_Window *window, int min_w, int min_h);
extern __attribute__((visibility("default"))) void
SDL_GetWindowMinimumSize(SDL_Window *window, int *w, int *h);
extern __attribute__((visibility("default"))) void
SDL_SetWindowMaximumSize(SDL_Window *window, int max_w, int max_h);
extern __attribute__((visibility("default"))) void
SDL_GetWindowMaximumSize(SDL_Window *window, int *w, int *h);
extern __attribute__((visibility("default"))) void
SDL_SetWindowBordered(SDL_Window *window, SDL_bool bordered);
extern __attribute__((visibility("default"))) void
SDL_SetWindowResizable(SDL_Window *window, SDL_bool resizable);
extern __attribute__((visibility("default"))) void
SDL_SetWindowAlwaysOnTop(SDL_Window *window, SDL_bool on_top);
extern __attribute__((visibility("default"))) void
SDL_ShowWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_HideWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_RaiseWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_MaximizeWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_MinimizeWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_RestoreWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_SetWindowFullscreen(SDL_Window *window, Uint32 flags);
extern __attribute__((visibility("default"))) SDL_Surface *
SDL_GetWindowSurface(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_UpdateWindowSurface(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects,
                             int numrects);
extern __attribute__((visibility("default"))) void
SDL_SetWindowGrab(SDL_Window *window, SDL_bool grabbed);
extern __attribute__((visibility("default"))) void
SDL_SetWindowKeyboardGrab(SDL_Window *window, SDL_bool grabbed);
extern __attribute__((visibility("default"))) void
SDL_SetWindowMouseGrab(SDL_Window *window, SDL_bool grabbed);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GetWindowGrab(SDL_Window *window);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GetWindowKeyboardGrab(SDL_Window *window);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GetWindowMouseGrab(SDL_Window *window);
extern __attribute__((visibility("default"))) SDL_Window *
SDL_GetGrabbedWindow(void);
extern __attribute__((visibility("default"))) int
SDL_SetWindowMouseRect(SDL_Window *window, const SDL_Rect *rect);
extern __attribute__((visibility("default"))) const SDL_Rect *
SDL_GetWindowMouseRect(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_SetWindowBrightness(SDL_Window *window, float brightness);
extern __attribute__((visibility("default"))) float
SDL_GetWindowBrightness(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_SetWindowOpacity(SDL_Window *window, float opacity);
extern __attribute__((visibility("default"))) int
SDL_GetWindowOpacity(SDL_Window *window, float *out_opacity);
extern __attribute__((visibility("default"))) int
SDL_SetWindowModalFor(SDL_Window *modal_window, SDL_Window *parent_window);
extern __attribute__((visibility("default"))) int
SDL_SetWindowInputFocus(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_SetWindowGammaRamp(SDL_Window *window, const Uint16 *red,
                       const Uint16 *green, const Uint16 *blue);
extern __attribute__((visibility("default"))) int
SDL_GetWindowGammaRamp(SDL_Window *window, Uint16 *red, Uint16 *green,
                       Uint16 *blue);

typedef enum {
  SDL_HITTEST_NORMAL,
  SDL_HITTEST_DRAGGABLE,
  SDL_HITTEST_RESIZE_TOPLEFT,
  SDL_HITTEST_RESIZE_TOP,
  SDL_HITTEST_RESIZE_TOPRIGHT,
  SDL_HITTEST_RESIZE_RIGHT,
  SDL_HITTEST_RESIZE_BOTTOMRIGHT,
  SDL_HITTEST_RESIZE_BOTTOM,
  SDL_HITTEST_RESIZE_BOTTOMLEFT,
  SDL_HITTEST_RESIZE_LEFT
} SDL_HitTestResult;
typedef SDL_HitTestResult (*SDL_HitTest)(SDL_Window *win, const SDL_Point *area,
                                         void *data);
extern __attribute__((visibility("default"))) int
SDL_SetWindowHitTest(SDL_Window *window, SDL_HitTest callback,
                     void *callback_data);
extern __attribute__((visibility("default"))) int
SDL_FlashWindow(SDL_Window *window, SDL_FlashOperation operation);
extern __attribute__((visibility("default"))) void
SDL_DestroyWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IsScreenSaverEnabled(void);
extern __attribute__((visibility("default"))) void SDL_EnableScreenSaver(void);
extern __attribute__((visibility("default"))) void SDL_DisableScreenSaver(void);
extern __attribute__((visibility("default"))) int
SDL_GL_LoadLibrary(const char *path);
extern __attribute__((visibility("default"))) void *
SDL_GL_GetProcAddress(const char *proc);
extern __attribute__((visibility("default"))) void SDL_GL_UnloadLibrary(void);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GL_ExtensionSupported(const char *extension);
extern __attribute__((visibility("default"))) void SDL_GL_ResetAttributes(void);
extern __attribute__((visibility("default"))) int
SDL_GL_SetAttribute(SDL_GLattr attr, int value);
extern __attribute__((visibility("default"))) int
SDL_GL_GetAttribute(SDL_GLattr attr, int *value);
extern __attribute__((visibility("default"))) SDL_GLContext
SDL_GL_CreateContext(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context);
extern __attribute__((visibility("default"))) SDL_Window *
SDL_GL_GetCurrentWindow(void);
extern __attribute__((visibility("default"))) SDL_GLContext
SDL_GL_GetCurrentContext(void);
extern __attribute__((visibility("default"))) void
SDL_GL_GetDrawableSize(SDL_Window *window, int *w, int *h);
extern __attribute__((visibility("default"))) int
SDL_GL_SetSwapInterval(int interval);
extern __attribute__((visibility("default"))) int SDL_GL_GetSwapInterval(void);
extern __attribute__((visibility("default"))) void
SDL_GL_SwapWindow(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_GL_DeleteContext(SDL_GLContext context);

typedef enum {
  SDL_SCANCODE_UNKNOWN = 0,
  SDL_SCANCODE_A = 4,
  SDL_SCANCODE_B = 5,
  SDL_SCANCODE_C = 6,
  SDL_SCANCODE_D = 7,
  SDL_SCANCODE_E = 8,
  SDL_SCANCODE_F = 9,
  SDL_SCANCODE_G = 10,
  SDL_SCANCODE_H = 11,
  SDL_SCANCODE_I = 12,
  SDL_SCANCODE_J = 13,
  SDL_SCANCODE_K = 14,
  SDL_SCANCODE_L = 15,
  SDL_SCANCODE_M = 16,
  SDL_SCANCODE_N = 17,
  SDL_SCANCODE_O = 18,
  SDL_SCANCODE_P = 19,
  SDL_SCANCODE_Q = 20,
  SDL_SCANCODE_R = 21,
  SDL_SCANCODE_S = 22,
  SDL_SCANCODE_T = 23,
  SDL_SCANCODE_U = 24,
  SDL_SCANCODE_V = 25,
  SDL_SCANCODE_W = 26,
  SDL_SCANCODE_X = 27,
  SDL_SCANCODE_Y = 28,
  SDL_SCANCODE_Z = 29,

  SDL_SCANCODE_1 = 30,
  SDL_SCANCODE_2 = 31,
  SDL_SCANCODE_3 = 32,
  SDL_SCANCODE_4 = 33,
  SDL_SCANCODE_5 = 34,
  SDL_SCANCODE_6 = 35,
  SDL_SCANCODE_7 = 36,
  SDL_SCANCODE_8 = 37,
  SDL_SCANCODE_9 = 38,
  SDL_SCANCODE_0 = 39,

  SDL_SCANCODE_RETURN = 40,
  SDL_SCANCODE_ESCAPE = 41,
  SDL_SCANCODE_BACKSPACE = 42,
  SDL_SCANCODE_TAB = 43,
  SDL_SCANCODE_SPACE = 44,

  SDL_SCANCODE_MINUS = 45,
  SDL_SCANCODE_EQUALS = 46,
  SDL_SCANCODE_LEFTBRACKET = 47,
  SDL_SCANCODE_RIGHTBRACKET = 48,
  SDL_SCANCODE_BACKSLASH = 49,
  SDL_SCANCODE_NONUSHASH = 50,
  SDL_SCANCODE_SEMICOLON = 51,
  SDL_SCANCODE_APOSTROPHE = 52,
  SDL_SCANCODE_GRAVE = 53,
  SDL_SCANCODE_COMMA = 54,
  SDL_SCANCODE_PERIOD = 55,
  SDL_SCANCODE_SLASH = 56,

  SDL_SCANCODE_CAPSLOCK = 57,

  SDL_SCANCODE_F1 = 58,
  SDL_SCANCODE_F2 = 59,
  SDL_SCANCODE_F3 = 60,
  SDL_SCANCODE_F4 = 61,
  SDL_SCANCODE_F5 = 62,
  SDL_SCANCODE_F6 = 63,
  SDL_SCANCODE_F7 = 64,
  SDL_SCANCODE_F8 = 65,
  SDL_SCANCODE_F9 = 66,
  SDL_SCANCODE_F10 = 67,
  SDL_SCANCODE_F11 = 68,
  SDL_SCANCODE_F12 = 69,

  SDL_SCANCODE_PRINTSCREEN = 70,
  SDL_SCANCODE_SCROLLLOCK = 71,
  SDL_SCANCODE_PAUSE = 72,
  SDL_SCANCODE_INSERT = 73,

  SDL_SCANCODE_HOME = 74,
  SDL_SCANCODE_PAGEUP = 75,
  SDL_SCANCODE_DELETE = 76,
  SDL_SCANCODE_END = 77,
  SDL_SCANCODE_PAGEDOWN = 78,
  SDL_SCANCODE_RIGHT = 79,
  SDL_SCANCODE_LEFT = 80,
  SDL_SCANCODE_DOWN = 81,
  SDL_SCANCODE_UP = 82,

  SDL_SCANCODE_NUMLOCKCLEAR = 83,

  SDL_SCANCODE_KP_DIVIDE = 84,
  SDL_SCANCODE_KP_MULTIPLY = 85,
  SDL_SCANCODE_KP_MINUS = 86,
  SDL_SCANCODE_KP_PLUS = 87,
  SDL_SCANCODE_KP_ENTER = 88,
  SDL_SCANCODE_KP_1 = 89,
  SDL_SCANCODE_KP_2 = 90,
  SDL_SCANCODE_KP_3 = 91,
  SDL_SCANCODE_KP_4 = 92,
  SDL_SCANCODE_KP_5 = 93,
  SDL_SCANCODE_KP_6 = 94,
  SDL_SCANCODE_KP_7 = 95,
  SDL_SCANCODE_KP_8 = 96,
  SDL_SCANCODE_KP_9 = 97,
  SDL_SCANCODE_KP_0 = 98,
  SDL_SCANCODE_KP_PERIOD = 99,

  SDL_SCANCODE_NONUSBACKSLASH = 100,
  SDL_SCANCODE_APPLICATION = 101,
  SDL_SCANCODE_POWER = 102,

  SDL_SCANCODE_KP_EQUALS = 103,
  SDL_SCANCODE_F13 = 104,
  SDL_SCANCODE_F14 = 105,
  SDL_SCANCODE_F15 = 106,
  SDL_SCANCODE_F16 = 107,
  SDL_SCANCODE_F17 = 108,
  SDL_SCANCODE_F18 = 109,
  SDL_SCANCODE_F19 = 110,
  SDL_SCANCODE_F20 = 111,
  SDL_SCANCODE_F21 = 112,
  SDL_SCANCODE_F22 = 113,
  SDL_SCANCODE_F23 = 114,
  SDL_SCANCODE_F24 = 115,
  SDL_SCANCODE_EXECUTE = 116,
  SDL_SCANCODE_HELP = 117,
  SDL_SCANCODE_MENU = 118,
  SDL_SCANCODE_SELECT = 119,
  SDL_SCANCODE_STOP = 120,
  SDL_SCANCODE_AGAIN = 121,
  SDL_SCANCODE_UNDO = 122,
  SDL_SCANCODE_CUT = 123,
  SDL_SCANCODE_COPY = 124,
  SDL_SCANCODE_PASTE = 125,
  SDL_SCANCODE_FIND = 126,
  SDL_SCANCODE_MUTE = 127,
  SDL_SCANCODE_VOLUMEUP = 128,
  SDL_SCANCODE_VOLUMEDOWN = 129,

  SDL_SCANCODE_KP_COMMA = 133,
  SDL_SCANCODE_KP_EQUALSAS400 = 134,

  SDL_SCANCODE_INTERNATIONAL1 = 135,

  SDL_SCANCODE_INTERNATIONAL2 = 136,
  SDL_SCANCODE_INTERNATIONAL3 = 137,
  SDL_SCANCODE_INTERNATIONAL4 = 138,
  SDL_SCANCODE_INTERNATIONAL5 = 139,
  SDL_SCANCODE_INTERNATIONAL6 = 140,
  SDL_SCANCODE_INTERNATIONAL7 = 141,
  SDL_SCANCODE_INTERNATIONAL8 = 142,
  SDL_SCANCODE_INTERNATIONAL9 = 143,
  SDL_SCANCODE_LANG1 = 144,
  SDL_SCANCODE_LANG2 = 145,
  SDL_SCANCODE_LANG3 = 146,
  SDL_SCANCODE_LANG4 = 147,
  SDL_SCANCODE_LANG5 = 148,
  SDL_SCANCODE_LANG6 = 149,
  SDL_SCANCODE_LANG7 = 150,
  SDL_SCANCODE_LANG8 = 151,
  SDL_SCANCODE_LANG9 = 152,

  SDL_SCANCODE_ALTERASE = 153,
  SDL_SCANCODE_SYSREQ = 154,
  SDL_SCANCODE_CANCEL = 155,
  SDL_SCANCODE_CLEAR = 156,
  SDL_SCANCODE_PRIOR = 157,
  SDL_SCANCODE_RETURN2 = 158,
  SDL_SCANCODE_SEPARATOR = 159,
  SDL_SCANCODE_OUT = 160,
  SDL_SCANCODE_OPER = 161,
  SDL_SCANCODE_CLEARAGAIN = 162,
  SDL_SCANCODE_CRSEL = 163,
  SDL_SCANCODE_EXSEL = 164,

  SDL_SCANCODE_KP_00 = 176,
  SDL_SCANCODE_KP_000 = 177,
  SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
  SDL_SCANCODE_DECIMALSEPARATOR = 179,
  SDL_SCANCODE_CURRENCYUNIT = 180,
  SDL_SCANCODE_CURRENCYSUBUNIT = 181,
  SDL_SCANCODE_KP_LEFTPAREN = 182,
  SDL_SCANCODE_KP_RIGHTPAREN = 183,
  SDL_SCANCODE_KP_LEFTBRACE = 184,
  SDL_SCANCODE_KP_RIGHTBRACE = 185,
  SDL_SCANCODE_KP_TAB = 186,
  SDL_SCANCODE_KP_BACKSPACE = 187,
  SDL_SCANCODE_KP_A = 188,
  SDL_SCANCODE_KP_B = 189,
  SDL_SCANCODE_KP_C = 190,
  SDL_SCANCODE_KP_D = 191,
  SDL_SCANCODE_KP_E = 192,
  SDL_SCANCODE_KP_F = 193,
  SDL_SCANCODE_KP_XOR = 194,
  SDL_SCANCODE_KP_POWER = 195,
  SDL_SCANCODE_KP_PERCENT = 196,
  SDL_SCANCODE_KP_LESS = 197,
  SDL_SCANCODE_KP_GREATER = 198,
  SDL_SCANCODE_KP_AMPERSAND = 199,
  SDL_SCANCODE_KP_DBLAMPERSAND = 200,
  SDL_SCANCODE_KP_VERTICALBAR = 201,
  SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
  SDL_SCANCODE_KP_COLON = 203,
  SDL_SCANCODE_KP_HASH = 204,
  SDL_SCANCODE_KP_SPACE = 205,
  SDL_SCANCODE_KP_AT = 206,
  SDL_SCANCODE_KP_EXCLAM = 207,
  SDL_SCANCODE_KP_MEMSTORE = 208,
  SDL_SCANCODE_KP_MEMRECALL = 209,
  SDL_SCANCODE_KP_MEMCLEAR = 210,
  SDL_SCANCODE_KP_MEMADD = 211,
  SDL_SCANCODE_KP_MEMSUBTRACT = 212,
  SDL_SCANCODE_KP_MEMMULTIPLY = 213,
  SDL_SCANCODE_KP_MEMDIVIDE = 214,
  SDL_SCANCODE_KP_PLUSMINUS = 215,
  SDL_SCANCODE_KP_CLEAR = 216,
  SDL_SCANCODE_KP_CLEARENTRY = 217,
  SDL_SCANCODE_KP_BINARY = 218,
  SDL_SCANCODE_KP_OCTAL = 219,
  SDL_SCANCODE_KP_DECIMAL = 220,
  SDL_SCANCODE_KP_HEXADECIMAL = 221,

  SDL_SCANCODE_LCTRL = 224,
  SDL_SCANCODE_LSHIFT = 225,
  SDL_SCANCODE_LALT = 226,
  SDL_SCANCODE_LGUI = 227,
  SDL_SCANCODE_RCTRL = 228,
  SDL_SCANCODE_RSHIFT = 229,
  SDL_SCANCODE_RALT = 230,
  SDL_SCANCODE_RGUI = 231,

  SDL_SCANCODE_MODE = 257,
  SDL_SCANCODE_AUDIONEXT = 258,
  SDL_SCANCODE_AUDIOPREV = 259,
  SDL_SCANCODE_AUDIOSTOP = 260,
  SDL_SCANCODE_AUDIOPLAY = 261,
  SDL_SCANCODE_AUDIOMUTE = 262,
  SDL_SCANCODE_MEDIASELECT = 263,
  SDL_SCANCODE_WWW = 264,
  SDL_SCANCODE_MAIL = 265,
  SDL_SCANCODE_CALCULATOR = 266,
  SDL_SCANCODE_COMPUTER = 267,
  SDL_SCANCODE_AC_SEARCH = 268,
  SDL_SCANCODE_AC_HOME = 269,
  SDL_SCANCODE_AC_BACK = 270,
  SDL_SCANCODE_AC_FORWARD = 271,
  SDL_SCANCODE_AC_STOP = 272,
  SDL_SCANCODE_AC_REFRESH = 273,
  SDL_SCANCODE_AC_BOOKMARKS = 274,
  SDL_SCANCODE_BRIGHTNESSDOWN = 275,
  SDL_SCANCODE_BRIGHTNESSUP = 276,
  SDL_SCANCODE_DISPLAYSWITCH = 277,

  SDL_SCANCODE_KBDILLUMTOGGLE = 278,
  SDL_SCANCODE_KBDILLUMDOWN = 279,
  SDL_SCANCODE_KBDILLUMUP = 280,
  SDL_SCANCODE_EJECT = 281,
  SDL_SCANCODE_SLEEP = 282,

  SDL_SCANCODE_APP1 = 283,
  SDL_SCANCODE_APP2 = 284,
  SDL_SCANCODE_AUDIOREWIND = 285,
  SDL_SCANCODE_AUDIOFASTFORWARD = 286,

  SDL_NUM_SCANCODES = 512

} SDL_Scancode;
typedef Sint32 SDL_Keycode;

typedef enum {
  SDLK_UNKNOWN = 0,

  SDLK_RETURN = '\r',
  SDLK_ESCAPE = '\x1B',
  SDLK_BACKSPACE = '\b',
  SDLK_TAB = '\t',
  SDLK_SPACE = ' ',
  SDLK_EXCLAIM = '!',
  SDLK_QUOTEDBL = '"',
  SDLK_HASH = '#',
  SDLK_PERCENT = '%',
  SDLK_DOLLAR = '$',
  SDLK_AMPERSAND = '&',
  SDLK_QUOTE = '\'',
  SDLK_LEFTPAREN = '(',
  SDLK_RIGHTPAREN = ')',
  SDLK_ASTERISK = '*',
  SDLK_PLUS = '+',
  SDLK_COMMA = ',',
  SDLK_MINUS = '-',
  SDLK_PERIOD = '.',
  SDLK_SLASH = '/',
  SDLK_0 = '0',
  SDLK_1 = '1',
  SDLK_2 = '2',
  SDLK_3 = '3',
  SDLK_4 = '4',
  SDLK_5 = '5',
  SDLK_6 = '6',
  SDLK_7 = '7',
  SDLK_8 = '8',
  SDLK_9 = '9',
  SDLK_COLON = ':',
  SDLK_SEMICOLON = ';',
  SDLK_LESS = '<',
  SDLK_EQUALS = '=',
  SDLK_GREATER = '>',
  SDLK_QUESTION = '?',
  SDLK_AT = '@',

  SDLK_LEFTBRACKET = '[',
  SDLK_BACKSLASH = '\\',
  SDLK_RIGHTBRACKET = ']',
  SDLK_CARET = '^',
  SDLK_UNDERSCORE = '_',
  SDLK_BACKQUOTE = '`',
  SDLK_a = 'a',
  SDLK_b = 'b',
  SDLK_c = 'c',
  SDLK_d = 'd',
  SDLK_e = 'e',
  SDLK_f = 'f',
  SDLK_g = 'g',
  SDLK_h = 'h',
  SDLK_i = 'i',
  SDLK_j = 'j',
  SDLK_k = 'k',
  SDLK_l = 'l',
  SDLK_m = 'm',
  SDLK_n = 'n',
  SDLK_o = 'o',
  SDLK_p = 'p',
  SDLK_q = 'q',
  SDLK_r = 'r',
  SDLK_s = 's',
  SDLK_t = 't',
  SDLK_u = 'u',
  SDLK_v = 'v',
  SDLK_w = 'w',
  SDLK_x = 'x',
  SDLK_y = 'y',
  SDLK_z = 'z',

  SDLK_CAPSLOCK = (SDL_SCANCODE_CAPSLOCK | (1 << 30)),

  SDLK_F1 = (SDL_SCANCODE_F1 | (1 << 30)),
  SDLK_F2 = (SDL_SCANCODE_F2 | (1 << 30)),
  SDLK_F3 = (SDL_SCANCODE_F3 | (1 << 30)),
  SDLK_F4 = (SDL_SCANCODE_F4 | (1 << 30)),
  SDLK_F5 = (SDL_SCANCODE_F5 | (1 << 30)),
  SDLK_F6 = (SDL_SCANCODE_F6 | (1 << 30)),
  SDLK_F7 = (SDL_SCANCODE_F7 | (1 << 30)),
  SDLK_F8 = (SDL_SCANCODE_F8 | (1 << 30)),
  SDLK_F9 = (SDL_SCANCODE_F9 | (1 << 30)),
  SDLK_F10 = (SDL_SCANCODE_F10 | (1 << 30)),
  SDLK_F11 = (SDL_SCANCODE_F11 | (1 << 30)),
  SDLK_F12 = (SDL_SCANCODE_F12 | (1 << 30)),

  SDLK_PRINTSCREEN = (SDL_SCANCODE_PRINTSCREEN | (1 << 30)),
  SDLK_SCROLLLOCK = (SDL_SCANCODE_SCROLLLOCK | (1 << 30)),
  SDLK_PAUSE = (SDL_SCANCODE_PAUSE | (1 << 30)),
  SDLK_INSERT = (SDL_SCANCODE_INSERT | (1 << 30)),
  SDLK_HOME = (SDL_SCANCODE_HOME | (1 << 30)),
  SDLK_PAGEUP = (SDL_SCANCODE_PAGEUP | (1 << 30)),
  SDLK_DELETE = '\x7F',
  SDLK_END = (SDL_SCANCODE_END | (1 << 30)),
  SDLK_PAGEDOWN = (SDL_SCANCODE_PAGEDOWN | (1 << 30)),
  SDLK_RIGHT = (SDL_SCANCODE_RIGHT | (1 << 30)),
  SDLK_LEFT = (SDL_SCANCODE_LEFT | (1 << 30)),
  SDLK_DOWN = (SDL_SCANCODE_DOWN | (1 << 30)),
  SDLK_UP = (SDL_SCANCODE_UP | (1 << 30)),

  SDLK_NUMLOCKCLEAR = (SDL_SCANCODE_NUMLOCKCLEAR | (1 << 30)),
  SDLK_KP_DIVIDE = (SDL_SCANCODE_KP_DIVIDE | (1 << 30)),
  SDLK_KP_MULTIPLY = (SDL_SCANCODE_KP_MULTIPLY | (1 << 30)),
  SDLK_KP_MINUS = (SDL_SCANCODE_KP_MINUS | (1 << 30)),
  SDLK_KP_PLUS = (SDL_SCANCODE_KP_PLUS | (1 << 30)),
  SDLK_KP_ENTER = (SDL_SCANCODE_KP_ENTER | (1 << 30)),
  SDLK_KP_1 = (SDL_SCANCODE_KP_1 | (1 << 30)),
  SDLK_KP_2 = (SDL_SCANCODE_KP_2 | (1 << 30)),
  SDLK_KP_3 = (SDL_SCANCODE_KP_3 | (1 << 30)),
  SDLK_KP_4 = (SDL_SCANCODE_KP_4 | (1 << 30)),
  SDLK_KP_5 = (SDL_SCANCODE_KP_5 | (1 << 30)),
  SDLK_KP_6 = (SDL_SCANCODE_KP_6 | (1 << 30)),
  SDLK_KP_7 = (SDL_SCANCODE_KP_7 | (1 << 30)),
  SDLK_KP_8 = (SDL_SCANCODE_KP_8 | (1 << 30)),
  SDLK_KP_9 = (SDL_SCANCODE_KP_9 | (1 << 30)),
  SDLK_KP_0 = (SDL_SCANCODE_KP_0 | (1 << 30)),
  SDLK_KP_PERIOD = (SDL_SCANCODE_KP_PERIOD | (1 << 30)),

  SDLK_APPLICATION = (SDL_SCANCODE_APPLICATION | (1 << 30)),
  SDLK_POWER = (SDL_SCANCODE_POWER | (1 << 30)),
  SDLK_KP_EQUALS = (SDL_SCANCODE_KP_EQUALS | (1 << 30)),
  SDLK_F13 = (SDL_SCANCODE_F13 | (1 << 30)),
  SDLK_F14 = (SDL_SCANCODE_F14 | (1 << 30)),
  SDLK_F15 = (SDL_SCANCODE_F15 | (1 << 30)),
  SDLK_F16 = (SDL_SCANCODE_F16 | (1 << 30)),
  SDLK_F17 = (SDL_SCANCODE_F17 | (1 << 30)),
  SDLK_F18 = (SDL_SCANCODE_F18 | (1 << 30)),
  SDLK_F19 = (SDL_SCANCODE_F19 | (1 << 30)),
  SDLK_F20 = (SDL_SCANCODE_F20 | (1 << 30)),
  SDLK_F21 = (SDL_SCANCODE_F21 | (1 << 30)),
  SDLK_F22 = (SDL_SCANCODE_F22 | (1 << 30)),
  SDLK_F23 = (SDL_SCANCODE_F23 | (1 << 30)),
  SDLK_F24 = (SDL_SCANCODE_F24 | (1 << 30)),
  SDLK_EXECUTE = (SDL_SCANCODE_EXECUTE | (1 << 30)),
  SDLK_HELP = (SDL_SCANCODE_HELP | (1 << 30)),
  SDLK_MENU = (SDL_SCANCODE_MENU | (1 << 30)),
  SDLK_SELECT = (SDL_SCANCODE_SELECT | (1 << 30)),
  SDLK_STOP = (SDL_SCANCODE_STOP | (1 << 30)),
  SDLK_AGAIN = (SDL_SCANCODE_AGAIN | (1 << 30)),
  SDLK_UNDO = (SDL_SCANCODE_UNDO | (1 << 30)),
  SDLK_CUT = (SDL_SCANCODE_CUT | (1 << 30)),
  SDLK_COPY = (SDL_SCANCODE_COPY | (1 << 30)),
  SDLK_PASTE = (SDL_SCANCODE_PASTE | (1 << 30)),
  SDLK_FIND = (SDL_SCANCODE_FIND | (1 << 30)),
  SDLK_MUTE = (SDL_SCANCODE_MUTE | (1 << 30)),
  SDLK_VOLUMEUP = (SDL_SCANCODE_VOLUMEUP | (1 << 30)),
  SDLK_VOLUMEDOWN = (SDL_SCANCODE_VOLUMEDOWN | (1 << 30)),
  SDLK_KP_COMMA = (SDL_SCANCODE_KP_COMMA | (1 << 30)),
  SDLK_KP_EQUALSAS400 = (SDL_SCANCODE_KP_EQUALSAS400 | (1 << 30)),

  SDLK_ALTERASE = (SDL_SCANCODE_ALTERASE | (1 << 30)),
  SDLK_SYSREQ = (SDL_SCANCODE_SYSREQ | (1 << 30)),
  SDLK_CANCEL = (SDL_SCANCODE_CANCEL | (1 << 30)),
  SDLK_CLEAR = (SDL_SCANCODE_CLEAR | (1 << 30)),
  SDLK_PRIOR = (SDL_SCANCODE_PRIOR | (1 << 30)),
  SDLK_RETURN2 = (SDL_SCANCODE_RETURN2 | (1 << 30)),
  SDLK_SEPARATOR = (SDL_SCANCODE_SEPARATOR | (1 << 30)),
  SDLK_OUT = (SDL_SCANCODE_OUT | (1 << 30)),
  SDLK_OPER = (SDL_SCANCODE_OPER | (1 << 30)),
  SDLK_CLEARAGAIN = (SDL_SCANCODE_CLEARAGAIN | (1 << 30)),
  SDLK_CRSEL = (SDL_SCANCODE_CRSEL | (1 << 30)),
  SDLK_EXSEL = (SDL_SCANCODE_EXSEL | (1 << 30)),

  SDLK_KP_00 = (SDL_SCANCODE_KP_00 | (1 << 30)),
  SDLK_KP_000 = (SDL_SCANCODE_KP_000 | (1 << 30)),
  SDLK_THOUSANDSSEPARATOR = (SDL_SCANCODE_THOUSANDSSEPARATOR | (1 << 30)),
  SDLK_DECIMALSEPARATOR = (SDL_SCANCODE_DECIMALSEPARATOR | (1 << 30)),
  SDLK_CURRENCYUNIT = (SDL_SCANCODE_CURRENCYUNIT | (1 << 30)),
  SDLK_CURRENCYSUBUNIT = (SDL_SCANCODE_CURRENCYSUBUNIT | (1 << 30)),
  SDLK_KP_LEFTPAREN = (SDL_SCANCODE_KP_LEFTPAREN | (1 << 30)),
  SDLK_KP_RIGHTPAREN = (SDL_SCANCODE_KP_RIGHTPAREN | (1 << 30)),
  SDLK_KP_LEFTBRACE = (SDL_SCANCODE_KP_LEFTBRACE | (1 << 30)),
  SDLK_KP_RIGHTBRACE = (SDL_SCANCODE_KP_RIGHTBRACE | (1 << 30)),
  SDLK_KP_TAB = (SDL_SCANCODE_KP_TAB | (1 << 30)),
  SDLK_KP_BACKSPACE = (SDL_SCANCODE_KP_BACKSPACE | (1 << 30)),
  SDLK_KP_A = (SDL_SCANCODE_KP_A | (1 << 30)),
  SDLK_KP_B = (SDL_SCANCODE_KP_B | (1 << 30)),
  SDLK_KP_C = (SDL_SCANCODE_KP_C | (1 << 30)),
  SDLK_KP_D = (SDL_SCANCODE_KP_D | (1 << 30)),
  SDLK_KP_E = (SDL_SCANCODE_KP_E | (1 << 30)),
  SDLK_KP_F = (SDL_SCANCODE_KP_F | (1 << 30)),
  SDLK_KP_XOR = (SDL_SCANCODE_KP_XOR | (1 << 30)),
  SDLK_KP_POWER = (SDL_SCANCODE_KP_POWER | (1 << 30)),
  SDLK_KP_PERCENT = (SDL_SCANCODE_KP_PERCENT | (1 << 30)),
  SDLK_KP_LESS = (SDL_SCANCODE_KP_LESS | (1 << 30)),
  SDLK_KP_GREATER = (SDL_SCANCODE_KP_GREATER | (1 << 30)),
  SDLK_KP_AMPERSAND = (SDL_SCANCODE_KP_AMPERSAND | (1 << 30)),
  SDLK_KP_DBLAMPERSAND = (SDL_SCANCODE_KP_DBLAMPERSAND | (1 << 30)),
  SDLK_KP_VERTICALBAR = (SDL_SCANCODE_KP_VERTICALBAR | (1 << 30)),
  SDLK_KP_DBLVERTICALBAR = (SDL_SCANCODE_KP_DBLVERTICALBAR | (1 << 30)),
  SDLK_KP_COLON = (SDL_SCANCODE_KP_COLON | (1 << 30)),
  SDLK_KP_HASH = (SDL_SCANCODE_KP_HASH | (1 << 30)),
  SDLK_KP_SPACE = (SDL_SCANCODE_KP_SPACE | (1 << 30)),
  SDLK_KP_AT = (SDL_SCANCODE_KP_AT | (1 << 30)),
  SDLK_KP_EXCLAM = (SDL_SCANCODE_KP_EXCLAM | (1 << 30)),
  SDLK_KP_MEMSTORE = (SDL_SCANCODE_KP_MEMSTORE | (1 << 30)),
  SDLK_KP_MEMRECALL = (SDL_SCANCODE_KP_MEMRECALL | (1 << 30)),
  SDLK_KP_MEMCLEAR = (SDL_SCANCODE_KP_MEMCLEAR | (1 << 30)),
  SDLK_KP_MEMADD = (SDL_SCANCODE_KP_MEMADD | (1 << 30)),
  SDLK_KP_MEMSUBTRACT = (SDL_SCANCODE_KP_MEMSUBTRACT | (1 << 30)),
  SDLK_KP_MEMMULTIPLY = (SDL_SCANCODE_KP_MEMMULTIPLY | (1 << 30)),
  SDLK_KP_MEMDIVIDE = (SDL_SCANCODE_KP_MEMDIVIDE | (1 << 30)),
  SDLK_KP_PLUSMINUS = (SDL_SCANCODE_KP_PLUSMINUS | (1 << 30)),
  SDLK_KP_CLEAR = (SDL_SCANCODE_KP_CLEAR | (1 << 30)),
  SDLK_KP_CLEARENTRY = (SDL_SCANCODE_KP_CLEARENTRY | (1 << 30)),
  SDLK_KP_BINARY = (SDL_SCANCODE_KP_BINARY | (1 << 30)),
  SDLK_KP_OCTAL = (SDL_SCANCODE_KP_OCTAL | (1 << 30)),
  SDLK_KP_DECIMAL = (SDL_SCANCODE_KP_DECIMAL | (1 << 30)),
  SDLK_KP_HEXADECIMAL = (SDL_SCANCODE_KP_HEXADECIMAL | (1 << 30)),

  SDLK_LCTRL = (SDL_SCANCODE_LCTRL | (1 << 30)),
  SDLK_LSHIFT = (SDL_SCANCODE_LSHIFT | (1 << 30)),
  SDLK_LALT = (SDL_SCANCODE_LALT | (1 << 30)),
  SDLK_LGUI = (SDL_SCANCODE_LGUI | (1 << 30)),
  SDLK_RCTRL = (SDL_SCANCODE_RCTRL | (1 << 30)),
  SDLK_RSHIFT = (SDL_SCANCODE_RSHIFT | (1 << 30)),
  SDLK_RALT = (SDL_SCANCODE_RALT | (1 << 30)),
  SDLK_RGUI = (SDL_SCANCODE_RGUI | (1 << 30)),

  SDLK_MODE = (SDL_SCANCODE_MODE | (1 << 30)),

  SDLK_AUDIONEXT = (SDL_SCANCODE_AUDIONEXT | (1 << 30)),
  SDLK_AUDIOPREV = (SDL_SCANCODE_AUDIOPREV | (1 << 30)),
  SDLK_AUDIOSTOP = (SDL_SCANCODE_AUDIOSTOP | (1 << 30)),
  SDLK_AUDIOPLAY = (SDL_SCANCODE_AUDIOPLAY | (1 << 30)),
  SDLK_AUDIOMUTE = (SDL_SCANCODE_AUDIOMUTE | (1 << 30)),
  SDLK_MEDIASELECT = (SDL_SCANCODE_MEDIASELECT | (1 << 30)),
  SDLK_WWW = (SDL_SCANCODE_WWW | (1 << 30)),
  SDLK_MAIL = (SDL_SCANCODE_MAIL | (1 << 30)),
  SDLK_CALCULATOR = (SDL_SCANCODE_CALCULATOR | (1 << 30)),
  SDLK_COMPUTER = (SDL_SCANCODE_COMPUTER | (1 << 30)),
  SDLK_AC_SEARCH = (SDL_SCANCODE_AC_SEARCH | (1 << 30)),
  SDLK_AC_HOME = (SDL_SCANCODE_AC_HOME | (1 << 30)),
  SDLK_AC_BACK = (SDL_SCANCODE_AC_BACK | (1 << 30)),
  SDLK_AC_FORWARD = (SDL_SCANCODE_AC_FORWARD | (1 << 30)),
  SDLK_AC_STOP = (SDL_SCANCODE_AC_STOP | (1 << 30)),
  SDLK_AC_REFRESH = (SDL_SCANCODE_AC_REFRESH | (1 << 30)),
  SDLK_AC_BOOKMARKS = (SDL_SCANCODE_AC_BOOKMARKS | (1 << 30)),

  SDLK_BRIGHTNESSDOWN = (SDL_SCANCODE_BRIGHTNESSDOWN | (1 << 30)),
  SDLK_BRIGHTNESSUP = (SDL_SCANCODE_BRIGHTNESSUP | (1 << 30)),
  SDLK_DISPLAYSWITCH = (SDL_SCANCODE_DISPLAYSWITCH | (1 << 30)),
  SDLK_KBDILLUMTOGGLE = (SDL_SCANCODE_KBDILLUMTOGGLE | (1 << 30)),
  SDLK_KBDILLUMDOWN = (SDL_SCANCODE_KBDILLUMDOWN | (1 << 30)),
  SDLK_KBDILLUMUP = (SDL_SCANCODE_KBDILLUMUP | (1 << 30)),
  SDLK_EJECT = (SDL_SCANCODE_EJECT | (1 << 30)),
  SDLK_SLEEP = (SDL_SCANCODE_SLEEP | (1 << 30)),
  SDLK_APP1 = (SDL_SCANCODE_APP1 | (1 << 30)),
  SDLK_APP2 = (SDL_SCANCODE_APP2 | (1 << 30)),

  SDLK_AUDIOREWIND = (SDL_SCANCODE_AUDIOREWIND | (1 << 30)),
  SDLK_AUDIOFASTFORWARD = (SDL_SCANCODE_AUDIOFASTFORWARD | (1 << 30))
} SDL_KeyCode;

typedef enum {
  KMOD_NONE = 0x0000,
  KMOD_LSHIFT = 0x0001,
  KMOD_RSHIFT = 0x0002,
  KMOD_LCTRL = 0x0040,
  KMOD_RCTRL = 0x0080,
  KMOD_LALT = 0x0100,
  KMOD_RALT = 0x0200,
  KMOD_LGUI = 0x0400,
  KMOD_RGUI = 0x0800,
  KMOD_NUM = 0x1000,
  KMOD_CAPS = 0x2000,
  KMOD_MODE = 0x4000,
  KMOD_SCROLL = 0x8000,

  KMOD_CTRL = KMOD_LCTRL | KMOD_RCTRL,
  KMOD_SHIFT = KMOD_LSHIFT | KMOD_RSHIFT,
  KMOD_ALT = KMOD_LALT | KMOD_RALT,
  KMOD_GUI = KMOD_LGUI | KMOD_RGUI,

  KMOD_RESERVED = KMOD_SCROLL
} SDL_Keymod;

typedef struct SDL_Keysym {
  SDL_Scancode scancode;
  SDL_Keycode sym;
  Uint16 mod;
  Uint32 unused;
} SDL_Keysym;
extern __attribute__((visibility("default"))) SDL_Window *
SDL_GetKeyboardFocus(void);
extern __attribute__((visibility("default"))) const Uint8 *
SDL_GetKeyboardState(int *numkeys);
extern __attribute__((visibility("default"))) SDL_Keymod SDL_GetModState(void);
extern __attribute__((visibility("default"))) void
SDL_SetModState(SDL_Keymod modstate);
extern __attribute__((visibility("default"))) SDL_Keycode
SDL_GetKeyFromScancode(SDL_Scancode scancode);
extern __attribute__((visibility("default"))) SDL_Scancode
SDL_GetScancodeFromKey(SDL_Keycode key);
extern __attribute__((visibility("default"))) const char *
SDL_GetScancodeName(SDL_Scancode scancode);
extern __attribute__((visibility("default"))) SDL_Scancode
SDL_GetScancodeFromName(const char *name);
extern __attribute__((visibility("default"))) const char *
SDL_GetKeyName(SDL_Keycode key);
extern __attribute__((visibility("default"))) SDL_Keycode
SDL_GetKeyFromName(const char *name);
extern __attribute__((visibility("default"))) void SDL_StartTextInput(void);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IsTextInputActive(void);
extern __attribute__((visibility("default"))) void SDL_StopTextInput(void);
extern __attribute__((visibility("default"))) void
SDL_SetTextInputRect(SDL_Rect *rect);
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasScreenKeyboardSupport(void);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IsScreenKeyboardShown(SDL_Window *window);

typedef struct SDL_Cursor SDL_Cursor;

typedef enum {
  SDL_SYSTEM_CURSOR_ARROW,
  SDL_SYSTEM_CURSOR_IBEAM,
  SDL_SYSTEM_CURSOR_WAIT,
  SDL_SYSTEM_CURSOR_CROSSHAIR,
  SDL_SYSTEM_CURSOR_WAITARROW,
  SDL_SYSTEM_CURSOR_SIZENWSE,
  SDL_SYSTEM_CURSOR_SIZENESW,
  SDL_SYSTEM_CURSOR_SIZEWE,
  SDL_SYSTEM_CURSOR_SIZENS,
  SDL_SYSTEM_CURSOR_SIZEALL,
  SDL_SYSTEM_CURSOR_NO,
  SDL_SYSTEM_CURSOR_HAND,
  SDL_NUM_SYSTEM_CURSORS
} SDL_SystemCursor;

typedef enum {
  SDL_MOUSEWHEEL_NORMAL,
  SDL_MOUSEWHEEL_FLIPPED
} SDL_MouseWheelDirection;
extern __attribute__((visibility("default"))) SDL_Window *
SDL_GetMouseFocus(void);
extern __attribute__((visibility("default"))) Uint32 SDL_GetMouseState(int *x,
                                                                       int *y);
extern __attribute__((visibility("default"))) Uint32
SDL_GetGlobalMouseState(int *x, int *y);
extern __attribute__((visibility("default"))) Uint32
SDL_GetRelativeMouseState(int *x, int *y);
extern __attribute__((visibility("default"))) void
SDL_WarpMouseInWindow(SDL_Window *window, int x, int y);
extern __attribute__((visibility("default"))) int SDL_WarpMouseGlobal(int x,
                                                                      int y);
extern __attribute__((visibility("default"))) int
SDL_SetRelativeMouseMode(SDL_bool enabled);
extern __attribute__((visibility("default"))) int
SDL_CaptureMouse(SDL_bool enabled);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GetRelativeMouseMode(void);
extern __attribute__((visibility("default"))) SDL_Cursor *
SDL_CreateCursor(const Uint8 *data, const Uint8 *mask, int w, int h, int hot_x,
                 int hot_y);
extern __attribute__((visibility("default"))) SDL_Cursor *
SDL_CreateColorCursor(SDL_Surface *surface, int hot_x, int hot_y);
extern __attribute__((visibility("default"))) SDL_Cursor *
SDL_CreateSystemCursor(SDL_SystemCursor id);
extern __attribute__((visibility("default"))) void
SDL_SetCursor(SDL_Cursor *cursor);
extern __attribute__((visibility("default"))) SDL_Cursor *SDL_GetCursor(void);
extern __attribute__((visibility("default"))) SDL_Cursor *
SDL_GetDefaultCursor(void);
extern __attribute__((visibility("default"))) void
SDL_FreeCursor(SDL_Cursor *cursor);
extern __attribute__((visibility("default"))) int SDL_ShowCursor(int toggle);

struct _SDL_Joystick;
typedef struct _SDL_Joystick SDL_Joystick;

typedef struct {
  Uint8 data[16];
} SDL_JoystickGUID;
typedef Sint32 SDL_JoystickID;

typedef enum {
  SDL_JOYSTICK_TYPE_UNKNOWN,
  SDL_JOYSTICK_TYPE_GAMECONTROLLER,
  SDL_JOYSTICK_TYPE_WHEEL,
  SDL_JOYSTICK_TYPE_ARCADE_STICK,
  SDL_JOYSTICK_TYPE_FLIGHT_STICK,
  SDL_JOYSTICK_TYPE_DANCE_PAD,
  SDL_JOYSTICK_TYPE_GUITAR,
  SDL_JOYSTICK_TYPE_DRUM_KIT,
  SDL_JOYSTICK_TYPE_ARCADE_PAD,
  SDL_JOYSTICK_TYPE_THROTTLE
} SDL_JoystickType;

typedef enum {
  SDL_JOYSTICK_POWER_UNKNOWN = -1,
  SDL_JOYSTICK_POWER_EMPTY,
  SDL_JOYSTICK_POWER_LOW,
  SDL_JOYSTICK_POWER_MEDIUM,
  SDL_JOYSTICK_POWER_FULL,
  SDL_JOYSTICK_POWER_WIRED,
  SDL_JOYSTICK_POWER_MAX
} SDL_JoystickPowerLevel;

extern __attribute__((visibility("default"))) void SDL_LockJoysticks(void);
extern __attribute__((visibility("default"))) void SDL_UnlockJoysticks(void);
extern __attribute__((visibility("default"))) int SDL_NumJoysticks(void);
extern __attribute__((visibility("default"))) const char *
SDL_JoystickNameForIndex(int device_index);

extern __attribute__((visibility("default"))) int
SDL_JoystickGetDevicePlayerIndex(int device_index);
extern __attribute__((visibility("default"))) SDL_JoystickGUID
SDL_JoystickGetDeviceGUID(int device_index);
extern __attribute__((visibility("default"))) Uint16
SDL_JoystickGetDeviceVendor(int device_index);
extern __attribute__((visibility("default"))) Uint16
SDL_JoystickGetDeviceProduct(int device_index);
extern __attribute__((visibility("default"))) Uint16
SDL_JoystickGetDeviceProductVersion(int device_index);
extern __attribute__((visibility("default"))) SDL_JoystickType
SDL_JoystickGetDeviceType(int device_index);
extern __attribute__((visibility("default"))) SDL_JoystickID
SDL_JoystickGetDeviceInstanceID(int device_index);
extern __attribute__((visibility("default"))) SDL_Joystick *
SDL_JoystickOpen(int device_index);
extern __attribute__((visibility("default"))) SDL_Joystick *
SDL_JoystickFromInstanceID(SDL_JoystickID instance_id);
extern __attribute__((visibility("default"))) SDL_Joystick *
SDL_JoystickFromPlayerIndex(int player_index);
extern __attribute__((visibility("default"))) int
SDL_JoystickAttachVirtual(SDL_JoystickType type, int naxes, int nbuttons,
                          int nhats);
extern __attribute__((visibility("default"))) int
SDL_JoystickDetachVirtual(int device_index);
extern __attribute__((visibility("default"))) SDL_bool
SDL_JoystickIsVirtual(int device_index);
extern __attribute__((visibility("default"))) int
SDL_JoystickSetVirtualAxis(SDL_Joystick *joystick, int axis, Sint16 value);
extern __attribute__((visibility("default"))) int
SDL_JoystickSetVirtualButton(SDL_Joystick *joystick, int button, Uint8 value);
extern __attribute__((visibility("default"))) int
SDL_JoystickSetVirtualHat(SDL_Joystick *joystick, int hat, Uint8 value);
extern __attribute__((visibility("default"))) const char *
SDL_JoystickName(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) int
SDL_JoystickGetPlayerIndex(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) void
SDL_JoystickSetPlayerIndex(SDL_Joystick *joystick, int player_index);
extern __attribute__((visibility("default"))) SDL_JoystickGUID
SDL_JoystickGetGUID(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) Uint16
SDL_JoystickGetVendor(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) Uint16
SDL_JoystickGetProduct(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) Uint16
SDL_JoystickGetProductVersion(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) const char *
SDL_JoystickGetSerial(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) SDL_JoystickType
SDL_JoystickGetType(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) void
SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);
extern __attribute__((visibility("default"))) SDL_JoystickGUID
SDL_JoystickGetGUIDFromString(const char *pchGUID);
extern __attribute__((visibility("default"))) SDL_bool
SDL_JoystickGetAttached(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) SDL_JoystickID
SDL_JoystickInstanceID(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) int
SDL_JoystickNumAxes(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) int
SDL_JoystickNumBalls(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) int
SDL_JoystickNumHats(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) int
SDL_JoystickNumButtons(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) void SDL_JoystickUpdate(void);
extern __attribute__((visibility("default"))) int
SDL_JoystickEventState(int state);

extern __attribute__((visibility("default"))) Sint16
SDL_JoystickGetAxis(SDL_Joystick *joystick, int axis);
extern __attribute__((visibility("default"))) SDL_bool
SDL_JoystickGetAxisInitialState(SDL_Joystick *joystick, int axis,
                                Sint16 *state);

extern __attribute__((visibility("default"))) Uint8
SDL_JoystickGetHat(SDL_Joystick *joystick, int hat);
extern __attribute__((visibility("default"))) int
SDL_JoystickGetBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);
extern __attribute__((visibility("default"))) Uint8
SDL_JoystickGetButton(SDL_Joystick *joystick, int button);
extern __attribute__((visibility("default"))) int
SDL_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumble,
                   Uint16 high_frequency_rumble, Uint32 duration_ms);
extern __attribute__((visibility("default"))) int
SDL_JoystickRumbleTriggers(SDL_Joystick *joystick, Uint16 left_rumble,
                           Uint16 right_rumble, Uint32 duration_ms);
extern __attribute__((visibility("default"))) SDL_bool
SDL_JoystickHasLED(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) SDL_bool
SDL_JoystickHasRumble(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) SDL_bool
SDL_JoystickHasRumbleTriggers(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) int
SDL_JoystickSetLED(SDL_Joystick *joystick, Uint8 red, Uint8 green, Uint8 blue);
extern __attribute__((visibility("default"))) int
SDL_JoystickSendEffect(SDL_Joystick *joystick, const void *data, int size);
extern __attribute__((visibility("default"))) void
SDL_JoystickClose(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) SDL_JoystickPowerLevel
SDL_JoystickCurrentPowerLevel(SDL_Joystick *joystick);

struct _SDL_Sensor;
typedef struct _SDL_Sensor SDL_Sensor;

typedef Sint32 SDL_SensorID;
typedef enum {
  SDL_SENSOR_INVALID = -1,
  SDL_SENSOR_UNKNOWN,
  SDL_SENSOR_ACCEL,
  SDL_SENSOR_GYRO
} SDL_SensorType;
extern __attribute__((visibility("default"))) void SDL_LockSensors(void);
extern __attribute__((visibility("default"))) void SDL_UnlockSensors(void);
extern __attribute__((visibility("default"))) int SDL_NumSensors(void);
extern __attribute__((visibility("default"))) const char *
SDL_SensorGetDeviceName(int device_index);
extern __attribute__((visibility("default"))) SDL_SensorType
SDL_SensorGetDeviceType(int device_index);
extern __attribute__((visibility("default"))) int
SDL_SensorGetDeviceNonPortableType(int device_index);
extern __attribute__((visibility("default"))) SDL_SensorID
SDL_SensorGetDeviceInstanceID(int device_index);
extern __attribute__((visibility("default"))) SDL_Sensor *
SDL_SensorOpen(int device_index);
extern __attribute__((visibility("default"))) SDL_Sensor *
SDL_SensorFromInstanceID(SDL_SensorID instance_id);
extern __attribute__((visibility("default"))) const char *
SDL_SensorGetName(SDL_Sensor *sensor);
extern __attribute__((visibility("default"))) SDL_SensorType
SDL_SensorGetType(SDL_Sensor *sensor);
extern __attribute__((visibility("default"))) int
SDL_SensorGetNonPortableType(SDL_Sensor *sensor);
extern __attribute__((visibility("default"))) SDL_SensorID
SDL_SensorGetInstanceID(SDL_Sensor *sensor);
extern __attribute__((visibility("default"))) int
SDL_SensorGetData(SDL_Sensor *sensor, float *data, int num_values);
extern __attribute__((visibility("default"))) void
SDL_SensorClose(SDL_Sensor *sensor);
extern __attribute__((visibility("default"))) void SDL_SensorUpdate(void);

struct _SDL_GameController;
typedef struct _SDL_GameController SDL_GameController;

typedef enum {
  SDL_CONTROLLER_TYPE_UNKNOWN = 0,
  SDL_CONTROLLER_TYPE_XBOX360,
  SDL_CONTROLLER_TYPE_XBOXONE,
  SDL_CONTROLLER_TYPE_PS3,
  SDL_CONTROLLER_TYPE_PS4,
  SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO,
  SDL_CONTROLLER_TYPE_VIRTUAL,
  SDL_CONTROLLER_TYPE_PS5,
  SDL_CONTROLLER_TYPE_AMAZON_LUNA,
  SDL_CONTROLLER_TYPE_GOOGLE_STADIA
} SDL_GameControllerType;

typedef enum {
  SDL_CONTROLLER_BINDTYPE_NONE = 0,
  SDL_CONTROLLER_BINDTYPE_BUTTON,
  SDL_CONTROLLER_BINDTYPE_AXIS,
  SDL_CONTROLLER_BINDTYPE_HAT
} SDL_GameControllerBindType;

typedef struct SDL_GameControllerButtonBind {
  SDL_GameControllerBindType bindType;
  union {
    int button;
    int axis;
    struct {
      int hat;
      int hat_mask;
    } hat;
  } value;

} SDL_GameControllerButtonBind;
extern __attribute__((visibility("default"))) int
SDL_GameControllerAddMappingsFromRW(SDL_RWops *rw, int freerw);

extern __attribute__((visibility("default"))) int
SDL_GameControllerAddMapping(const char *mappingString);
extern __attribute__((visibility("default"))) int
SDL_GameControllerNumMappings(void);
extern __attribute__((visibility("default"))) char *
SDL_GameControllerMappingForIndex(int mapping_index);
extern __attribute__((visibility("default"))) char *
SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid);
extern __attribute__((visibility("default"))) char *
SDL_GameControllerMapping(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IsGameController(int joystick_index);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerNameForIndex(int joystick_index);
extern __attribute__((visibility("default"))) SDL_GameControllerType
SDL_GameControllerTypeForIndex(int joystick_index);
extern __attribute__((visibility("default"))) char *
SDL_GameControllerMappingForDeviceIndex(int joystick_index);
extern __attribute__((visibility("default"))) SDL_GameController *
SDL_GameControllerOpen(int joystick_index);
extern __attribute__((visibility("default"))) SDL_GameController *
SDL_GameControllerFromInstanceID(SDL_JoystickID joyid);
extern __attribute__((visibility("default"))) SDL_GameController *
SDL_GameControllerFromPlayerIndex(int player_index);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerName(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) SDL_GameControllerType
SDL_GameControllerGetType(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) int
SDL_GameControllerGetPlayerIndex(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) void
SDL_GameControllerSetPlayerIndex(SDL_GameController *gamecontroller,
                                 int player_index);
extern __attribute__((visibility("default"))) Uint16
SDL_GameControllerGetVendor(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) Uint16
SDL_GameControllerGetProduct(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) Uint16
SDL_GameControllerGetProductVersion(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerGetSerial(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) SDL_Joystick *
SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) int
SDL_GameControllerEventState(int state);
extern __attribute__((visibility("default"))) void
SDL_GameControllerUpdate(void);
typedef enum {
  SDL_CONTROLLER_AXIS_INVALID = -1,
  SDL_CONTROLLER_AXIS_LEFTX,
  SDL_CONTROLLER_AXIS_LEFTY,
  SDL_CONTROLLER_AXIS_RIGHTX,
  SDL_CONTROLLER_AXIS_RIGHTY,
  SDL_CONTROLLER_AXIS_TRIGGERLEFT,
  SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
  SDL_CONTROLLER_AXIS_MAX
} SDL_GameControllerAxis;
extern __attribute__((visibility("default"))) SDL_GameControllerAxis
SDL_GameControllerGetAxisFromString(const char *str);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
extern __attribute__((visibility("default"))) SDL_GameControllerButtonBind
SDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller,
                                 SDL_GameControllerAxis axis);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerHasAxis(SDL_GameController *gamecontroller,
                          SDL_GameControllerAxis axis);
extern __attribute__((visibility("default"))) Sint16
SDL_GameControllerGetAxis(SDL_GameController *gamecontroller,
                          SDL_GameControllerAxis axis);

typedef enum {
  SDL_CONTROLLER_BUTTON_INVALID = -1,
  SDL_CONTROLLER_BUTTON_A,
  SDL_CONTROLLER_BUTTON_B,
  SDL_CONTROLLER_BUTTON_X,
  SDL_CONTROLLER_BUTTON_Y,
  SDL_CONTROLLER_BUTTON_BACK,
  SDL_CONTROLLER_BUTTON_GUIDE,
  SDL_CONTROLLER_BUTTON_START,
  SDL_CONTROLLER_BUTTON_LEFTSTICK,
  SDL_CONTROLLER_BUTTON_RIGHTSTICK,
  SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
  SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
  SDL_CONTROLLER_BUTTON_DPAD_UP,
  SDL_CONTROLLER_BUTTON_DPAD_DOWN,
  SDL_CONTROLLER_BUTTON_DPAD_LEFT,
  SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
  SDL_CONTROLLER_BUTTON_MISC1,
  SDL_CONTROLLER_BUTTON_PADDLE1,
  SDL_CONTROLLER_BUTTON_PADDLE2,
  SDL_CONTROLLER_BUTTON_PADDLE3,
  SDL_CONTROLLER_BUTTON_PADDLE4,
  SDL_CONTROLLER_BUTTON_TOUCHPAD,
  SDL_CONTROLLER_BUTTON_MAX
} SDL_GameControllerButton;
extern __attribute__((visibility("default"))) SDL_GameControllerButton
SDL_GameControllerGetButtonFromString(const char *str);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
extern __attribute__((visibility("default"))) SDL_GameControllerButtonBind
SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,
                                   SDL_GameControllerButton button);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerHasButton(SDL_GameController *gamecontroller,
                            SDL_GameControllerButton button);
extern __attribute__((visibility("default"))) Uint8
SDL_GameControllerGetButton(SDL_GameController *gamecontroller,
                            SDL_GameControllerButton button);

extern __attribute__((visibility("default"))) int
SDL_GameControllerGetNumTouchpads(SDL_GameController *gamecontroller);

extern __attribute__((visibility("default"))) int
SDL_GameControllerGetNumTouchpadFingers(SDL_GameController *gamecontroller,
                                        int touchpad);

extern __attribute__((visibility("default"))) int
SDL_GameControllerGetTouchpadFinger(SDL_GameController *gamecontroller,
                                    int touchpad, int finger, Uint8 *state,
                                    float *x, float *y, float *pressure);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerHasSensor(SDL_GameController *gamecontroller,
                            SDL_SensorType type);
extern __attribute__((visibility("default"))) int
SDL_GameControllerSetSensorEnabled(SDL_GameController *gamecontroller,
                                   SDL_SensorType type, SDL_bool enabled);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerIsSensorEnabled(SDL_GameController *gamecontroller,
                                  SDL_SensorType type);
extern __attribute__((visibility("default"))) float
SDL_GameControllerGetSensorDataRate(SDL_GameController *gamecontroller,
                                    SDL_SensorType type);
extern __attribute__((visibility("default"))) int
SDL_GameControllerGetSensorData(SDL_GameController *gamecontroller,
                                SDL_SensorType type, float *data,
                                int num_values);
extern __attribute__((visibility("default"))) int
SDL_GameControllerRumble(SDL_GameController *gamecontroller,
                         Uint16 low_frequency_rumble,
                         Uint16 high_frequency_rumble, Uint32 duration_ms);
extern __attribute__((visibility("default"))) int
SDL_GameControllerRumbleTriggers(SDL_GameController *gamecontroller,
                                 Uint16 left_rumble, Uint16 right_rumble,
                                 Uint32 duration_ms);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerHasLED(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerHasRumble(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GameControllerHasRumbleTriggers(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) int
SDL_GameControllerSetLED(SDL_GameController *gamecontroller, Uint8 red,
                         Uint8 green, Uint8 blue);
extern __attribute__((visibility("default"))) int
SDL_GameControllerSendEffect(SDL_GameController *gamecontroller,
                             const void *data, int size);
extern __attribute__((visibility("default"))) void
SDL_GameControllerClose(SDL_GameController *gamecontroller);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerGetAppleSFSymbolsNameForButton(
    SDL_GameController *gamecontroller, SDL_GameControllerButton button);
extern __attribute__((visibility("default"))) const char *
SDL_GameControllerGetAppleSFSymbolsNameForAxis(
    SDL_GameController *gamecontroller, SDL_GameControllerAxis axis);

typedef Sint64 SDL_TouchID;
typedef Sint64 SDL_FingerID;

typedef enum {
  SDL_TOUCH_DEVICE_INVALID = -1,
  SDL_TOUCH_DEVICE_DIRECT,
  SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE,
  SDL_TOUCH_DEVICE_INDIRECT_RELATIVE
} SDL_TouchDeviceType;

typedef struct SDL_Finger {
  SDL_FingerID id;
  float x;
  float y;
  float pressure;
} SDL_Finger;

extern __attribute__((visibility("default"))) int SDL_GetNumTouchDevices(void);
extern __attribute__((visibility("default"))) SDL_TouchID
SDL_GetTouchDevice(int index);

extern __attribute__((visibility("default"))) SDL_TouchDeviceType
SDL_GetTouchDeviceType(SDL_TouchID touchID);
extern __attribute__((visibility("default"))) int
SDL_GetNumTouchFingers(SDL_TouchID touchID);
extern __attribute__((visibility("default"))) SDL_Finger *
SDL_GetTouchFinger(SDL_TouchID touchID, int index);

typedef Sint64 SDL_GestureID;
extern __attribute__((visibility("default"))) int
SDL_RecordGesture(SDL_TouchID touchId);
extern __attribute__((visibility("default"))) int
SDL_SaveAllDollarTemplates(SDL_RWops *dst);
extern __attribute__((visibility("default"))) int
SDL_SaveDollarTemplate(SDL_GestureID gestureId, SDL_RWops *dst);
extern __attribute__((visibility("default"))) int
SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);

typedef enum {
  SDL_FIRSTEVENT = 0,

  SDL_QUIT = 0x100,

  SDL_APP_TERMINATING,

  SDL_APP_LOWMEMORY,

  SDL_APP_WILLENTERBACKGROUND,

  SDL_APP_DIDENTERBACKGROUND,

  SDL_APP_WILLENTERFOREGROUND,

  SDL_APP_DIDENTERFOREGROUND,

  SDL_LOCALECHANGED,

  SDL_DISPLAYEVENT = 0x150,

  SDL_WINDOWEVENT = 0x200,
  SDL_SYSWMEVENT,

  SDL_KEYDOWN = 0x300,
  SDL_KEYUP,
  SDL_TEXTEDITING,
  SDL_TEXTINPUT,
  SDL_KEYMAPCHANGED,

  SDL_MOUSEMOTION = 0x400,
  SDL_MOUSEBUTTONDOWN,
  SDL_MOUSEBUTTONUP,
  SDL_MOUSEWHEEL,

  SDL_JOYAXISMOTION = 0x600,
  SDL_JOYBALLMOTION,
  SDL_JOYHATMOTION,
  SDL_JOYBUTTONDOWN,
  SDL_JOYBUTTONUP,
  SDL_JOYDEVICEADDED,
  SDL_JOYDEVICEREMOVED,

  SDL_CONTROLLERAXISMOTION = 0x650,
  SDL_CONTROLLERBUTTONDOWN,
  SDL_CONTROLLERBUTTONUP,
  SDL_CONTROLLERDEVICEADDED,
  SDL_CONTROLLERDEVICEREMOVED,
  SDL_CONTROLLERDEVICEREMAPPED,
  SDL_CONTROLLERTOUCHPADDOWN,
  SDL_CONTROLLERTOUCHPADMOTION,
  SDL_CONTROLLERTOUCHPADUP,
  SDL_CONTROLLERSENSORUPDATE,

  SDL_FINGERDOWN = 0x700,
  SDL_FINGERUP,
  SDL_FINGERMOTION,

  SDL_DOLLARGESTURE = 0x800,
  SDL_DOLLARRECORD,
  SDL_MULTIGESTURE,

  SDL_CLIPBOARDUPDATE = 0x900,

  SDL_DROPFILE = 0x1000,
  SDL_DROPTEXT,
  SDL_DROPBEGIN,
  SDL_DROPCOMPLETE,

  SDL_AUDIODEVICEADDED = 0x1100,
  SDL_AUDIODEVICEREMOVED,

  SDL_SENSORUPDATE = 0x1200,

  SDL_RENDER_TARGETS_RESET = 0x2000,
  SDL_RENDER_DEVICE_RESET,

  SDL_POLLSENTINEL = 0x7F00,

  SDL_USEREVENT = 0x8000,

  SDL_LASTEVENT = 0xFFFF
} SDL_EventType;

typedef struct SDL_CommonEvent {
  Uint32 type;
  Uint32 timestamp;
} SDL_CommonEvent;

typedef struct SDL_DisplayEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 display;
  Uint8 event;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint32 data1;
} SDL_DisplayEvent;

typedef struct SDL_WindowEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint8 event;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint32 data1;
  Sint32 data2;
} SDL_WindowEvent;

typedef struct SDL_KeyboardEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint8 state;
  Uint8 repeat;
  Uint8 padding2;
  Uint8 padding3;
  SDL_Keysym keysym;
} SDL_KeyboardEvent;

typedef struct SDL_TextEditingEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  char text[(32)];
  Sint32 start;
  Sint32 length;
} SDL_TextEditingEvent;

typedef struct SDL_TextInputEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  char text[(32)];
} SDL_TextInputEvent;

typedef struct SDL_MouseMotionEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint32 which;
  Uint32 state;
  Sint32 x;
  Sint32 y;
  Sint32 xrel;
  Sint32 yrel;
} SDL_MouseMotionEvent;

typedef struct SDL_MouseButtonEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint32 which;
  Uint8 button;
  Uint8 state;
  Uint8 clicks;
  Uint8 padding1;
  Sint32 x;
  Sint32 y;
} SDL_MouseButtonEvent;

typedef struct SDL_MouseWheelEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Uint32 which;
  Sint32 x;
  Sint32 y;
  Uint32 direction;
  float preciseX;
  float preciseY;
} SDL_MouseWheelEvent;

typedef struct SDL_JoyAxisEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 axis;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint16 value;
  Uint16 padding4;
} SDL_JoyAxisEvent;

typedef struct SDL_JoyBallEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 ball;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint16 xrel;
  Sint16 yrel;
} SDL_JoyBallEvent;

typedef struct SDL_JoyHatEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 hat;
  Uint8 value;

  Uint8 padding1;
  Uint8 padding2;
} SDL_JoyHatEvent;

typedef struct SDL_JoyButtonEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 button;
  Uint8 state;
  Uint8 padding1;
  Uint8 padding2;
} SDL_JoyButtonEvent;

typedef struct SDL_JoyDeviceEvent {
  Uint32 type;
  Uint32 timestamp;
  Sint32 which;
} SDL_JoyDeviceEvent;

typedef struct SDL_ControllerAxisEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 axis;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
  Sint16 value;
  Uint16 padding4;
} SDL_ControllerAxisEvent;

typedef struct SDL_ControllerButtonEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Uint8 button;
  Uint8 state;
  Uint8 padding1;
  Uint8 padding2;
} SDL_ControllerButtonEvent;

typedef struct SDL_ControllerDeviceEvent {
  Uint32 type;
  Uint32 timestamp;
  Sint32 which;
} SDL_ControllerDeviceEvent;

typedef struct SDL_ControllerTouchpadEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Sint32 touchpad;
  Sint32 finger;
  float x;
  float y;
  float pressure;
} SDL_ControllerTouchpadEvent;

typedef struct SDL_ControllerSensorEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_JoystickID which;
  Sint32 sensor;
  float data[3];
} SDL_ControllerSensorEvent;

typedef struct SDL_AudioDeviceEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 which;
  Uint8 iscapture;
  Uint8 padding1;
  Uint8 padding2;
  Uint8 padding3;
} SDL_AudioDeviceEvent;

typedef struct SDL_TouchFingerEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_TouchID touchId;
  SDL_FingerID fingerId;
  float x;
  float y;
  float dx;
  float dy;
  float pressure;
  Uint32 windowID;
} SDL_TouchFingerEvent;

typedef struct SDL_MultiGestureEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_TouchID touchId;
  float dTheta;
  float dDist;
  float x;
  float y;
  Uint16 numFingers;
  Uint16 padding;
} SDL_MultiGestureEvent;

typedef struct SDL_DollarGestureEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_TouchID touchId;
  SDL_GestureID gestureId;
  Uint32 numFingers;
  float error;
  float x;
  float y;
} SDL_DollarGestureEvent;

typedef struct SDL_DropEvent {
  Uint32 type;
  Uint32 timestamp;
  char *file;
  Uint32 windowID;
} SDL_DropEvent;

typedef struct SDL_SensorEvent {
  Uint32 type;
  Uint32 timestamp;
  Sint32 which;
  float data[6];
} SDL_SensorEvent;

typedef struct SDL_QuitEvent {
  Uint32 type;
  Uint32 timestamp;
} SDL_QuitEvent;

typedef struct SDL_OSEvent {
  Uint32 type;
  Uint32 timestamp;
} SDL_OSEvent;

typedef struct SDL_UserEvent {
  Uint32 type;
  Uint32 timestamp;
  Uint32 windowID;
  Sint32 code;
  void *data1;
  void *data2;
} SDL_UserEvent;

struct SDL_SysWMmsg;
typedef struct SDL_SysWMmsg SDL_SysWMmsg;

typedef struct SDL_SysWMEvent {
  Uint32 type;
  Uint32 timestamp;
  SDL_SysWMmsg *msg;
} SDL_SysWMEvent;

typedef union SDL_Event {
  Uint32 type;
  SDL_CommonEvent common;
  SDL_DisplayEvent display;
  SDL_WindowEvent window;
  SDL_KeyboardEvent key;
  SDL_TextEditingEvent edit;
  SDL_TextInputEvent text;
  SDL_MouseMotionEvent motion;
  SDL_MouseButtonEvent button;
  SDL_MouseWheelEvent wheel;
  SDL_JoyAxisEvent jaxis;
  SDL_JoyBallEvent jball;
  SDL_JoyHatEvent jhat;
  SDL_JoyButtonEvent jbutton;
  SDL_JoyDeviceEvent jdevice;
  SDL_ControllerAxisEvent caxis;
  SDL_ControllerButtonEvent cbutton;
  SDL_ControllerDeviceEvent cdevice;
  SDL_ControllerTouchpadEvent ctouchpad;
  SDL_ControllerSensorEvent csensor;
  SDL_AudioDeviceEvent adevice;
  SDL_SensorEvent sensor;
  SDL_QuitEvent quit;
  SDL_UserEvent user;
  SDL_SysWMEvent syswm;
  SDL_TouchFingerEvent tfinger;
  SDL_MultiGestureEvent mgesture;
  SDL_DollarGestureEvent dgesture;
  SDL_DropEvent drop;
  Uint8 padding[sizeof(void *) <= 8    ? 56
                : sizeof(void *) == 16 ? 64
                                       : 3 * sizeof(void *)];
} SDL_Event;

typedef int SDL_compile_time_assert_SDL_Event
    [(sizeof(SDL_Event) == sizeof(((SDL_Event *)((void *)0))->padding)) * 2 -
     1];
extern __attribute__((visibility("default"))) void SDL_PumpEvents(void);

typedef enum { SDL_ADDEVENT, SDL_PEEKEVENT, SDL_GETEVENT } SDL_eventaction;
extern __attribute__((visibility("default"))) int
SDL_PeepEvents(SDL_Event *events, int numevents, SDL_eventaction action,
               Uint32 minType, Uint32 maxType);
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasEvent(Uint32 type);
extern __attribute__((visibility("default"))) SDL_bool
SDL_HasEvents(Uint32 minType, Uint32 maxType);
extern __attribute__((visibility("default"))) void SDL_FlushEvent(Uint32 type);
extern __attribute__((visibility("default"))) void
SDL_FlushEvents(Uint32 minType, Uint32 maxType);
extern __attribute__((visibility("default"))) int
SDL_PollEvent(SDL_Event *event);
extern __attribute__((visibility("default"))) int
SDL_WaitEvent(SDL_Event *event);
extern __attribute__((visibility("default"))) int
SDL_WaitEventTimeout(SDL_Event *event, int timeout);
extern __attribute__((visibility("default"))) int
SDL_PushEvent(SDL_Event *event);
typedef int (*SDL_EventFilter)(void *userdata, SDL_Event *event);
extern __attribute__((visibility("default"))) void
SDL_SetEventFilter(SDL_EventFilter filter, void *userdata);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GetEventFilter(SDL_EventFilter *filter, void **userdata);
extern __attribute__((visibility("default"))) void
SDL_AddEventWatch(SDL_EventFilter filter, void *userdata);
extern __attribute__((visibility("default"))) void
SDL_DelEventWatch(SDL_EventFilter filter, void *userdata);
extern __attribute__((visibility("default"))) void
SDL_FilterEvents(SDL_EventFilter filter, void *userdata);

extern __attribute__((visibility("default"))) Uint8 SDL_EventState(Uint32 type,
                                                                   int state);

extern __attribute__((visibility("default"))) Uint32
SDL_RegisterEvents(int numevents);

extern __attribute__((visibility("default"))) char *SDL_GetBasePath(void);
extern __attribute__((visibility("default"))) char *
SDL_GetPrefPath(const char *org, const char *app);

struct _SDL_Haptic;
typedef struct _SDL_Haptic SDL_Haptic;

typedef struct SDL_HapticDirection {
  Uint8 type;
  Sint32 dir[3];
} SDL_HapticDirection;
typedef struct SDL_HapticConstant {

  Uint16 type;
  SDL_HapticDirection direction;

  Uint32 length;
  Uint16 delay;

  Uint16 button;
  Uint16 interval;

  Sint16 level;

  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticConstant;
typedef struct SDL_HapticPeriodic {

  Uint16 type;

  SDL_HapticDirection direction;

  Uint32 length;
  Uint16 delay;

  Uint16 button;
  Uint16 interval;

  Uint16 period;
  Sint16 magnitude;
  Sint16 offset;
  Uint16 phase;

  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticPeriodic;
typedef struct SDL_HapticCondition {

  Uint16 type;

  SDL_HapticDirection direction;

  Uint32 length;
  Uint16 delay;

  Uint16 button;
  Uint16 interval;

  Uint16 right_sat[3];
  Uint16 left_sat[3];
  Sint16 right_coeff[3];
  Sint16 left_coeff[3];
  Uint16 deadband[3];
  Sint16 center[3];
} SDL_HapticCondition;
typedef struct SDL_HapticRamp {

  Uint16 type;
  SDL_HapticDirection direction;

  Uint32 length;
  Uint16 delay;

  Uint16 button;
  Uint16 interval;

  Sint16 start;
  Sint16 end;

  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticRamp;
typedef struct SDL_HapticLeftRight {

  Uint16 type;

  Uint32 length;

  Uint16 large_magnitude;
  Uint16 small_magnitude;
} SDL_HapticLeftRight;
typedef struct SDL_HapticCustom {

  Uint16 type;
  SDL_HapticDirection direction;

  Uint32 length;
  Uint16 delay;

  Uint16 button;
  Uint16 interval;

  Uint8 channels;
  Uint16 period;
  Uint16 samples;
  Uint16 *data;

  Uint16 attack_length;
  Uint16 attack_level;
  Uint16 fade_length;
  Uint16 fade_level;
} SDL_HapticCustom;
typedef union SDL_HapticEffect {

  Uint16 type;
  SDL_HapticConstant constant;
  SDL_HapticPeriodic periodic;
  SDL_HapticCondition condition;
  SDL_HapticRamp ramp;
  SDL_HapticLeftRight leftright;
  SDL_HapticCustom custom;
} SDL_HapticEffect;
extern __attribute__((visibility("default"))) int SDL_NumHaptics(void);
extern __attribute__((visibility("default"))) const char *
SDL_HapticName(int device_index);
extern __attribute__((visibility("default"))) SDL_Haptic *
SDL_HapticOpen(int device_index);
extern __attribute__((visibility("default"))) int
SDL_HapticOpened(int device_index);
extern __attribute__((visibility("default"))) int
SDL_HapticIndex(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int SDL_MouseIsHaptic(void);
extern __attribute__((visibility("default"))) SDL_Haptic *
SDL_HapticOpenFromMouse(void);
extern __attribute__((visibility("default"))) int
SDL_JoystickIsHaptic(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) SDL_Haptic *
SDL_HapticOpenFromJoystick(SDL_Joystick *joystick);
extern __attribute__((visibility("default"))) void
SDL_HapticClose(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticNumEffects(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticNumEffectsPlaying(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) unsigned int
SDL_HapticQuery(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticNumAxes(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticEffectSupported(SDL_Haptic *haptic, SDL_HapticEffect *effect);
extern __attribute__((visibility("default"))) int
SDL_HapticNewEffect(SDL_Haptic *haptic, SDL_HapticEffect *effect);
extern __attribute__((visibility("default"))) int
SDL_HapticUpdateEffect(SDL_Haptic *haptic, int effect, SDL_HapticEffect *data);
extern __attribute__((visibility("default"))) int
SDL_HapticRunEffect(SDL_Haptic *haptic, int effect, Uint32 iterations);
extern __attribute__((visibility("default"))) int
SDL_HapticStopEffect(SDL_Haptic *haptic, int effect);
extern __attribute__((visibility("default"))) void
SDL_HapticDestroyEffect(SDL_Haptic *haptic, int effect);
extern __attribute__((visibility("default"))) int
SDL_HapticGetEffectStatus(SDL_Haptic *haptic, int effect);
extern __attribute__((visibility("default"))) int
SDL_HapticSetGain(SDL_Haptic *haptic, int gain);
extern __attribute__((visibility("default"))) int
SDL_HapticSetAutocenter(SDL_Haptic *haptic, int autocenter);
extern __attribute__((visibility("default"))) int
SDL_HapticPause(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticUnpause(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticStopAll(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticRumbleSupported(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticRumbleInit(SDL_Haptic *haptic);
extern __attribute__((visibility("default"))) int
SDL_HapticRumblePlay(SDL_Haptic *haptic, float strength, Uint32 length);
extern __attribute__((visibility("default"))) int
SDL_HapticRumbleStop(SDL_Haptic *haptic);

struct SDL_hid_device_;
typedef struct SDL_hid_device_ SDL_hid_device;

typedef struct SDL_hid_device_info {

  char *path;

  unsigned short vendor_id;

  unsigned short product_id;

  wchar_t *serial_number;

  unsigned short release_number;

  wchar_t *manufacturer_string;

  wchar_t *product_string;

  unsigned short usage_page;

  unsigned short usage;

  int interface_number;

  int interface_class;
  int interface_subclass;
  int interface_protocol;

  struct SDL_hid_device_info *next;
} SDL_hid_device_info;
extern __attribute__((visibility("default"))) int SDL_hid_init(void);
extern __attribute__((visibility("default"))) int SDL_hid_exit(void);
extern __attribute__((visibility("default"))) Uint32
SDL_hid_device_change_count(void);
extern __attribute__((visibility("default"))) SDL_hid_device_info *
SDL_hid_enumerate(unsigned short vendor_id, unsigned short product_id);
extern __attribute__((visibility("default"))) void
SDL_hid_free_enumeration(SDL_hid_device_info *devs);
extern __attribute__((visibility("default"))) SDL_hid_device *
SDL_hid_open(unsigned short vendor_id, unsigned short product_id,
             const wchar_t *serial_number);
extern __attribute__((visibility("default"))) SDL_hid_device *
SDL_hid_open_path(const char *path, int bExclusive);
extern __attribute__((visibility("default"))) int
SDL_hid_write(SDL_hid_device *dev, const unsigned char *data, size_t length);
extern __attribute__((visibility("default"))) int
SDL_hid_read_timeout(SDL_hid_device *dev, unsigned char *data, size_t length,
                     int milliseconds);
extern __attribute__((visibility("default"))) int
SDL_hid_read(SDL_hid_device *dev, unsigned char *data, size_t length);
extern __attribute__((visibility("default"))) int
SDL_hid_set_nonblocking(SDL_hid_device *dev, int nonblock);
extern __attribute__((visibility("default"))) int
SDL_hid_send_feature_report(SDL_hid_device *dev, const unsigned char *data,
                            size_t length);
extern __attribute__((visibility("default"))) int
SDL_hid_get_feature_report(SDL_hid_device *dev, unsigned char *data,
                           size_t length);
extern __attribute__((visibility("default"))) void
SDL_hid_close(SDL_hid_device *dev);
extern __attribute__((visibility("default"))) int
SDL_hid_get_manufacturer_string(SDL_hid_device *dev, wchar_t *string,
                                size_t maxlen);
extern __attribute__((visibility("default"))) int
SDL_hid_get_product_string(SDL_hid_device *dev, wchar_t *string, size_t maxlen);
extern __attribute__((visibility("default"))) int
SDL_hid_get_serial_number_string(SDL_hid_device *dev, wchar_t *string,
                                 size_t maxlen);
extern __attribute__((visibility("default"))) int
SDL_hid_get_indexed_string(SDL_hid_device *dev, int string_index,
                           wchar_t *string, size_t maxlen);
extern __attribute__((visibility("default"))) void
SDL_hid_ble_scan(SDL_bool active);

typedef enum {
  SDL_HINT_DEFAULT,
  SDL_HINT_NORMAL,
  SDL_HINT_OVERRIDE
} SDL_HintPriority;
extern __attribute__((visibility("default"))) SDL_bool
SDL_SetHintWithPriority(const char *name, const char *value,
                        SDL_HintPriority priority);
extern __attribute__((visibility("default"))) SDL_bool
SDL_SetHint(const char *name, const char *value);
extern __attribute__((visibility("default"))) const char *
SDL_GetHint(const char *name);
extern __attribute__((visibility("default"))) SDL_bool
SDL_GetHintBoolean(const char *name, SDL_bool default_value);
typedef void (*SDL_HintCallback)(void *userdata, const char *name,
                                 const char *oldValue, const char *newValue);
extern __attribute__((visibility("default"))) void
SDL_AddHintCallback(const char *name, SDL_HintCallback callback,
                    void *userdata);
extern __attribute__((visibility("default"))) void
SDL_DelHintCallback(const char *name, SDL_HintCallback callback,
                    void *userdata);
extern __attribute__((visibility("default"))) void SDL_ClearHints(void);

extern __attribute__((visibility("default"))) void *
SDL_LoadObject(const char *sofile);
extern __attribute__((visibility("default"))) void *
SDL_LoadFunction(void *handle, const char *name);
extern __attribute__((visibility("default"))) void
SDL_UnloadObject(void *handle);

typedef enum {
  SDL_LOG_CATEGORY_APPLICATION,
  SDL_LOG_CATEGORY_ERROR,
  SDL_LOG_CATEGORY_ASSERT,
  SDL_LOG_CATEGORY_SYSTEM,
  SDL_LOG_CATEGORY_AUDIO,
  SDL_LOG_CATEGORY_VIDEO,
  SDL_LOG_CATEGORY_RENDER,
  SDL_LOG_CATEGORY_INPUT,
  SDL_LOG_CATEGORY_TEST,

  SDL_LOG_CATEGORY_RESERVED1,
  SDL_LOG_CATEGORY_RESERVED2,
  SDL_LOG_CATEGORY_RESERVED3,
  SDL_LOG_CATEGORY_RESERVED4,
  SDL_LOG_CATEGORY_RESERVED5,
  SDL_LOG_CATEGORY_RESERVED6,
  SDL_LOG_CATEGORY_RESERVED7,
  SDL_LOG_CATEGORY_RESERVED8,
  SDL_LOG_CATEGORY_RESERVED9,
  SDL_LOG_CATEGORY_RESERVED10,
  SDL_LOG_CATEGORY_CUSTOM
} SDL_LogCategory;

typedef enum {
  SDL_LOG_PRIORITY_VERBOSE = 1,
  SDL_LOG_PRIORITY_DEBUG,
  SDL_LOG_PRIORITY_INFO,
  SDL_LOG_PRIORITY_WARN,
  SDL_LOG_PRIORITY_ERROR,
  SDL_LOG_PRIORITY_CRITICAL,
  SDL_NUM_LOG_PRIORITIES
} SDL_LogPriority;
extern __attribute__((visibility("default"))) void
SDL_LogSetAllPriority(SDL_LogPriority priority);
extern __attribute__((visibility("default"))) void
SDL_LogSetPriority(int category, SDL_LogPriority priority);
extern __attribute__((visibility("default"))) SDL_LogPriority
SDL_LogGetPriority(int category);
extern __attribute__((visibility("default"))) void SDL_LogResetPriorities(void);
extern __attribute__((visibility("default"))) void SDL_Log(const char *fmt, ...)
    __attribute__((format(__printf__, 1, 1 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogVerbose(int category, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogDebug(int category, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogInfo(int category, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogWarn(int category, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogError(int category, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogCritical(int category, const char *fmt, ...)
    __attribute__((format(__printf__, 2, 2 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogMessage(int category, SDL_LogPriority priority, const char *fmt, ...)
    __attribute__((format(__printf__, 3, 3 + 1)));
extern __attribute__((visibility("default"))) void
SDL_LogMessageV(int category, SDL_LogPriority priority, const char *fmt,
                va_list ap);
typedef void (*SDL_LogOutputFunction)(void *userdata, int category,
                                      SDL_LogPriority priority,
                                      const char *message);
extern __attribute__((visibility("default"))) void
SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
extern __attribute__((visibility("default"))) void
SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);

typedef enum {
  SDL_MESSAGEBOX_ERROR = 0x00000010,
  SDL_MESSAGEBOX_WARNING = 0x00000020,
  SDL_MESSAGEBOX_INFORMATION = 0x00000040,
  SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 0x00000080,
  SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 0x00000100
} SDL_MessageBoxFlags;

typedef enum {
  SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,
  SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002
} SDL_MessageBoxButtonFlags;

typedef struct {
  Uint32 flags;
  int buttonid;
  const char *text;
} SDL_MessageBoxButtonData;

typedef struct {
  Uint8 r, g, b;
} SDL_MessageBoxColor;

typedef enum {
  SDL_MESSAGEBOX_COLOR_BACKGROUND,
  SDL_MESSAGEBOX_COLOR_TEXT,
  SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
  SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
  SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
  SDL_MESSAGEBOX_COLOR_MAX
} SDL_MessageBoxColorType;

typedef struct {
  SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];
} SDL_MessageBoxColorScheme;

typedef struct {
  Uint32 flags;
  SDL_Window *window;
  const char *title;
  const char *message;

  int numbuttons;
  const SDL_MessageBoxButtonData *buttons;

  const SDL_MessageBoxColorScheme *colorScheme;
} SDL_MessageBoxData;
extern __attribute__((visibility("default"))) int
SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
extern __attribute__((visibility("default"))) int
SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message,
                         SDL_Window *window);

typedef void *SDL_MetalView;
extern __attribute__((visibility("default"))) SDL_MetalView
SDL_Metal_CreateView(SDL_Window *window);
extern __attribute__((visibility("default"))) void
SDL_Metal_DestroyView(SDL_MetalView view);
extern __attribute__((visibility("default"))) void *
SDL_Metal_GetLayer(SDL_MetalView view);
extern __attribute__((visibility("default"))) void
SDL_Metal_GetDrawableSize(SDL_Window *window, int *w, int *h);

typedef enum {
  SDL_POWERSTATE_UNKNOWN,
  SDL_POWERSTATE_ON_BATTERY,
  SDL_POWERSTATE_NO_BATTERY,
  SDL_POWERSTATE_CHARGING,
  SDL_POWERSTATE_CHARGED
} SDL_PowerState;
extern __attribute__((visibility("default"))) SDL_PowerState
SDL_GetPowerInfo(int *secs, int *pct);

typedef enum {
  SDL_RENDERER_SOFTWARE = 0x00000001,
  SDL_RENDERER_ACCELERATED = 0x00000002,

  SDL_RENDERER_PRESENTVSYNC = 0x00000004,

  SDL_RENDERER_TARGETTEXTURE = 0x00000008

} SDL_RendererFlags;

typedef struct SDL_RendererInfo {
  const char *name;
  Uint32 flags;
  Uint32 num_texture_formats;
  Uint32 texture_formats[16];
  int max_texture_width;
  int max_texture_height;
} SDL_RendererInfo;

typedef struct SDL_Vertex {
  SDL_FPoint position;
  SDL_Color color;
  SDL_FPoint tex_coord;
} SDL_Vertex;

typedef enum {
  SDL_ScaleModeNearest,
  SDL_ScaleModeLinear,
  SDL_ScaleModeBest
} SDL_ScaleMode;

typedef enum {
  SDL_TEXTUREACCESS_STATIC,
  SDL_TEXTUREACCESS_STREAMING,
  SDL_TEXTUREACCESS_TARGET
} SDL_TextureAccess;

typedef enum {
  SDL_TEXTUREMODULATE_NONE = 0x00000000,
  SDL_TEXTUREMODULATE_COLOR = 0x00000001,
  SDL_TEXTUREMODULATE_ALPHA = 0x00000002
} SDL_TextureModulate;

typedef enum {
  SDL_FLIP_NONE = 0x00000000,
  SDL_FLIP_HORIZONTAL = 0x00000001,
  SDL_FLIP_VERTICAL = 0x00000002
} SDL_RendererFlip;

struct SDL_Renderer;
typedef struct SDL_Renderer SDL_Renderer;

struct SDL_Texture;
typedef struct SDL_Texture SDL_Texture;
extern __attribute__((visibility("default"))) int SDL_GetNumRenderDrivers(void);
extern __attribute__((visibility("default"))) int
SDL_GetRenderDriverInfo(int index, SDL_RendererInfo *info);
extern __attribute__((visibility("default"))) int
SDL_CreateWindowAndRenderer(int width, int height, Uint32 window_flags,
                            SDL_Window **window, SDL_Renderer **renderer);
extern __attribute__((visibility("default"))) SDL_Renderer *
SDL_CreateRenderer(SDL_Window *window, int index, Uint32 flags);
extern __attribute__((visibility("default"))) SDL_Renderer *
SDL_CreateSoftwareRenderer(SDL_Surface *surface);
extern __attribute__((visibility("default"))) SDL_Renderer *
SDL_GetRenderer(SDL_Window *window);
extern __attribute__((visibility("default"))) int
SDL_GetRendererInfo(SDL_Renderer *renderer, SDL_RendererInfo *info);
extern __attribute__((visibility("default"))) int
SDL_GetRendererOutputSize(SDL_Renderer *renderer, int *w, int *h);
extern __attribute__((visibility("default"))) SDL_Texture *
SDL_CreateTexture(SDL_Renderer *renderer, Uint32 format, int access, int w,
                  int h);
extern __attribute__((visibility("default"))) SDL_Texture *
SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface);
extern __attribute__((visibility("default"))) int
SDL_QueryTexture(SDL_Texture *texture, Uint32 *format, int *access, int *w,
                 int *h);
extern __attribute__((visibility("default"))) int
SDL_SetTextureColorMod(SDL_Texture *texture, Uint8 r, Uint8 g, Uint8 b);
extern __attribute__((visibility("default"))) int
SDL_GetTextureColorMod(SDL_Texture *texture, Uint8 *r, Uint8 *g, Uint8 *b);
extern __attribute__((visibility("default"))) int
SDL_SetTextureAlphaMod(SDL_Texture *texture, Uint8 alpha);
extern __attribute__((visibility("default"))) int
SDL_GetTextureAlphaMod(SDL_Texture *texture, Uint8 *alpha);
extern __attribute__((visibility("default"))) int
SDL_SetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode blendMode);
extern __attribute__((visibility("default"))) int
SDL_GetTextureBlendMode(SDL_Texture *texture, SDL_BlendMode *blendMode);
extern __attribute__((visibility("default"))) int
SDL_SetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode scaleMode);
extern __attribute__((visibility("default"))) int
SDL_GetTextureScaleMode(SDL_Texture *texture, SDL_ScaleMode *scaleMode);
extern __attribute__((visibility("default"))) int
SDL_SetTextureUserData(SDL_Texture *texture, void *userdata);
extern __attribute__((visibility("default"))) void *
SDL_GetTextureUserData(SDL_Texture *texture);
extern __attribute__((visibility("default"))) int
SDL_UpdateTexture(SDL_Texture *texture, const SDL_Rect *rect,
                  const void *pixels, int pitch);
extern __attribute__((visibility("default"))) int
SDL_UpdateYUVTexture(SDL_Texture *texture, const SDL_Rect *rect,
                     const Uint8 *Yplane, int Ypitch, const Uint8 *Uplane,
                     int Upitch, const Uint8 *Vplane, int Vpitch);
extern __attribute__((visibility("default"))) int
SDL_UpdateNVTexture(SDL_Texture *texture, const SDL_Rect *rect,
                    const Uint8 *Yplane, int Ypitch, const Uint8 *UVplane,
                    int UVpitch);
extern __attribute__((visibility("default"))) int
SDL_LockTexture(SDL_Texture *texture, const SDL_Rect *rect, void **pixels,
                int *pitch);
extern __attribute__((visibility("default"))) int
SDL_LockTextureToSurface(SDL_Texture *texture, const SDL_Rect *rect,
                         SDL_Surface **surface);
extern __attribute__((visibility("default"))) void
SDL_UnlockTexture(SDL_Texture *texture);
extern __attribute__((visibility("default"))) SDL_bool
SDL_RenderTargetSupported(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture);
extern __attribute__((visibility("default"))) SDL_Texture *
SDL_GetRenderTarget(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_RenderSetLogicalSize(SDL_Renderer *renderer, int w, int h);
extern __attribute__((visibility("default"))) void
SDL_RenderGetLogicalSize(SDL_Renderer *renderer, int *w, int *h);
extern __attribute__((visibility("default"))) int
SDL_RenderSetIntegerScale(SDL_Renderer *renderer, SDL_bool enable);
extern __attribute__((visibility("default"))) SDL_bool
SDL_RenderGetIntegerScale(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_RenderSetViewport(SDL_Renderer *renderer, const SDL_Rect *rect);
extern __attribute__((visibility("default"))) void
SDL_RenderGetViewport(SDL_Renderer *renderer, SDL_Rect *rect);
extern __attribute__((visibility("default"))) int
SDL_RenderSetClipRect(SDL_Renderer *renderer, const SDL_Rect *rect);
extern __attribute__((visibility("default"))) void
SDL_RenderGetClipRect(SDL_Renderer *renderer, SDL_Rect *rect);
extern __attribute__((visibility("default"))) SDL_bool
SDL_RenderIsClipEnabled(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_RenderSetScale(SDL_Renderer *renderer, float scaleX, float scaleY);
extern __attribute__((visibility("default"))) void
SDL_RenderGetScale(SDL_Renderer *renderer, float *scaleX, float *scaleY);
extern __attribute__((visibility("default"))) void
SDL_RenderWindowToLogical(SDL_Renderer *renderer, int windowX, int windowY,
                          float *logicalX, float *logicalY);
extern __attribute__((visibility("default"))) void
SDL_RenderLogicalToWindow(SDL_Renderer *renderer, float logicalX,
                          float logicalY, int *windowX, int *windowY);
extern __attribute__((visibility("default"))) int
SDL_SetRenderDrawColor(SDL_Renderer *renderer, Uint8 r, Uint8 g, Uint8 b,
                       Uint8 a);
extern __attribute__((visibility("default"))) int
SDL_GetRenderDrawColor(SDL_Renderer *renderer, Uint8 *r, Uint8 *g, Uint8 *b,
                       Uint8 *a);
extern __attribute__((visibility("default"))) int
SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode blendMode);
extern __attribute__((visibility("default"))) int
SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer, SDL_BlendMode *blendMode);
extern __attribute__((visibility("default"))) int
SDL_RenderClear(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawPoint(SDL_Renderer *renderer, int x, int y);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawPoints(SDL_Renderer *renderer, const SDL_Point *points,
                     int count);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawLine(SDL_Renderer *renderer, int x1, int y1, int x2, int y2);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawLines(SDL_Renderer *renderer, const SDL_Point *points, int count);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawRect(SDL_Renderer *renderer, const SDL_Rect *rect);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawRects(SDL_Renderer *renderer, const SDL_Rect *rects, int count);
extern __attribute__((visibility("default"))) int
SDL_RenderFillRect(SDL_Renderer *renderer, const SDL_Rect *rect);
extern __attribute__((visibility("default"))) int
SDL_RenderFillRects(SDL_Renderer *renderer, const SDL_Rect *rects, int count);
extern __attribute__((visibility("default"))) int
SDL_RenderCopy(SDL_Renderer *renderer, SDL_Texture *texture,
               const SDL_Rect *srcrect, const SDL_Rect *dstrect);
extern __attribute__((visibility("default"))) int
SDL_RenderCopyEx(SDL_Renderer *renderer, SDL_Texture *texture,
                 const SDL_Rect *srcrect, const SDL_Rect *dstrect,
                 const double angle, const SDL_Point *center,
                 const SDL_RendererFlip flip);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawPointF(SDL_Renderer *renderer, float x, float y);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawPointsF(SDL_Renderer *renderer, const SDL_FPoint *points,
                      int count);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawLineF(SDL_Renderer *renderer, float x1, float y1, float x2,
                    float y2);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawLinesF(SDL_Renderer *renderer, const SDL_FPoint *points,
                     int count);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawRectF(SDL_Renderer *renderer, const SDL_FRect *rect);
extern __attribute__((visibility("default"))) int
SDL_RenderDrawRectsF(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
extern __attribute__((visibility("default"))) int
SDL_RenderFillRectF(SDL_Renderer *renderer, const SDL_FRect *rect);
extern __attribute__((visibility("default"))) int
SDL_RenderFillRectsF(SDL_Renderer *renderer, const SDL_FRect *rects, int count);
extern __attribute__((visibility("default"))) int
SDL_RenderCopyF(SDL_Renderer *renderer, SDL_Texture *texture,
                const SDL_Rect *srcrect, const SDL_FRect *dstrect);
extern __attribute__((visibility("default"))) int
SDL_RenderCopyExF(SDL_Renderer *renderer, SDL_Texture *texture,
                  const SDL_Rect *srcrect, const SDL_FRect *dstrect,
                  const double angle, const SDL_FPoint *center,
                  const SDL_RendererFlip flip);
extern __attribute__((visibility("default"))) int
SDL_RenderGeometry(SDL_Renderer *renderer, SDL_Texture *texture,
                   const SDL_Vertex *vertices, int num_vertices,
                   const int *indices, int num_indices);
extern __attribute__((visibility("default"))) int
SDL_RenderGeometryRaw(SDL_Renderer *renderer, SDL_Texture *texture,
                      const float *xy, int xy_stride, const SDL_Color *color,
                      int color_stride, const float *uv, int uv_stride,
                      int num_vertices, const void *indices, int num_indices,
                      int size_indices);
extern __attribute__((visibility("default"))) int
SDL_RenderReadPixels(SDL_Renderer *renderer, const SDL_Rect *rect,
                     Uint32 format, void *pixels, int pitch);
extern __attribute__((visibility("default"))) void
SDL_RenderPresent(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) void
SDL_DestroyTexture(SDL_Texture *texture);
extern __attribute__((visibility("default"))) void
SDL_DestroyRenderer(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_RenderFlush(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);
extern __attribute__((visibility("default"))) int
SDL_GL_UnbindTexture(SDL_Texture *texture);
extern __attribute__((visibility("default"))) void *
SDL_RenderGetMetalLayer(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) void *
SDL_RenderGetMetalCommandEncoder(SDL_Renderer *renderer);
extern __attribute__((visibility("default"))) int
SDL_RenderSetVSync(SDL_Renderer *renderer, int vsync);

extern __attribute__((visibility("default"))) SDL_Window *
SDL_CreateShapedWindow(const char *title, unsigned int x, unsigned int y,
                       unsigned int w, unsigned int h, Uint32 flags);
extern __attribute__((visibility("default"))) SDL_bool
SDL_IsShapedWindow(const SDL_Window *window);

typedef enum {

  ShapeModeDefault,

  ShapeModeBinarizeAlpha,

  ShapeModeReverseBinarizeAlpha,

  ShapeModeColorKey
} WindowShapeMode;

typedef union {

  Uint8 binarizationCutoff;
  SDL_Color colorKey;
} SDL_WindowShapeParams;

typedef struct SDL_WindowShapeMode {

  WindowShapeMode mode;

  SDL_WindowShapeParams parameters;
} SDL_WindowShapeMode;
extern __attribute__((visibility("default"))) int
SDL_SetWindowShape(SDL_Window *window, SDL_Surface *shape,
                   SDL_WindowShapeMode *shape_mode);
extern __attribute__((visibility("default"))) int
SDL_GetShapedWindowMode(SDL_Window *window, SDL_WindowShapeMode *shape_mode);

extern __attribute__((visibility("default"))) int
SDL_LinuxSetThreadPriority(Sint64 threadID, int priority);
extern __attribute__((visibility("default"))) int
SDL_LinuxSetThreadPriorityAndPolicy(Sint64 threadID, int sdlPriority,
                                    int schedPolicy);
extern __attribute__((visibility("default"))) SDL_bool SDL_IsTablet(void);

extern __attribute__((visibility("default"))) void
SDL_OnApplicationWillTerminate(void);
extern __attribute__((visibility("default"))) void
SDL_OnApplicationDidReceiveMemoryWarning(void);
extern __attribute__((visibility("default"))) void
SDL_OnApplicationWillResignActive(void);
extern __attribute__((visibility("default"))) void
SDL_OnApplicationDidEnterBackground(void);
extern __attribute__((visibility("default"))) void
SDL_OnApplicationWillEnterForeground(void);
extern __attribute__((visibility("default"))) void
SDL_OnApplicationDidBecomeActive(void);

extern __attribute__((visibility("default"))) Uint32 SDL_GetTicks(void);
extern __attribute__((visibility("default"))) Uint64 SDL_GetTicks64(void);
extern __attribute__((visibility("default"))) Uint64
SDL_GetPerformanceCounter(void);
extern __attribute__((visibility("default"))) Uint64
SDL_GetPerformanceFrequency(void);
extern __attribute__((visibility("default"))) void SDL_Delay(Uint32 ms);
typedef Uint32 (*SDL_TimerCallback)(Uint32 interval, void *param);

typedef int SDL_TimerID;
extern __attribute__((visibility("default"))) SDL_TimerID
SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param);
extern __attribute__((visibility("default"))) SDL_bool
SDL_RemoveTimer(SDL_TimerID id);

typedef struct SDL_version {
  Uint8 major;
  Uint8 minor;
  Uint8 patch;
} SDL_version;

extern __attribute__((visibility("default"))) void
SDL_GetVersion(SDL_version *ver);
extern __attribute__((visibility("default"))) const char *SDL_GetRevision(void);
extern __attribute__((deprecated)) __attribute__((visibility("default"))) int
SDL_GetRevisionNumber(void);

typedef struct SDL_Locale {
  const char *language;
  const char *country;
} SDL_Locale;
extern __attribute__((visibility("default"))) SDL_Locale *
SDL_GetPreferredLocales(void);

extern __attribute__((visibility("default"))) int SDL_OpenURL(const char *url);

extern __attribute__((visibility("default"))) int SDL_Init(Uint32 flags);
extern __attribute__((visibility("default"))) int
SDL_InitSubSystem(Uint32 flags);
extern __attribute__((visibility("default"))) void
SDL_QuitSubSystem(Uint32 flags);
extern __attribute__((visibility("default"))) Uint32 SDL_WasInit(Uint32 flags);
extern __attribute__((visibility("default"))) void SDL_Quit(void);

void init_map();
void init_serial();
void init_timer();
void init_vga();
void init_i8042();
void init_audio();
void init_disk();
void init_sdcard();
void init_alarm();

void send_key(uint8_t, _Bool);
void vga_update_screen();

void device_update() {
  static uint64_t last = 0;
  uint64_t now = get_time();
  if (now - last < 1000000 / 60) {
    return;
  }
  last = now;

  vga_update_screen();

  SDL_Event event;
  while (SDL_PollEvent(&event)) {
    switch (event.type) {
    case SDL_QUIT:
      nemu_state.state = NEMU_QUIT;
      break;

    case SDL_KEYDOWN:
    case SDL_KEYUP: {
      uint8_t k = event.key.keysym.scancode;

      _Bool is_keydown = (event.key.type == SDL_KEYDOWN);
      send_key(k, is_keydown);
      break;
    }

    default:
      break;
    }
  }
}

void sdl_clear_event_queue() {

  SDL_Event event;
  while (SDL_PollEvent(&event))
    ;
}

void init_device() {
  ;
  init_map();

  init_serial();
  init_timer();
  init_vga();
  init_i8042();
  init_audio();
  init_disk();
  ;

  init_alarm();
}
